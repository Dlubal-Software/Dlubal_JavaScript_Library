{
  "api/AnalysisSettings.ModalAnalysisSettings.html": {
    "href": "api/AnalysisSettings.ModalAnalysisSettings.html",
    "title": "Class ModalAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ModalAnalysisSettings Modal analysis settings high level function Constructors ModalAnalysisSettings(no, solverMethod, beyondFrequency, maximalFrequency, comment, params) Creates modal analysis settings high level function Declaration new ModalAnalysisSettings(no, solverMethod, beyondFrequency, maximalFrequency, comment, params) Parameters Type Name Description Number no unique ID of modal analysis settings String solverMethod solver method() String beyondFrequency Setting of eigenvectors beyond frequency String maximalFrequency Setting of eigenvectors maximal frequency String comment Comment, empty by default Object params Modal analysis settings parameters, empty by default Returns Type Description Object ModalAnalysisSettings Functions UserDefinedNumberOfModes(no, name, numberOfModes, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Creates modal analysis settings Declaration function UserDefinedNumberOfModes(no, name, numberOfModes, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Parameters Type Name Description Dlubal.int no string name Dlubal.int numberOfModes string solverMethod string typeOfMassMatrix string massConversion array actingMasses string comment Dlubal.dictionary params Returns Type Description Object ModalAnalysisSettings AutomaticNumberOfModesToReachEffMass(no, name, effectiveModalMassFactor, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Declaration function AutomaticNumberOfModesToReachEffMass(no, name, effectiveModalMassFactor, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* effectiveModalMassFactor Dlubal.* solverMethod Dlubal.* typeOfMassMatrix Dlubal.* massConversion Dlubal.* actingMasses Dlubal.* comment Dlubal.* params Returns Type Description Object ModalAnalysisSettings AutomaticNumberOfModesToReachMaxFreq(no, name, maxNaturalFrequency, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Declaration function AutomaticNumberOfModesToReachMaxFreq(no, name, maxNaturalFrequency, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* maxNaturalFrequency Dlubal.* solverMethod Dlubal.* typeOfMassMatrix Dlubal.* massConversion Dlubal.* actingMasses Dlubal.* comment Dlubal.* params Returns Type Description Object ModalAnalysisSettings"
  },
  "api/ContactSolid.html": {
    "href": "api/ContactSolid.html",
    "title": "Class ContactSolid | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ContactSolid Creates contact solid Constructors ContactSolid(no, perpendicular_to_surface, parallel_to_surface, values, comment, params) Creates contact solid Declaration new ContactSolid(no, perpendicular_to_surface, parallel_to_surface, values, comment, params) Parameters Type Name Description Number no Index of contact solid Number perpendicular_to_surface Contact perpendicular to surfaces, can be undefined (\"Failure force transmission\" by default) 1 - Full force transmission 2 - Failure under compression 3 - Failure under tension Number parallel_to_surface Contact parallel to surfaces, can be undefined (\"Failure if contact perpendicular to surfaces failed\" by default) 1 - Full force transmission 2 - Rigid friction 3 - Rigid friction with limit 4 - Elastic friction 5 - Elastic friction with limit 6 - Elastic solid behavior 7 - Failure if contact perpendicular to surfaces failed (only for failure perpendicular - 2 and 3) Array values Values depends on contact parallel to surface type, can be undefined String comment Comment, can be undefined Object params Contact solid's parameters, can be undefined Returns Type Description Created contact solid Functions AssignTo(solid_list) Assigns solids to contact solid Declaration function AssignTo(solid_list) Parameters Type Name Description Array solid_list List of solid's indexes"
  },
  "api/CoordinateSystem.html": {
    "href": "api/CoordinateSystem.html",
    "title": "Class CoordinateSystem | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class CoordinateSystem Creates coordinate system Constructors CoordinateSystem(no, comment, params) Creates coordinate system Declaration new CoordinateSystem(no, comment, params) Parameters Type Name Description Number no Index of coordinate system, can be undefined String comment Comment, can be undefined Object params Additional coordinate system parameters, can be undefined Returns Type Description Object Created coordinate system Functions Offset(no, original_point, comment, params) Create coordinate system with \"offset\" type Declaration function Offset(no, original_point, comment, params) Parameters Type Name Description Number no Index of coordinate system, can be undefined Array original_point Coordinates of original point String comment Comment, can be undefined Object params Additional parameters, can be undefined Returns Type Description Created coordinate system ThreePoints(no, original_point, u_axis_point_coordinate, uw_plane_point_coordinate, comment, params) Create coordinate system with \"3 Points\" type Declaration function ThreePoints(no, original_point, u_axis_point_coordinate, uw_plane_point_coordinate, comment, params) Parameters Type Name Description Number no Index of coordinate system, can be undefined Array original_point Coordinates of original point Array u_axis_point_coordinate Coordinates of u axis point Array uw_plane_point_coordinate Coordinates of uw plane point String comment Comment, can be undefined Object params Additional parameters, can be undefined Returns Type Description Created coordinate system TwoPointsAndAngle(no, original_point, uw_plane_point_coordinate, uw_plane_angle, comment, params) Create coordinate system with \"2 Points and Angle\" type Declaration function TwoPointsAndAngle(no, original_point, uw_plane_point_coordinate, uw_plane_angle, comment, params) Parameters Type Name Description Number no Index of coordinate system, can be undefined Array original_point Coordinates of original point Array uw_plane_point_coordinate Coordinates of uw plane point Number uw_plane_angle Rotation of UW-plane in radians String comment Comment, can be undefined Object params Additional parameters, can be undefined Returns Type Description Created coordinate system PointAndThreeAngels(no, original_point, rotation_angle_1, rotation_angle_2, rotation_angle_3, rotation_angles_sequence, comment, params) Create coordinate system with \"Points and Three Angles\" type Declaration function PointAndThreeAngels(no, original_point, rotation_angle_1, rotation_angle_2, rotation_angle_3, rotation_angles_sequence, comment, params) Parameters Type Name Description Number no Index of coordinate system, can be undefined Array original_point Coordinates of original point Number rotation_angle_1 Rotational angle in radians, can be undefined Number rotation_angle_2 Rotational angle in radians, can be undefined Number rotation_angle_3 Rotational angle in radians, can be undefined String rotation_angles_sequence Rotational angle sequence, can be undefined String comment Comment, can be undefined Object params Additional parameters, can be undefined Returns Type Description Created coordinate system"
  },
  "api/DesignSituation.html": {
    "href": "api/DesignSituation.html",
    "title": "Class DesignSituation | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class DesignSituation Creates design situation object Constructors DesignSituation(no, design_situation_type, params, comment) Creates design situation object Declaration new DesignSituation(no, design_situation_type, params, comment) Parameters Type Name Description Number no Number of design situation, can be undefined String design_situation_type Design situation type Object params Additional parameters, can be undefined String comment Comment, can be undefined Returns Type Description Created design situation object Functions DesignSituation() Returns internal Design Situation object Declaration function DesignSituation() Returns Type Description Internal Design Situation object No() Returns number of Design Situation Declaration function No() Returns Type Description Number of Design Situation SetCombinationWizard(combination_wizard_no) Sets combination wizard Declaration function SetCombinationWizard(combination_wizard_no) Parameters Type Name Description Object combination_wizard_no Combination wizard number SetConsiderInclusiveExclusiveLoadCases(relationship_between_load_cases_no) Sets relationship between load cases Declaration function SetConsiderInclusiveExclusiveLoadCases(relationship_between_load_cases_no) Parameters Type Name Description Object relationship_between_load_cases_no Relationship between load cases number SetActive(active) Enables/disables design situation Declaration function SetActive(active) Parameters Type Name Description Boolean active Design situation is enabled or disabled, can be undefined (true as default)"
  },
  "api/FreeCircularLoad.html": {
    "href": "api/FreeCircularLoad.html",
    "title": "Class FreeCircularLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeCircularLoad Creates free circular load Constructors FreeCircularLoad(no, load_case, surfaces, comment, params) Creates free circular load Declaration new FreeCircularLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free circular load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free circular load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free circular uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free circular uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free circular uniform load Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free circular linear load Declaration function Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free circular linear load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free linear uniform load"
  },
  "api/FreeConcentratedLoad.html": {
    "href": "api/FreeConcentratedLoad.html",
    "title": "Class FreeConcentratedLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeConcentratedLoad Creates free concentrated load Constructors FreeConcentratedLoad(no, load_case, surfaces, comment, params) Creates free concentrated load Declaration new FreeConcentratedLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free concentrated load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free concentrated load Functions Force(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free concentrated force load Declaration function Force(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free concentrated force load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free concentrated force load Moment(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free concentrated moment load Declaration function Moment(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free concentrated moment load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free concentrated moment load"
  },
  "api/FreeLineLoad.html": {
    "href": "api/FreeLineLoad.html",
    "title": "Class FreeLineLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeLineLoad Creates free line load Constructors FreeLineLoad(no, load_case, surfaces, comment, params) Creates free line load Declaration new FreeLineLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free line load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free line load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free line uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free line uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free line uniform load Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free line linear load Declaration function Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free line linear load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free line linear load"
  },
  "api/FreePolygonLoad.html": {
    "href": "api/FreePolygonLoad.html",
    "title": "Class FreePolygonLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreePolygonLoad Creates free polygon load Constructors FreePolygonLoad(no, load_case, surfaces, comment, params) Creates free polygon load Declaration new FreePolygonLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free polygon load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon uniform load Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon linear load Declaration function Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon linear load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon linear load LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon linear in X load Declaration function LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon linear in X load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon linear in X load LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon linear in Y load Declaration function LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon linear in Y load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon linear in Y load"
  },
  "api/FreeRectangularLoad.html": {
    "href": "api/FreeRectangularLoad.html",
    "title": "Class FreeRectangularLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeRectangularLoad Creates free rectangular load Constructors FreeRectangularLoad(no, load_case, surfaces, comment, params) Creates free rectangular load Declaration new FreeRectangularLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free rectangular load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular uniform load LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular linear in X load Declaration function LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular linear in X load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular linear in X load LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular linear in Y load Declaration function LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular linear in Y load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular linear in Y load VaryingZ(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular varying in Z load Declaration function VaryingZ(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular varying in Z load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular varying in Z load VaryingPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular varying along perimeter load Declaration function VaryingPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular varying along perimeter load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular varying along perimeter load VaryingZAndPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular varying in Z and along perimeter load Declaration function VaryingZAndPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular varying in Z and along perimeter load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular varying in Z and along perimeter load"
  },
  "api/GasSolid.html": {
    "href": "api/GasSolid.html",
    "title": "Class GasSolid | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class GasSolid Creates gas solid Constructors GasSolid(no, pressure, temperature, comment, params) Creates gas solid Declaration new GasSolid(no, pressure, temperature, comment, params) Parameters Type Name Description Number no Index of gas solid Number pressure Pressure, can be empty (0.0 by default) Number temperature Temperature, can be undefined String comment Comment, can be undefined Object params Gas solid's parameters, can be undefined Returns Type Description Created gas solid Functions AssignTo(solid_list) Assigns solids to gas solid Declaration function AssignTo(solid_list) Parameters Type Name Description Array solid_list List of solid's indexes"
  },
  "api/ImposedLineDeformation.html": {
    "href": "api/ImposedLineDeformation.html",
    "title": "Class ImposedLineDeformation | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ImposedLineDeformation Creates imposed line deformation Constructors ImposedLineDeformation(no, load_case, lines, comment, params) Creates imposed line deformation Declaration new ImposedLineDeformation(no, load_case, lines, comment, params) Parameters Type Name Description Number no Index of imposed line deformation, can be undefined Object load_case Load case Array lines List of lines indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed line deformation Functions Set(no, load_case, lines, displacement_line_start_x, displacement_line_start_y, displacement_line_start_z, displacement_line_end_x, displacement_line_end_y, displacement_line_end_z, rotation_line_start, rotation_line_end, comment, params) Creates imposed line deformation Declaration function Set(no, load_case, lines, displacement_line_start_x, displacement_line_start_y, displacement_line_start_z, displacement_line_end_x, displacement_line_end_y, displacement_line_end_z, rotation_line_start, rotation_line_end, comment, params) Parameters Type Name Description Number no Index of imposed line deformation, can be undefined Object load_case Load case Array lines List of lines indexes Number displacement_line_start_x Imposed displacement at line start ux,i Number displacement_line_start_y Imposed displacement at line start uy,i, can be undefined Number displacement_line_start_z Imposed displacement at line start uz,i, can be undefined Number displacement_line_end_x Imposed displacement at line end ux,j, can be undefined Number displacement_line_end_y Imposed displacement at line end uy,i, can be undefined Number displacement_line_end_z Imposed displacement at line end uz,i, can be undefined Number rotation_line_start Imposed rotation at line start ϕx,i, can be undefined Number rotation_line_end Imposed rotation at line end ϕx,j, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed nodal deformation"
  },
  "api/ImposedNodalDeformation.html": {
    "href": "api/ImposedNodalDeformation.html",
    "title": "Class ImposedNodalDeformation | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ImposedNodalDeformation Creates imposed nodal deformation Constructors ImposedNodalDeformation(no, load_case, nodes, comment, params) Creates imposed nodal deformation Declaration new ImposedNodalDeformation(no, load_case, nodes, comment, params) Parameters Type Name Description Number no Index of imposed nodal deformation, can be undefined Object load_case Load case Array nodes List of nodes indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed nodal deformation Functions Set(no, load_case, nodes, imposed_displacement_x, imposed_displacement_y, imposed_displacement_z, imposed_rotation_x, imposed_rotation_y, imposed_rotation_z, comment, params) Creates imposed nodal deformation Declaration function Set(no, load_case, nodes, imposed_displacement_x, imposed_displacement_y, imposed_displacement_z, imposed_rotation_x, imposed_rotation_y, imposed_rotation_z, comment, params) Parameters Type Name Description Number no Index of imposed nodal deformation, can be undefined Object load_case Load case Array nodes List of nodes indexes Number imposed_displacement_x Imposed displacement uX' Number imposed_displacement_y Imposed displacement uY', can be undefined Number imposed_displacement_z Imposed displacement uZ', can be undefined Number imposed_rotation_x Imposed rotation ϕX', can be undefined Number imposed_rotation_y Imposed rotation ϕY', can be undefined Number imposed_rotation_z Imposed rotation ϕZ', can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed nodal deformation"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Package Dlubal | Dlubal JavaScript High Level Functions Library",
    "keywords": "Package Dlubal Classes SurfaceStiffnessModification Creates surface stiffness modification SurfaceMeshRefinement Creates surface mesh refinement SurfaceEccentricity Creates surface eccentricity SolidMeshRefinement Creates solid mesh refinement GasSolid Creates gas solid ContactSolid Creates contact solid MemberStiffnessModification Creates member stiffness modification MemberResultIntermediatePoint Creates member result intermediate point MemberNonlinearity Creates member nonlinearity MemberHinge Creates member hinge MemberEccentricity Creates member eccentricity MemberDefinableStiffness Creates member definable stiffness LineMeshRefinement Creates line mesh refinement LineHinge Creates line hinge StructureModification Creates member WindLoadWizard Creates empty wind load wizard SnowLoadWizard Creates empty snow load wizard MemberLoadFromFreeLineLoadWizard Creates member load wizard MemberLoadFromAreaLoadWizard Creates member load wizard SurfaceSetLoad Creates line set load SurfaceLoad Creates surface load SolidSetLoad Creates solid set load SolidLoad Creates solid load OpeningLoad Creates solid load NodalLoad Creates nodal load MemberSetLoad Creates member set load MemberLoad Creates member load LineSetLoad Creates line set load LineLoad Creates line load ImposedNodalDeformation Creates imposed nodal deformation ImposedLineDeformation Creates imposed line deformation FreeRectangularLoad Creates free rectangular load FreePolygonLoad Creates free polygon load FreeLineLoad Creates free line load FreeConcentratedLoad Creates free concentrated load FreeCircularLoad Creates free circular load LoadCase Creates load case DesignSituation Creates design situation object CoordinateSystem Creates coordinate system Thickness Create Thickness SurfaceSet Create Surface Set Surface Creates surface SolidSet Create Solid Set Solid Create Solid Section Create Section Opening Create Opening Node Create Node MemberSet Create Member Set Member Creates member Material Create Material LineSet Line Creates line WindSimulationSettings Class creates WindSimulationSettings object StaticAnalysisSettings Creates static analysis settings high level function StabilityAnalysisSettings StabilityAnalysisSettings is a class that represents a stability analysis settings. SpectralAnalysisSettings Class for setting up the spectral analysis settings. ModalAnalysisSettings Modal analysis settings high level function"
  },
  "api/Line.html": {
    "href": "api/Line.html",
    "title": "Class Line | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Line Creates line Constructors Line(no, nodes, comment, params) Creates line Declaration new Line(no, nodes, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes List of node indexes String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created line Functions Polyline(no, nodes, comment, params) Creates polyline Declaration function Polyline(no, nodes, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes List of node indexes String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created polyline Arc(no, nodes, control_point, arc_parameters, center_of_arc, alpha_adjustement_target, comment, params) Creates arc line Declaration function Arc(no, nodes, control_point, arc_parameters, center_of_arc, alpha_adjustement_target, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes List of node indexes Array control_point Control point of arc Array arc_parameters Arc's parameters, can be undefined (only one of three parameter can be set, when arc parameter is set, other parameters (control point) will be recalculated) Array center_of_arc Center of arc, can be undefined (when center of is set, control point will be recalculated) Number alpha_adjustement_target Subsequent adjustment of α by displacing node at: 1 - Beginning of arc 2 - Arc control point 3 - End of arc String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created arc line Circle(no, center_of_circle, circle_radius, normal_point, comment, params) Creates circle line Declaration function Circle(no, center_of_circle, circle_radius, normal_point, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array center_of_circle Center point of circle Number circle_radius Radius of circle, can be undefined Array normal_point Point of normal ti circle plane, can be undefined String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created circle line EllipticalArc(no, control_point_1, control_point_2, perimeter_point, elliptical_arc_alpha, elliptical_arc_beta, comment, params) Creates elliptical arc line Declaration function EllipticalArc(no, control_point_1, control_point_2, perimeter_point, elliptical_arc_alpha, elliptical_arc_beta, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array control_point_1 First control point Array control_point_2 Second control point Array perimeter_point Third control point - perimeter Number elliptical_arc_alpha Arc angle α, can be undefined Number elliptical_arc_beta Arc angle β, can be undefined String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created elliptical arc line Ellipse(no, nodes, control_point, comment, params) Creates ellipse line Declaration function Ellipse(no, nodes, control_point, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of ellipse Array control_point Control point String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created ellipse line Parabola(no, nodes, control_point, parabola_alpha, comment, params) Creates parabola line Declaration function Parabola(no, nodes, control_point, parabola_alpha, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of parabola Array control_point Control point Number parabola_alpha Parabola's parameter α String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created parabola line Spline(no, nodes, comment, params) Creates spline Declaration function Spline(no, nodes, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of spline String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created spline NURBS(no, nodes, control_points_by_components, nurbs_order, comment, params) Creates NURBS line Declaration function NURBS(no, nodes, control_points_by_components, nurbs_order, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of NURBS Array control_points_by_components Control points Number nurbs_order Nurbs order, can be undefined String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created NURBS line RectangularPolygon(no, center_point, length, width, plane, comment, params) Create rectangular polygon Declaration function RectangularPolygon(no, center_point, length, width, plane, comment, params) Parameters Type Name Description Dlubal.int no Number of the line, can be undefined array center_point Center point by format number length Length number width Width string plane Plane XY, XZ or YZ, can be undefined string comment Comment for the line, can be undefined Object params Parameters of the line, can be undefined Returns Type Description Created rectangular polygon nPolygon(no, control_point, no_edges, radius, rotation_plane, rotation_angle, join, comment, params) Creates nPolygon Declaration function nPolygon(no, control_point, no_edges, radius, rotation_plane, rotation_angle, join, comment, params) Parameters Type Name Description Dlubal.int no Number of the line, can be undefined array control_point Control point by format [x, y, z] number no_edges Number of edges number radius Radius string rotation_plane Rotation plane (x-y, x-z), can be undefined (x-y by default) number rotation_angle Rotation angle string join Join in one \"true\" or in separate lines \"false\" string comment Comment for the line, can be undefined Object params Parameters of the line, can be undefined Returns Type Description Created nPolygon Rotation(rotation_values, rotation_type) Sets line rotation Declaration function Rotation(rotation_values, rotation_type) Parameters Type Name Description Number rotation_values Rotation values depends on rotation type: 1 - [β] 2 - [help_node_index, rotation_plane (\"x-y\"|\"x-z\")] 3 - [rotation_plane (\"x-y\"|\"x-z\")] Number rotation_type Line rotation via: Angle (1), Help node (2), Inside (non-straight line) (3) AssignMember() Sets new default beam member to line Declaration function AssignMember() NodesOnLine(values) Sets nodes on line Declaration function NodesOnLine(values) Parameters Type Name Description Array values Nodes on line values in format [[node_1, reference_1, from_start_1, from_end1_1] ... [node_n, reference_n, from_start_n, from_end_1]] Supports(line_support) Sets line supports Declaration function Supports(line_support) Parameters Type Name Description Number line_support Line supports object id MeshRefinement(line_mesh_refinement) Sets line mesh refinement Declaration function MeshRefinement(line_mesh_refinement) Parameters Type Name Description Array line_mesh_refinement Line mesh refinement object id WeldedJoints(values) Sets line welded joints Declaration function WeldedJoints(values) Parameters Type Name Description Array values Line welded joints values, [[weld1, surface1,1, surface2,1, surface3,1] ... [weldn, surface1n, surface2n, surface3n]]"
  },
  "api/LineHinge.html": {
    "href": "api/LineHinge.html",
    "title": "Class LineHinge | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineHinge Creates line hinge Constructors LineHinge(no, surface, lines, comment, params) Creates line hinge Declaration new LineHinge(no, surface, lines, comment, params) Parameters Type Name Description Number no Index of line hinge, can be undefined undefinedInteger surface Surface id (lines must lie on this surface) undefinedInteger | Array lines One or more lines id for line hinge assign String comment Comment, can be undefined Object params line hinge parameters, can be undefined Returns Type Description Object Created line hinge Functions Translation(ux, uy, uz) Set translation constants ux, uy, uz to line hinge Declaration function Translation(ux, uy, uz) Parameters Type Name Description Boolean | Dlubal.Float ux Translation ux (true, false, number(stiffness [Nm^2])) Boolean | Dlubal.Float uy Translation uy (true, false, number(stiffness [Nm^2])) Boolean | Dlubal.Float uz Translation uz (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent TranslationX(ux) Set translation constant ux to line hinge Declaration function TranslationX(ux) Parameters Type Name Description Boolean | Dlubal.Float ux Translation ux (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent TranslationY(uy) Set translation constant uy to line hinge Declaration function TranslationY(uy) Parameters Type Name Description Boolean | Dlubal.Float uy Translation uy (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent TranslationZ(uz) Set translation constant uz to line hinge Declaration function TranslationZ(uz) Parameters Type Name Description Boolean | Dlubal.Float uz Translation uz (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent Rotation(rx) Set rotation constant rx to line hinge Declaration function Rotation(rx) Parameters Type Name Description Boolean | Dlubal.Float rx Rotation rx (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent AssignTo(surface, lines) Assign line hinge to line and surface (line must be involved in the surface) Declaration function AssignTo(surface, lines) Parameters Type Name Description Dlubal.Integer surface surface id (lines must lie on this surface) Dlubal.Integer | Array lines one or more lines id for line hinge assign WallSlabConnection(surface, or) Assign wall-slab connection to line hinge Declaration function WallSlabConnection(surface, or) Parameters Type Name Description Dlubal.Integer surface surface id (lines must lie on this surface) Dlubal.Integer or {Array} lines one or more lines id for line hinge assign"
  },
  "api/LineLoad.html": {
    "href": "api/LineLoad.html",
    "title": "Class LineLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineLoad Creates line load Constructors LineLoad(no, load_case, lines, comment, params) Creates line load Declaration new LineLoad(no, load_case, lines, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of line indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line load Functions Force(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Creates line force load Declaration function Force(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of lines String load_distribution Load distribution Array load_values Load values depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line force load Moment(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Creates line moment load Declaration function Moment(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of lines String load_distribution Load distribution Array load_values Load values depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line moment load Mass(no, load_case, lines, load_value, comment, params) Creates line mass load Declaration function Mass(no, load_case, lines, load_value, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of lines Number load_value Uniform load value String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line mass load ReferenceToListOfLines(value) Sets option for reference to list of lines Declaration function ReferenceToListOfLines(value) Parameters Type Name Description Boolean value When undefined, true as default ReferDistanceLineEnd(value) Sets option for refer distance to the line end Declaration function ReferDistanceLineEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverLine(value) Sets option for load over total length of line (only for trapezoidal load distribution) Declaration function LoadOverLine(value) Parameters Type Name Description Boolean value When undefined, true as default IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/LineMeshRefinement.html": {
    "href": "api/LineMeshRefinement.html",
    "title": "Class LineMeshRefinement | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineMeshRefinement Creates line mesh refinement Constructors LineMeshRefinement(no, targetFELength, numberOfLayers, lines, comment, params) Creates line mesh refinement Declaration new LineMeshRefinement(no, targetFELength, numberOfLayers, lines, comment, params) Parameters Type Name Description Number no Index of line mesh refinement, can be undefined Number targetFELength Length of FEA element side on the line, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined String comment Comment, can be undefined Object params line mesh refinement parameters, can be undefined Returns Type Description Object Created line mesh refinement HLF Functions TargetFELength(targetFELength, numberOfLayers, lines) Change line mesh refinement to type based on element length Declaration function TargetFELength(targetFELength, numberOfLayers, lines) Parameters Type Name Description Number targetFELength Length of FEA element side on the line, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement NumberFiniteElements(numberOfFiniteElements, numberOfLayers, lines) Change line mesh refinement to type based on number of elements on line Declaration function NumberFiniteElements(numberOfFiniteElements, numberOfLayers, lines) Parameters Type Name Description Number numberOfFiniteElements Number of FEA elements on the line, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement Gradual(gradual_rows, numberOfLayers, lines) Change line mesh refinement to type gradually changed due to distance from the line Declaration function Gradual(gradual_rows, numberOfLayers, lines) Parameters Type Name Description Number gradual_rows Number gradual rows of FEA elements, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement SetLines(gradual_rows, lines) Function for assign lines to line mesh refinement Declaration function SetLines(gradual_rows, lines) Parameters Type Name Description Number gradual_rows Number gradual rows of FEA elements, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement"
  },
  "api/LineSet.html": {
    "href": "api/LineSet.html",
    "title": "Class LineSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineSet Constructors LineSet(no, lines, comment, params) Declaration new LineSet(no, lines, comment, params) Parameters Type Name Description undefinedint no Number of Line Set array lines List of the number of the lines string comment Comment for the Line Set undefineddictionary params Parameters of the Line Set Returns Type Description lineSet Functions ContinuousLines(no, lines, comment, params) Create Continuous Lines lineSet type Declaration function ContinuousLines(no, lines, comment, params) Parameters Type Name Description Dlubal.int no Number of Line Set array lines List of the number of the lines string comment Comment for the Line Set Dlubal.dictionary params Parameters of the Line Set GroupOfLines(no, lines, comment, params) Create Group of Lines Declaration function GroupOfLines(no, lines, comment, params) Parameters Type Name Description Dlubal.int no Number of Line Set array lines List of the number of the lines string comment Comment for the Line Set Dlubal.dictionary params Parameters of the Line Set"
  },
  "api/LineSetLoad.html": {
    "href": "api/LineSetLoad.html",
    "title": "Class LineSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineSetLoad Creates line set load Constructors LineSetLoad(no, load_case, line_sets, comment, params) Creates line set load Declaration new LineSetLoad(no, load_case, line_sets, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set load Functions Force(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Creates line set force load Declaration function Force(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set force load Moment(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Creates line set moment load Declaration function Moment(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set moment load Mass(no, load_case, line_sets, load_value, comment, params) Creates line set mass load Declaration function Mass(no, load_case, line_sets, load_value, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets Number load_value Uniform parameter value String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set mass load ReferDistanceLineSetEnd(value) Sets option for refer distance to the end of line set Declaration function ReferDistanceLineSetEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverLineSet(value) Sets option for load over total length of line set (only for trapezoidal load distribution) Declaration function LoadOverLineSet(value) Parameters Type Name Description Boolean value When undefined, true as default IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/LoadCase.html": {
    "href": "api/LoadCase.html",
    "title": "Class LoadCase | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LoadCase Creates load case Constructors LoadCase(no, name, comment, params) Creates load case Declaration new LoadCase(no, name, comment, params) Parameters Type Name Description undefined* no undefined* name undefined* comment undefined* params Returns Type Description Object of LoadCase Functions StaticAnalysis(no, name, staticAnalysisSettingsNo, ActionCategory, selfWeighParams, stabilityAnalysisSettingsNo, comment, params) Declaration function StaticAnalysis(no, name, staticAnalysisSettingsNo, ActionCategory, selfWeighParams, stabilityAnalysisSettingsNo, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* staticAnalysisSettingsNo Dlubal.* ActionCategory Dlubal.* selfWeighParams Dlubal.* stabilityAnalysisSettingsNo Dlubal.* comment Dlubal.* params Returns Type Description Object of LoadCase ModalAnalysis(no, name, modalAnalysisSettingsNo, importMassesFrom, selfWeighParams, comment, params) Declaration function ModalAnalysis(no, name, modalAnalysisSettingsNo, importMassesFrom, selfWeighParams, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* modalAnalysisSettingsNo Dlubal.* importMassesFrom Dlubal.* selfWeighParams Dlubal.* comment Dlubal.* params Returns Type Description Object of LoadCase ResponseSpectrumAnalysis(no, name, responseSpectrumAnalysisSettingsNo, importModalAnalysisFrom, responseSpectrums, comment, params) Declaration function ResponseSpectrumAnalysis(no, name, responseSpectrumAnalysisSettingsNo, importModalAnalysisFrom, responseSpectrums, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* responseSpectrumAnalysisSettingsNo Dlubal.* importModalAnalysisFrom Dlubal.* responseSpectrums Dlubal.* comment Dlubal.* params Returns Type Description Object of LoadCase ConsiderImperfection(imperfectionCaseNo) Declaration function ConsiderImperfection(imperfectionCaseNo) Parameters Type Name Description Dlubal.* imperfectionCaseNo SetStructureModification(structureModificationNo) Declaration function SetStructureModification(structureModificationNo) Parameters Type Name Description Dlubal.* structureModificationNo GetActionCategoryList() Declaration function GetActionCategoryList() Returns Type Description List of action categories"
  },
  "api/Material.html": {
    "href": "api/Material.html",
    "title": "Class Material | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Material Create Material Constructors Material(no, name, comment, params) Create Material Declaration new Material(no, name, comment, params) Parameters Type Name Description undefinedint no Number of Material string name Name of Material string comment Comment for the Material undefineddictionary params Parameters of the Material Returns Type Description material"
  },
  "api/Member.html": {
    "href": "api/Member.html",
    "title": "Class Member | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Member Creates member Constructors Member(no, nodes_or_line, comment, params) Creates member Declaration new Member(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined undefinedArray/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Functions Beam(no, nodes_or_line, section_start, comment, params) Creates beam member Declaration function Beam(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Rigid(no, nodes_or_line, comment, params) Creates rigid member Declaration function Rigid(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Truss(no, nodes_or_line, section_start, comment, params) Creates truss member Declaration function Truss(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member TrussOnlyN(no, nodes_or_line, section_start, comment, params) Creates truss (only N) member Declaration function TrussOnlyN(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Tension(no, nodes_or_line, section_start, comment, params) Creates tension member Declaration function Tension(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Compression(no, nodes_or_line, section_start, comment, params) Creates compression member Declaration function Compression(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Buckling(no, nodes_or_line, section_start, comment, params) Creates buckling member Declaration function Buckling(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Cable(no, nodes_or_line, section_start, comment, params) Creates cable member Declaration function Cable(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member ResultBeam(no, nodes_or_line, section_start, result_beam_integrate_stresses_and_forces, result_beam_parameters, included_objects, excluded_objects, comment, params) Create result beam member Declaration function ResultBeam(no, nodes_or_line, section_start, result_beam_integrate_stresses_and_forces, result_beam_parameters, included_objects, excluded_objects, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String result_beam_integrate_stresses_and_forces Stresses and forces type, can be undefined: INTEGRATE_WITHIN_CUBOID_QUADRATIC INTEGRATE_WITHIN_CUBOID_GENERAL INTEGRATE_WITHIN_CYLINDER INTEGRATE_FROM_LISTED_OBJECT Array result_beam_parameters Result beam parameters, can be undefined 1 - [Yz] 2 - [Y+, Y-, Z+, Z-] 3 - [R] 4 - undefined Array included_objects Included surfaces, members and solids, can be undefined ([true, [1, 2], true]: true = all objects, array of indexes = only specified objects) Array excluded_objects Excluded surfaces, members and solids, can be undefined ([undefined, [1, 2], undefined]: array of indexes = only specified objects) String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member DefinableStiffness(no, nodes_or_line, definable_stiffness, comment, params) Create definable stiffness member Declaration function DefinableStiffness(no, nodes_or_line, definable_stiffness, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number definable_stiffness Definable stiffness String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created definable stiffness member CouplingRigidRigid(no, nodes_or_line, comment, params) Create coupling rigid-rigid member Declaration function CouplingRigidRigid(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling rigid-rigid member CouplingRigidHinge(no, nodes_or_line, comment, params) Create coupling rigid-hinge member Declaration function CouplingRigidHinge(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling rigid-hinge member CouplingHingeRigid(no, nodes_or_line, comment, params) Create coupling hinge-rigid member Declaration function CouplingHingeRigid(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling hinge-rigid member CouplingHingeHinge(no, nodes_or_line, comment, params) Create coupling hinge-hinge member Declaration function CouplingHingeHinge(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling hinge-hinge member Rib(nodes_or_line, no, section_start, rib_alignment, surface_assignment_autodetect, align_axes, flange_dimensions, surfaces, comment, params) Declaration function Rib(nodes_or_line, no, section_start, rib_alignment, surface_assignment_autodetect, align_axes, flange_dimensions, surfaces, comment, params) Parameters Type Name Description Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number no Index of member, can be undefined Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String rib_alignment Alignment of rib - \"ALIGNMENT_ON_Z_SIDE_NEGATIVE\",\"ALIGNMENT_CENTRIC\",\"ALIGNMENT_ON_Z_SIDE_POSITIVE\",\"ALIGNMENT_USER_DEFINED_VIA_MEMBER_ECCENTRICITY\" Boolean surface_assignment_autodetect Boolean align_axes Array flange_dimensions two dimensional array each row could have form [end_ordinate,reference_length_definition_type,reference_length_width,width_minus_y_maximal,width_plus_y_maximal,reference_length,width_minus_y_integrative,width_plus_y_integrative] Array surfaces String comment Object params Returns Type Description object Rib NodesOnMember(values) Sets nodes on member Declaration function NodesOnMember(values) Parameters Type Name Description Array values Nodes on member values in format [[node_1, reference_1, from_start_1, from_end1_1] ... [node_n, reference_n, from_start_n, from_end_1]] Hinges(member_start_hinge, member_end_hinge) Sets member start and/or member end hinges Declaration function Hinges(member_start_hinge, member_end_hinge) Parameters Type Name Description Number member_start_hinge Member hinge object id at member start, can be undefined Number member_end_hinge Member hinge object id at member end, can be undefined Eccentricities(member_start_eccentricity, member_end_eccentricity) Sets member start and/or member end eccentricities Declaration function Eccentricities(member_start_eccentricity, member_end_eccentricity) Parameters Type Name Description Number member_start_eccentricity Member eccentricity object id at member start, can be undefined Number member_end_eccentricity Member eccentricity object id at member end, can be undefined Supports(member_support) Sets member supports Declaration function Supports(member_support) Parameters Type Name Description Number member_support Member supports object id Nonlinearity(member_nonlinearity) Sets member nonlinearity Declaration function Nonlinearity(member_nonlinearity) Parameters Type Name Description Number member_nonlinearity Member nonlinearity object id ResultIntermediatePoints(member_result_intermediate_point) Declaration function ResultIntermediatePoints(member_result_intermediate_point) Parameters Type Name Description Number member_result_intermediate_point member result intermediate point object id EndModifications(member_start, member_end) Sets member start and/or member end extensions Declaration function EndModifications(member_start, member_end) Parameters Type Name Description Array member_start Member start values, can be undefined ([Δi, αi,y, αi,z]) Array member_end Member end values, can be undefined ([Δj, αj,y, αj,z]) SectionDistributionUniform() Sets uniform section distribution Declaration function SectionDistributionUniform() SectionDistributionLinear(section_start, section_end, section_alignment) Sets linear distribution Declaration function SectionDistributionLinear(section_start, section_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String section_alignment section_alignment Section alignment (Top, Centric, Bottom), can be undefined (centric as default) SectionDistributionTaperedAtBothSides(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_distance_from_end, section_alignment) Sets tapered at both sides distribution Declaration function SectionDistributionTaperedAtBothSides(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_distance_from_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_internal Number of section at internal point of member (between start and end) Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_start Member distance ([distance, is_relative]), can be undefined Array section_distance_from_end Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionTaperedAtStart(section_start, section_end, reference_type, section_distance_from_start, section_alignment) Sets tapered at start distribution Declaration function SectionDistributionTaperedAtStart(section_start, section_end, reference_type, section_distance_from_start, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_start Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionTaperedAtEnd(section_start, section_end, reference_type, section_distance_from_end, section_alignment) Sets tapered at end distribution Declaration function SectionDistributionTaperedAtEnd(section_start, section_end, reference_type, section_distance_from_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_end Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionSaddle(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_alignment) Sets saddle distribution Declaration function SectionDistributionSaddle(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_internal Number of section at internal point of member (between start and end) Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_start Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionOffsetAtBothSides(section_start, section_internal, section_end, reference_type, section_offset_from_start, section_offset_from_end, section_alignment) Sets offset at both sides distribution Declaration function SectionDistributionOffsetAtBothSides(section_start, section_internal, section_end, reference_type, section_offset_from_start, section_offset_from_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_internal Number of section at internal point of member (between start and end) Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_offset_from_start Member offset ([distance, is_relative]), can be undefined Array section_offset_from_end Member offset ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionOffsetAtStart(section_start, section_end, reference_type, section_offset_from_start, section_alignment) Sets offset at start distribution Declaration function SectionDistributionOffsetAtStart(section_start, section_end, reference_type, section_offset_from_start, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_offset_from_start Member offset ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionOffsetAtEnd(reference_type, section_offset_from_end, section_alignment) Sets offset at end distribution Declaration function SectionDistributionOffsetAtEnd(reference_type, section_offset_from_end, section_alignment) Parameters Type Name Description String reference_type Reference type (L, XY, XZ), can be undefined Array section_offset_from_end Member offset ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default)"
  },
  "api/MemberDefinableStiffness.html": {
    "href": "api/MemberDefinableStiffness.html",
    "title": "Class MemberDefinableStiffness | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberDefinableStiffness Creates member definable stiffness Constructors MemberDefinableStiffness(no, member_list, comment, params) Creates member definable stiffness Declaration new MemberDefinableStiffness(no, member_list, comment, params) Parameters Type Name Description Number no Index of member definable stiffness, can be undefined Array member_list Assigned members, can be undefined String comment Comment, can be undefined Object params Member definable stiffness parameters, can be undefined Returns Type Description Object Created member definable stiffness Functions TorsionalAndBendingStiffness(torsional_stiffness, bending_stiffness_y, bending_stiffness_z) Sets torsional and bending stiffness parameters Declaration function TorsionalAndBendingStiffness(torsional_stiffness, bending_stiffness_y, bending_stiffness_z) Parameters Type Name Description Number torsional_stiffness Torsional stiffness Number bending_stiffness_y Bending stiffness Y Number bending_stiffness_z Bending stiffness Z AxialAndShearStiffness(axial_stiffness, shear_stiffness_y, shear_stiffness_z) Sets axial and shear stiffness parameters Declaration function AxialAndShearStiffness(axial_stiffness, shear_stiffness_y, shear_stiffness_z) Parameters Type Name Description Number axial_stiffness Axial stiffness Number shear_stiffness_y Shear stiffness Y Number shear_stiffness_z Shear stiffness Z SelfWeight(specific_weight, section_area) Sets self weight stiffness parameters Declaration function SelfWeight(specific_weight, section_area) Parameters Type Name Description Number specific_weight Specific weight Number section_area Section area MainAxesRotation(rotation) Sets main axes rotation parameter Declaration function MainAxesRotation(rotation) Parameters Type Name Description Number rotation Rotation ThermalExpansionCoefficient(thermal_expansion, width, height) Sets coefficient of thermal expansion stiffness parameters Declaration function ThermalExpansionCoefficient(thermal_expansion, width, height) Parameters Type Name Description Number thermal_expansion Thermal expansion Number width Width Number height Height"
  },
  "api/MemberEccentricity.html": {
    "href": "api/MemberEccentricity.html",
    "title": "Class MemberEccentricity | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberEccentricity Creates member eccentricity Constructors MemberEccentricity(no, members_start_list, members_end_list, comment, params) Creates member eccentricity Declaration new MemberEccentricity(no, members_start_list, members_end_list, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Members start, can be undefined Array members_end_list Members end, can be undefined String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity Functions RelativeToSection(no, members_start_list, members_end_list, alignment, comment, params) Creates member eccentricity relative to section Declaration function RelativeToSection(no, members_start_list, members_end_list, alignment, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Member start Array members_end_list Member end String alignment Alignment, for more info look at private function setRelativeValues String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity Absolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, comment, params) Creates absolute member eccentricity Declaration function Absolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Members start Array members_end_list Members end Number offset_x Eccentricity in X Number offset_y Eccentricity in Y Number offset_z Eccentricity in Z Number coordinate_system Coordinate system, can be undefined. Default value is \"Local xyz\". String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity RelativeAndAbsolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, alignment, comment, params) Creates absolute member eccentricity Declaration function RelativeAndAbsolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, alignment, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Members start Array members_end_list Members end Number offset_x Eccentricity in X Number offset_y Eccentricity in Y Number offset_z Eccentricity in Z Number coordinate_system Coordinate system, can be undefined. Default value is \"Local xyz\". String alignment Alignment, for more info look at private function setRelativeValues String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity AxialOffset(active) Sets axial offset from adjoining member Declaration function AxialOffset(active) Parameters Type Name Description Boolean active True if undefined HingeLocationAtNode(active) Sets hinge location at node (if applied) Declaration function HingeLocationAtNode(active) Parameters Type Name Description Boolean active True if undefined TransverseOffsetMember(reference_member, reference_node, alignment) Transverse offset from section of another member Declaration function TransverseOffsetMember(reference_member, reference_node, alignment) Parameters Type Name Description Number reference_member Reference member Number reference_node Reference member's node, can be undefined String alignment Alignment, for more info look at private function setTransverseOffset TransverseOffsetSurface(reference_surface, alignment) Transverse offset from section of another thickness of other surface Declaration function TransverseOffsetSurface(reference_surface, alignment) Parameters Type Name Description Number reference_surface Reference surface String alignment Alignment, for more info look at private function setTransverseOffset TransverseOffsetNone() Set off transverse offset Declaration function TransverseOffsetNone()"
  },
  "api/MemberHinge.html": {
    "href": "api/MemberHinge.html",
    "title": "Class MemberHinge | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberHinge Creates member hinge Constructors MemberHinge(no, members_start_list, members_end_list, comment, params) Creates member hinge Declaration new MemberHinge(no, members_start_list, members_end_list, comment, params) Parameters Type Name Description Number no Index of member hinge, can be undefined Array members_start_list Member start, can be undefined Array members_end_list Member end, can be undefined String comment Comment, can be undefined Object params Member hinge parameters, can be undefined Returns Type Description Object Created member hinge Functions Translational(no, members_start_list, members_end_list, axial_release_n, axial_release_vy, axial_release_vz, comment, params) Creates member hinge with specified axis release Declaration function Translational(no, members_start_list, members_end_list, axial_release_n, axial_release_vy, axial_release_vz, comment, params) Parameters Type Name Description Number no Index of member hinge, can be undefined Array members_start_list Member start, can be undefined Array members_end_list Member end, can be undefined Array axial_release_n Axis release for ux, for more information look at comment in private setMainHingeValues function Array axial_release_vy Axis release for uy, for more information look at comment in private setMainHingeValues function Array axial_release_vz Axis release for uz, for more information look at comment in private setMainHingeValues function String comment Comment, can be undefined Object params Member hinge parameters, can be undefined Returns Type Description Object Created member hinge Rotational(no, members_start_list, members_end_list, moment_release_mt, moment_release_my, moment_release_mz, comment, params) Creates member hinge with specified moment release Declaration function Rotational(no, members_start_list, members_end_list, moment_release_mt, moment_release_my, moment_release_mz, comment, params) Parameters Type Name Description Number no Index of member hinge, can be undefined Array members_start_list Member start, can be undefined Array members_end_list Member end, can be undefined Array moment_release_mt Moment release for φx, for more information look at comment in private setMainHingeValues function Array moment_release_my Moment release for φy, for more information look at comment in private setMainHingeValues function Array moment_release_mz Moment release for φz, for more information look at comment in private setMainHingeValues function String comment Comment, can be undefined Object params Member hinge parameters, can be undefined Returns Type Description Object Created member hinge PartialActivityTranslationalX(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity translation x nonlinearity Declaration function PartialActivityTranslationalX(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityTranslationalY(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity translation y nonlinearity Declaration function PartialActivityTranslationalY(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityTranslationalZ(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity translation z nonlinearity Declaration function PartialActivityTranslationalZ(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityRotationalX(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity rotational x nonlinearity Declaration function PartialActivityRotationalX(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityRotationalY(negative_zone_values, positive_zone) Sets negative and/or positive zone to partial activity rotational y nonlinearity Declaration function PartialActivityRotationalY(negative_zone_values, positive_zone) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityRotationalZ(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity rotational z nonlinearity Declaration function PartialActivityRotationalZ(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) DiagramTranslationalX(diagram_values) Sets translational diagram values for ux Declaration function DiagramTranslationalX(diagram_values) Parameters Type Name Description Array diagram_values [[ux1, N1, Cux1], [ux2, N2, Cux2] ... [uxn, Nn, Cuxn]] DiagramTranslationalY(diagram_values) Sets translational diagram values for uy Declaration function DiagramTranslationalY(diagram_values) Parameters Type Name Description Array diagram_values [[uy1, N1, Cuy1], [uy2, N2, Cuy2] ... [uyn, Nn, Cuyn]] DiagramTranslationalZ(diagram_values) Sets translational diagram values for uz Declaration function DiagramTranslationalZ(diagram_values) Parameters Type Name Description Array diagram_values [[uz1, N1, Cuz1], [uz2, N2, Cuz2] ... [uzn, Nn, Cuzn]] DiagramRotationalX(diagram_values) Sets rotational diagram values for φx Declaration function DiagramRotationalX(diagram_values) Parameters Type Name Description Array diagram_values [[φx1, N1, Cφx1], [φx2, N2, Cφx2] ... [φxn, Nn, Cφxn]] DiagramRotationalY(diagram_values) Sets rotational diagram values for φy Declaration function DiagramRotationalY(diagram_values) Parameters Type Name Description Array diagram_values [[φy1, N1, Cφy1], [φy2, N2, Cφy2] ... [φyn, Nn, Cφyn]] DiagramRotationalZ(diagram_values) Sets rotational diagram values for φz Declaration function DiagramRotationalZ(diagram_values) Parameters Type Name Description Array diagram_values [[φz1, N1, Cφz1], [φz2, N2, Cφz2] ... [φzn, Nn, Cφzn]] FrictionVyTranslationalX(friction_coefficient_x, spring_constant_x) Sets translational friction Vy values for ux Declaration function FrictionVyTranslationalX(friction_coefficient_x, spring_constant_x) Parameters Type Name Description Number friction_coefficient_x Friction coefficient X Number spring_constant_x Spring constant X FrictionVzTranslationalX(friction_coefficient_x, spring_constant_x) Sets translational friction Vz values for ux Declaration function FrictionVzTranslationalX(friction_coefficient_x, spring_constant_x) Parameters Type Name Description Number friction_coefficient_x Friction coefficient X Number spring_constant_x Spring constant X FrictionVyVzTranslationalX(friction_coefficient_x, spring_constant_x) Sets translational friction VyVz values for ux Declaration function FrictionVyVzTranslationalX(friction_coefficient_x, spring_constant_x) Parameters Type Name Description Number friction_coefficient_x Friction coefficient X Number spring_constant_x Spring constant X FrictionVyPlusVzTranslationalX(friction_coefficient_xy, friction_coefficient_xz, spring_constant_x) Sets translational friction Vy+Vz values for ux Declaration function FrictionVyPlusVzTranslationalX(friction_coefficient_xy, friction_coefficient_xz, spring_constant_x) Parameters Type Name Description Number friction_coefficient_xy Friction coefficient XY Number friction_coefficient_xz Friction coefficient XZ Number spring_constant_x Spring constant X FrictionNTranslationalY(friction_coefficient_y, spring_constant_y) Sets translational friction N values for uy Declaration function FrictionNTranslationalY(friction_coefficient_y, spring_constant_y) Parameters Type Name Description Number friction_coefficient_y Friction coefficient Y Number spring_constant_y Spring constant Y FrictionVzTranslationalY(friction_coefficient_y, spring_constant_y) Sets translational friction Vz values for uy Declaration function FrictionVzTranslationalY(friction_coefficient_y, spring_constant_y) Parameters Type Name Description Number friction_coefficient_y Friction coefficient Y Number spring_constant_y Spring constant Y FrictionNVzTranslationalY(friction_coefficient_y, spring_constant_y) Sets translational friction NVz values for uy Declaration function FrictionNVzTranslationalY(friction_coefficient_y, spring_constant_y) Parameters Type Name Description Number friction_coefficient_y Friction coefficient Y Number spring_constant_y Spring constant Y FrictionNPlusVzTranslationalY(friction_coefficient_yx, friction_coefficient_yz, spring_constant_y) Sets translational friction N+Vz values for uy Declaration function FrictionNPlusVzTranslationalY(friction_coefficient_yx, friction_coefficient_yz, spring_constant_y) Parameters Type Name Description Number friction_coefficient_yx Friction coefficient YX Number friction_coefficient_yz Friction coefficient YZ Number spring_constant_y Spring constant Y FrictionNTranslationalZ(friction_coefficient_z, spring_constant_z) Sets translational friction N values for uz Declaration function FrictionNTranslationalZ(friction_coefficient_z, spring_constant_z) Parameters Type Name Description Number friction_coefficient_z Friction coefficient Z Number spring_constant_z Spring constant Z FrictionVyTranslationalZ(friction_coefficient_z, spring_constant_z) Sets translational friction Vy values for uz Declaration function FrictionVyTranslationalZ(friction_coefficient_z, spring_constant_z) Parameters Type Name Description Number friction_coefficient_z Friction coefficient Z Number spring_constant_z Spring constant Z FrictionNVyTranslationalZ(friction_coefficient_z, spring_constant_z) Sets translational friction NVy values for uz Declaration function FrictionNVyTranslationalZ(friction_coefficient_z, spring_constant_z) Parameters Type Name Description Number friction_coefficient_z Friction coefficient Z Number spring_constant_z Spring constant Z FrictionNPlusVyTranslationalZ(friction_coefficient_zx, friction_coefficient_zy, spring_constant_z) Sets translational friction N+Vy values for uz Declaration function FrictionNPlusVyTranslationalZ(friction_coefficient_zx, friction_coefficient_zy, spring_constant_z) Parameters Type Name Description Number friction_coefficient_zx Friction coefficient ZX Number friction_coefficient_zy Friction coefficient ZY Number spring_constant_z Spring constant Z"
  },
  "api/MemberLoad.html": {
    "href": "api/MemberLoad.html",
    "title": "Class MemberLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberLoad Creates member load Constructors MemberLoad(no, load_case, members, comment, params) Creates member load Declaration new MemberLoad(no, load_case, members, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member load Functions Force(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member force load Declaration function Force(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member force load Moment(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member moment load Declaration function Moment(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member moment load Mass(no, load_case, members, load_value, comment, params) Creates member mass load Declaration function Mass(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member mass load Temperature(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member temperature load Declaration function Temperature(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member temperature load TemperatureChange(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member temperature change load Declaration function TemperatureChange(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member temperature change load AxialStrain(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member axial strain load Declaration function AxialStrain(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member axial strain load AxialDisplacement(no, load_case, members, load_value, comment, params) Creates member axial displacement load Declaration function AxialDisplacement(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member axial displacement load Precamber(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member precamber load Declaration function Precamber(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member precamber load InitialPrestress(no, load_case, members, load_value, comment, params) Creates member initial prestress load Declaration function InitialPrestress(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member initial prestress load Displacement(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member displacement load Declaration function Displacement(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member displacement load Rotation(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member rotation load Declaration function Rotation(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member rotation load PipeContentFull(no, load_case, members, load_value, load_direction, comment, params) Creates member content full load Declaration function PipeContentFull(no, load_case, members, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member pipe content full load PipeContentPartial(no, load_case, members, load_values, load_direction, comment, params) Creates member pipe content partial load Declaration function PipeContentPartial(no, load_case, members, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Array load_values Load parameters for Uniform distribution String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member pipe content partial load PipeInternalPressure(no, load_case, members, load_value, comment, params) Creates member pipe internal pressure load Declaration function PipeInternalPressure(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member pipe internal pressure load RotaryMotion(no, load_case, members, load_values, comment, params) Creates member rotary motion load Declaration function RotaryMotion(no, load_case, members, load_values, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member rotary motion load ReferenceToListOfMembers(value) Sets option for reference to list of members Declaration function ReferenceToListOfMembers(value) Parameters Type Name Description Boolean value When undefined, true as default ReferDistanceMemberEnd(value) Sets option for refer distance to the member end Declaration function ReferDistanceMemberEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverMember(value) Sets option for load over total length of member (only for trapezoidal load distribution) Declaration function LoadOverMember(value) Parameters Type Name Description Boolean value When undefined, true as default Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Sets eccentricity (only force load) Declaration function Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Parameters Type Name Description String reference_to Eccentricity is refereed to what (\"left_top\", \"center_top\", \"right_top\", \"left_center\", \"center_center\", \"right_center\", \"left_bottom\", \"center_bottom\", \"right_bottom\", \"center_of_gravity\", \"shear_center\") Number offset_member_start_ey Offset at member start, can be undefined Number offset_member_start_ez Offset at member start, can be undefined Number offset_member_end_ey Offset at member end, can be undefined Number offset_member_end_ez Offset at member end, can be undefined IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/MemberLoadFromAreaLoadWizard.html": {
    "href": "api/MemberLoadFromAreaLoadWizard.html",
    "title": "Class MemberLoadFromAreaLoadWizard | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberLoadFromAreaLoadWizard Creates member load wizard Constructors MemberLoadFromAreaLoadWizard(no, load_case, comment, params) Creates member load wizard Declaration new MemberLoadFromAreaLoadWizard(no, load_case, comment, params) Parameters Type Name Description Number no Member load wizard index, can be undefined Object load_case Load case String comment Comment, can be undefined Object params Additional parameters, can be undefined Functions Uniform(no, load_case, uniform_magnitude, coordinate_system, load_direction, comment, params) Creates uniform member load wizard Declaration function Uniform(no, load_case, uniform_magnitude, coordinate_system, load_direction, comment, params) Parameters Type Name Description Number no Member load wizard index, can be undefined Object load_case Load case Number uniform_magnitude Uniform load magnitude Number coordinate_system Index of coordinate system, can be undefined (Global XYZ as default) String load_direction Load direction, can be undefined (ZA as default) String comment Comment, can be undefined Object params Additional parameters Linear(no, load_case, magnitude_1, node_1, magnitude_2, node_2, magnitude_3, node_3, coordinate_system, load_direction, comment, params) Creates linear member load wizard Declaration function Linear(no, load_case, magnitude_1, node_1, magnitude_2, node_2, magnitude_3, node_3, coordinate_system, load_direction, comment, params) Parameters Type Name Description Number no Member load wizard index, can be undefined Object load_case Load case Number magnitude_1 First area load magnitude Number node_1 Index of first node Number magnitude_2 Second area load magnitude Number node_2 Index of second node Number magnitude_3 Third area load magnitude Number node_3 Index of third node Number coordinate_system Index of coordinate system, can be undefined (Global XYZ as default) String load_direction Load direction, can be undefined (ZA as default) String comment Comment, can be undefined Object params Additional parameters VaryingInX(no, load_case, load_distribution_values, coordinate_system, load_direction, comment, params) Creates varying in X member load wizard Declaration function VaryingInX(no, load_case, load_distribution_values, coordinate_system, load_direction, comment, params) Parameters Type Name Description Number no Index of member load wizard Object load_case Load case Array load_distribution_values Load distribution values ([Y1, ΔY1, p1, ... Yn, ΔYn, pn]) Number coordinate_system Index of coordinate system, can be undefined (Global XYZ as default) String load_direction Load direction, can be undefined (ZA as default) String comment Comment, can be undefined Object params Additional parameters VaryingInY(no, load_case, load_distribution_values, coordinate_system, load_direction, comment, params) Creates varying in Y member load wizard Declaration function VaryingInY(no, load_case, load_distribution_values, coordinate_system, load_direction, comment, params) Parameters Type Name Description Number no Index of member load wizard Object load_case Load case Array load_distribution_values Load distribution values ([Y1, ΔY1, p1, ... Yn, ΔYn, pn]) Number coordinate_system Index of coordinate system, can be undefined (Global XYZ as default) String load_direction Load direction, can be undefined (ZA as default) String comment Comment, can be undefined Object params Additional parameters VaryingInZ(no, load_case, load_distribution_values, coordinate_system, load_direction, comment, params) Creates varying in Z member load wizard Declaration function VaryingInZ(no, load_case, load_distribution_values, coordinate_system, load_direction, comment, params) Parameters Type Name Description Number no Index of member load wizard Object load_case Load case Array load_distribution_values Load distribution values ([Y1, ΔY1, p1, ... Yn, ΔYn, pn]) Number coordinate_system Index of coordinate system, can be undefined (Global XYZ as default) String load_direction Load direction, can be undefined (ZA as default) String comment Comment, can be undefined Object params Additional parameters SetCornerNodes(corner_nodes) Sets corner nodes for member load from area load wizard Declaration function SetCornerNodes(corner_nodes) Parameters Type Name Description Array corner_nodes Corner nodes ([\"1,2,3\", \"4-8\", ...]) SetExcludedMembers(excluded_members, excluded_parallel_members) Sets excluded members for member load from area load wizard Declaration function SetExcludedMembers(excluded_members, excluded_parallel_members) Parameters Type Name Description Array excluded_members Single members Array excluded_parallel_members Members parallel to member LockForNewMembers(lock_for_new_members) Sets lock for new members Declaration function LockForNewMembers(lock_for_new_members) Parameters Type Name Description Boolean lock_for_new_members Lock for new members, can be undefined (true as default) SmoothConcentratedLoad(smooth_punctual_load_enabled) Sets smooth concentrated load Declaration function SmoothConcentratedLoad(smooth_punctual_load_enabled) Parameters Type Name Description Boolean smooth_punctual_load_enabled Smooth concentrated load enabled, can be undefined (true as default) ConsiderMemberEccentricity(consider_member_eccentricity) Sets consider member eccentricity Declaration function ConsiderMemberEccentricity(consider_member_eccentricity) Parameters Type Name Description Boolean consider_member_eccentricity Consider member eccentricity, can be undefined (true as default) ConsiderSectionDistribution(consider_section_distribution) Sets consider section distribution Declaration function ConsiderSectionDistribution(consider_section_distribution) Parameters Type Name Description Boolean consider_section_distribution Consider section distribution, can be undefined (true as default) AbsoluteToleranceForMembersOnPlane(absolute_tolerance) Sets absolute tolerance for member on plane Declaration function AbsoluteToleranceForMembersOnPlane(absolute_tolerance) Parameters Type Name Description Number absolute_tolerance Absolute tolerance by distance, can be undefined (0.0005 as default) RelativeToleranceForMembersOnPlane(relative_tolerance) Sets relative tolerance for member on plane Declaration function RelativeToleranceForMembersOnPlane(relative_tolerance) Parameters Type Name Description Number relative_tolerance Relative tolerance by angle, can be undefined (1.0 by default) AbsoluteToleranceForNodesOnLine(absolute_tolerance) Sets absolute tolerance for nodes on line Declaration function AbsoluteToleranceForNodesOnLine(absolute_tolerance) Parameters Type Name Description Number absolute_tolerance Absolute tolerance by distance, can be undefined (0.0005 as default) RelativeToleranceForNodesOnLine(relative_tolerance) Sets relative tolerance for nodes on line Declaration function RelativeToleranceForNodesOnLine(relative_tolerance) Parameters Type Name Description Number relative_tolerance Relative tolerance by angle, can be undefined (1.0 by default)"
  },
  "api/MemberLoadFromFreeLineLoadWizard.html": {
    "href": "api/MemberLoadFromFreeLineLoadWizard.html",
    "title": "Class MemberLoadFromFreeLineLoadWizard | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberLoadFromFreeLineLoadWizard Creates member load wizard Constructors MemberLoadFromFreeLineLoadWizard(no, load_case, comment, params) Creates member load wizard Declaration new MemberLoadFromFreeLineLoadWizard(no, load_case, comment, params) Parameters Type Name Description Number no Member load wizard index, can be undefined Object load_case Load case String comment Comment, can be undefined Object params Additional parameters, can be undefined Functions Uniform(no, load_case, uniform_magnitude, node_1, node_2, coordinate_system, load_direction, comment, params) Creates uniform member load wizard Declaration function Uniform(no, load_case, uniform_magnitude, node_1, node_2, coordinate_system, load_direction, comment, params) Parameters Type Name Description Number no Member load wizard index, can be undefined Object load_case Load case Number uniform_magnitude Uniform load magnitude Number node_1 Index of first node Number node_2 Index of second node Number coordinate_system Index of coordinate system, can be undefined (Global XYZ as default) String load_direction Load direction, can be undefined (ZA as default) String comment Comment, can be undefined Object params Additional parameters, can be undefined Linear(no, load_case, magnitude_1, node_1, magnitude_2, node_2, coordinate_system, load_direction, comment, params) Creates linear member load wizard Declaration function Linear(no, load_case, magnitude_1, node_1, magnitude_2, node_2, coordinate_system, load_direction, comment, params) Parameters Type Name Description Number no Member load wizard index, can be undefined Object load_case Load case Number magnitude_1 First area load magnitude Number node_1 Index of first node Number magnitude_2 Second area load magnitude Number node_2 Index of second node Number coordinate_system Index of coordinate system, can be undefined (Global XYZ as default) String load_direction Load direction, can be undefined (ZA as default) String comment Comment, can be undefined Object params Additional parameters, can be undefined AbsoluteToleranceForMembersOnPlane(absolute_tolerance) Sets absolute tolerance for member on plane Declaration function AbsoluteToleranceForMembersOnPlane(absolute_tolerance) Parameters Type Name Description Number absolute_tolerance Absolute tolerance by distance, can be undefined (0.0005 as default) RelativeToleranceForMembersOnPlane(relative_tolerance) Sets relative tolerance for member on plane Declaration function RelativeToleranceForMembersOnPlane(relative_tolerance) Parameters Type Name Description Number relative_tolerance Relative tolerance by angle, can be undefined (1.0 by default) AbsoluteToleranceForNodesOnLine(absolute_tolerance) Sets absolute tolerance for nodes on line Declaration function AbsoluteToleranceForNodesOnLine(absolute_tolerance) Parameters Type Name Description Number absolute_tolerance Absolute tolerance by distance, can be undefined (0.0005 as default) RelativeToleranceForNodesOnLine(relative_tolerance) Sets relative tolerance for nodes on line Declaration function RelativeToleranceForNodesOnLine(relative_tolerance) Parameters Type Name Description Number relative_tolerance Relative tolerance by angle, can be undefined (1.0 by default) ExcludedMembers(excluded_members, excluded_parallel_members) Sets excluded members Declaration function ExcludedMembers(excluded_members, excluded_parallel_members) Parameters Type Name Description Array excluded_members List of excluded member indexes, can be undefined Array excluded_parallel_members List of excluded parallel members, can be undefined LockForNewMembers(lock_for_new_members) Sets lock for new members Declaration function LockForNewMembers(lock_for_new_members) Parameters Type Name Description Boolean lock_for_new_members Lock for new members, can be undefined (true as default) ConsiderMemberEccentricity(consider_member_eccentricity) Sets consider member eccentricity Declaration function ConsiderMemberEccentricity(consider_member_eccentricity) Parameters Type Name Description Boolean consider_member_eccentricity Consider member eccentricity, can be undefined (true as default) ConsiderSectionDistribution(consider_section_distribution) Sets consider section distribution Declaration function ConsiderSectionDistribution(consider_section_distribution) Parameters Type Name Description Boolean consider_section_distribution Consider section distribution, can be undefined (true as default)"
  },
  "api/MemberNonlinearity.html": {
    "href": "api/MemberNonlinearity.html",
    "title": "Class MemberNonlinearity | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberNonlinearity Creates member nonlinearity Constructors MemberNonlinearity(no, comment, params) Creates member nonlinearity Declaration new MemberNonlinearity(no, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Functions FailureIfTension(no, members, comment, params) Creates member failure if tension nonlinearity Declaration function FailureIfTension(no, members, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity FailureIfCompression(no, members, comment, params) Creates member failure if compression nonlinearity Declaration function FailureIfCompression(no, members, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity FailureIfTensionWithSlippage(no, members, slippage, comment, params) Creates member failure if tension with slippage nonlinearity Declaration function FailureIfTensionWithSlippage(no, members, slippage, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number slippage Slippage String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity FailureIfCompressionWithSlippage(no, members, slippage, comment, params) Creates member failure if compression with slippage nonlinearity Declaration function FailureIfCompressionWithSlippage(no, members, slippage, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number slippage Slippage String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Slippage(no, members, slippage, comment, params) Creates member slippage nonlinearity Declaration function Slippage(no, members, slippage, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number slippage Slippage String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity TearingUnderTension(no, members, tension_force, comment, params) Creates member tearing under tension nonlinearity Declaration function TearingUnderTension(no, members, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity YieldingUnderTension(no, members, tension_force, comment, params) Creates member yielding under tension nonlinearity Declaration function YieldingUnderTension(no, members, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity TearingUnderCompression(no, members, compression_force, comment, params) Creates member tearing under compression nonlinearity Declaration function TearingUnderCompression(no, members, compression_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity YieldingUnderCompression(no, members, compression_force, comment, params) Creates member yielding under compression nonlinearity Declaration function YieldingUnderCompression(no, members, compression_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Tearing(no, members, compression_force, tension_force, comment, params) Creates member tearing nonlinearity Declaration function Tearing(no, members, compression_force, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Yielding(no, members, compression_force, tension_force, comment, params) Creates member yielding nonlinearity Declaration function Yielding(no, members, compression_force, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity"
  },
  "api/MemberResultIntermediatePoint.html": {
    "href": "api/MemberResultIntermediatePoint.html",
    "title": "Class MemberResultIntermediatePoint | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberResultIntermediatePoint Creates member result intermediate point Constructors MemberResultIntermediatePoint(no, members, comment, params) Creates member result intermediate point Declaration new MemberResultIntermediatePoint(no, members, comment, params) Parameters Type Name Description Number no Index of member definable stiffness, can be undefined Array members Assigned members, can be undefined String comment Comment, can be undefined Object params Member result intermediate point parameters, can be undefined Returns Type Description Object Created member result intermediate point Functions UniformDistances(divisions_count, notes) Sets number of points Declaration function UniformDistances(divisions_count, notes) Parameters Type Name Description Number divisions_count Number of division ordinates Array notes Notes to each point, can be undefined DivisionOrdinates(division_ordinates, notes, absolute, clear_ordinates) Sets division ordinates Declaration function DivisionOrdinates(division_ordinates, notes, absolute, clear_ordinates) Parameters Type Name Description Array division_ordinates Division ordinates Array notes Division ordinates notes, can be undefined Boolean absolute Distances are absolute or relative can be undefined (default value is absolute) Boolean clear_ordinates Clears default ordinates, can be undefined (default value is true)"
  },
  "api/MemberSet.html": {
    "href": "api/MemberSet.html",
    "title": "Class MemberSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberSet Create Member Set Constructors MemberSet(no, members, comment, params) Create Member Set Declaration new MemberSet(no, members, comment, params) Parameters Type Name Description undefinedint no Number of Member Set array members List of the number of the members string comment Comment for the Member Set undefineddictionary params Parameters of the Member Set Returns Type Description memberSet Functions ContinuousMembers(no, members, comment, params) Create Continuous Member memberSet type Declaration function ContinuousMembers(no, members, comment, params) Parameters Type Name Description Dlubal.int no Number of Member Set array members List of the number of the members string comment Comment for the Member Set Dlubal.dictionary params Parameters of the Member Set GroupOfMembers(no, members, comment, params) Create Group of Member memberSet type Declaration function GroupOfMembers(no, members, comment, params) Parameters Type Name Description Dlubal.int no Number of Member Set array members List of the number of the members string comment Comment for the Member Set Dlubal.dictionary params Parameters of the Member Set"
  },
  "api/MemberSetLoad.html": {
    "href": "api/MemberSetLoad.html",
    "title": "Class MemberSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberSetLoad Creates member set load Constructors MemberSetLoad(no, load_case, member_sets, comment, params) Creates member set load Declaration new MemberSetLoad(no, load_case, member_sets, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set load Functions Force(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set force load Declaration function Force(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set force load Moment(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set moment load Declaration function Moment(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set moment load Mass(no, load_case, member_sets, load_value, comment, params) Creates member set mass load Declaration function Mass(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set mass load Temperature(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set temperature load Declaration function Temperature(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set temperature load TemperatureChange(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set temperature change load Declaration function TemperatureChange(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set temperature change load AxialStrain(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set axial strain load Declaration function AxialStrain(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set axial strain load AxialDisplacement(no, load_case, member_sets, load_value, comment, params) Creates member set axial displacement load Declaration function AxialDisplacement(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set axial displacement load Precamber(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set precamber load Declaration function Precamber(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set precamber load InitialPrestress(no, load_case, member_sets, load_value, comment, params) Creates member set initial prestress load Declaration function InitialPrestress(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set initial prestress load Displacement(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set displacement load Declaration function Displacement(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set displacement load Rotation(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set rotation load Declaration function Rotation(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set rotation load PipeContentFull(no, load_case, member_sets, load_value, load_direction, comment, params) Creates member set content full load Declaration function PipeContentFull(no, load_case, member_sets, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes Number load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set pipe content full load PipeContentPartial(no, load_case, member_sets, load_values, load_direction, comment, params) Creates member set pipe content partial load Declaration function PipeContentPartial(no, load_case, member_sets, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Array load_values Load parameters for Uniform distribution String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set pipe content partial load PipeInternalPressure(no, load_case, member_sets, load_value, comment, params) Creates member set pipe internal pressure load Declaration function PipeInternalPressure(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set pipe internal pressure load RotaryMotion(no, load_case, member_sets, load_values, comment, params) Creates member set rotary motion load Declaration function RotaryMotion(no, load_case, member_sets, load_values, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Number load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set rotary motion load ReferDistanceMemberSetEnd(value) Sets option for refer distance to the member set end Declaration function ReferDistanceMemberSetEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverMember(value) Sets option for load over total length of member set (only for trapezoidal load distribution) Declaration function LoadOverMember(value) Parameters Type Name Description Boolean value When undefined, true as default Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Sets eccentricity (only force load) Declaration function Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Parameters Type Name Description String reference_to Eccentricity is refereed to what (\"left_top\", \"center_top\", \"right_top\", \"left_center\", \"center_center\", \"right_center\", \"left_bottom\", \"center_bottom\", \"right_bottom\", \"center_of_gravity\", \"shear_center\") Number offset_member_start_ey Offset at member start, can be undefined Number offset_member_start_ez Offset at member start, can be undefined Number offset_member_end_ey Offset at member end, can be undefined Number offset_member_end_ez Offset at member end, can be undefined IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/MemberStiffnessModification.html": {
    "href": "api/MemberStiffnessModification.html",
    "title": "Class MemberStiffnessModification | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberStiffnessModification Creates member stiffness modification Constructors MemberStiffnessModification(no, structure_modifications, comment, params) Creates member stiffness modification Declaration new MemberStiffnessModification(no, structure_modifications, comment, params) Parameters Type Name Description Number no Index of member stiffness modification, can be undefined Array structure_modifications Assigned structure modifications, can be undefined String comment Comment, can be undefined Object params Member stiffness modification parameters, can be undefined Returns Type Description Object Created member stiffness modification Functions TotalStiffnessFactor(total_stiffness) Sets total stiffness factor Declaration function TotalStiffnessFactor(total_stiffness) Parameters Type Name Description Number total_stiffness Total stiffness PartialStiffnessFactors(axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness, weight) Sets partial stiffness factors Declaration function PartialStiffnessFactors(axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness, weight) Parameters Type Name Description Number axial_stiffness Axial stiffness, can be undefined Number bending_stiffness_y Bending stiffness Y, can be undefined Number bending_stiffness_z Bending stiffness Z, can be undefined Number shear_stiffness_y Shear stiffness Y, can be undefined Number shear_stiffness_z Shear stiffness Z, can be undefined Number torsional_stiffness Torsional stiffness, can be undefined Number weight Weight, can be undefined ConcreteStructuresAci(component_type) Sets concrete structure ACI Declaration function ConcreteStructuresAci(component_type) Parameters Type Name Description Number component_type Component type: Columns (1), Walls uncracked (2), Walls cracked (3), Beams (4), Flat plates and flat stabs (5). Can be undefined ConcreteStructuresCsa(component_type) Sets concrete structure CSA Declaration function ConcreteStructuresCsa(component_type) Parameters Type Name Description Number component_type Component type: Columns (1), Walls uncracked (2), Walls cracked (3), Beams (4), Flat plates and flat stabs (5). Can be undefined SteelStructuresAisc(determine_tau_b, design_method) Sets steel structures AISC Declaration function SteelStructuresAisc(determine_tau_b, design_method) Parameters Type Name Description Number determine_tau_b Determine τb: Iterative (1), Set to 1 (2). Can be undefined. Number design_method Design method: LRFD (1), ASD (2). Can be undefined. If determine τb has \"Set to 1\" value, must be undefined. SteelStructuresCSA(determine_tau_b, axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness) , Sets steel structures CSA Declaration function SteelStructuresCSA(determine_tau_b, axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness) Parameters Type Name Description Number determine_tau_b Determine τb: Iterative (1), Set to 1 (2). Can be undefined. Number axial_stiffness Axial stiffness multiplier factor, can be undefined. If defined, apply τb is set to true. Number bending_stiffness_y Bending stiffness multiplier factors Z, can be undefined. If defined, apply τb is set to true. Number bending_stiffness_z Bending stiffness multiplier factors Y, can be undefined. If defined, apply τb is set to true. Number shear_stiffness_y Shear stiffness Y, can be undefined. If defined, apply τb is set to true. Number shear_stiffness_z Shear stiffness Z, can be undefined. If defined, apply τb is set to true. Number torsional_stiffness Torsional stiffness, can be undefined. If defined, apply τb is set to true."
  },
  "api/NodalLoad.html": {
    "href": "api/NodalLoad.html",
    "title": "Class NodalLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class NodalLoad Creates nodal load Constructors NodalLoad(no, load_case, nodes, comment, params) Creates nodal load Declaration new NodalLoad(no, load_case, nodes, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created nodal load Functions Force(no, load_case, nodes, force, load_direction, comment, params) Creates nodal force load Declaration function Force(no, load_case, nodes, force, load_direction, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Number force Load force value String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created nodal force load Moment(no, load_case, nodes, moment, load_direction, comment, params) Creates nodal moment load Declaration function Moment(no, load_case, nodes, moment, load_direction, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Number moment Load moment value String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created nodal moment load Components(no, load_case, nodes, forces, moments, comment, params) Creates nodal moment load Declaration function Components(no, load_case, nodes, forces, moments, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Array forces List of forces [FX, FX, FY] Array moments List of moments [MX, MY, MZ] String comment Comment, van be undefined Object params Load parameters, can be undefined Returns Type Description Object Create nodal components load Mass(no, load_case, nodes, mass, comment, params) Creates nodal moment load Declaration function Mass(no, load_case, nodes, mass, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Number mass Load mass value String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Create nodal mass load SpecificDirection(type, values) Adds specific direction to load Declaration function SpecificDirection(type, values) Parameters Type Name Description Number type Specific direction type, can be one of: - 1 (Rotated view 3 angles) - 2 (Directed to node) - 3 (Parallel to two nodes) - 4 (Parallel to CS of line) - 4 (Parallel to CS of line) - 5 (Parallel to CS of member) Array values List of values for specified direction: - [αX',αY',αZ',sequence] (for 1), example: [0.1,0.2,0.1,\"X'Y'Z'\"], sequence can be empty by default - [node_index] (for 2) - [node1_index, node2_index] (for 3) - [line_no] (for 4) - [member_no] (for 5) ForceEccentricity(eccentricity_x, eccentricity_y, eccentricity_z) Adds eccentricity to load Declaration function ForceEccentricity(eccentricity_x, eccentricity_y, eccentricity_z) Parameters Type Name Description Number eccentricity_x Eccentricity eX Number eccentricity_y Eccentricity eY Number eccentricity_z Eccentricity eZ ShiftedDisplay(offset, distance) Adds shifted display to load Declaration function ShiftedDisplay(offset, distance) Parameters Type Name Description Array offset Offset [ΔX,ΔY,ΔZ], example [0.1,0.2,0] Number distance Distance Δ IndividualMassComponents(mass, distance) Adds individual mass components to load Declaration function IndividualMassComponents(mass, distance) Parameters Type Name Description Array mass mass [MX,MY,MZ], example [0.1,0.2,0] Number distance mass_moment_of_inertia [IX,IY,IZ], example [0.1,0.2,0] -"
  },
  "api/Node.html": {
    "href": "api/Node.html",
    "title": "Class Node | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Node Create Node Constructors Node(no, coordinate_X, coordinate_Y, coordinate_Z, comment, params) Create Node Declaration new Node(no, coordinate_X, coordinate_Y, coordinate_Z, comment, params) Parameters Type Name Description undefinedint no Number of Node number coordinate_X Coordinate X number coordinate_Y Coordinate Y number coordinate_Z Coordinate Z string comment Comment for the Node undefineddictionary params Parameters of the Node Returns Type Description node Functions Standard(no, coordinate_system, coordinate_system_type, comment, params) Create Standard node Declaration function Standard(no, coordinate_system, coordinate_system_type, comment, params) Parameters Type Name Description Dlubal.int no Number of Node array coordinate_system Coordinate of node in format [x, y, z] string coordinate_system_type Type of Coordinate System string comment Comment for the Node Dlubal.dictionary params Parameters of the Node BetweenTwoNodes(no, start_node_no, end_node_no, node_reference, parameters, offset_y, offset_z, comment, params) Create Node between two nodes Declaration function BetweenTwoNodes(no, start_node_no, end_node_no, node_reference, parameters, offset_y, offset_z, comment, params) Parameters Type Name Description Dlubal.int no Number of Node Dlubal.int start_node_no Number of start node Dlubal.int end_node_no Number of end node string node_reference Node Reference array parameters List of parameters of node number offset_y Offset in Y direction number offset_z Offset in Z direction string comment Comment for the Node Dlubal.dictionary params Parameters of the Node BetweenTwoPoints(no, start_point, end_point, node_reference, parameters, offset_y, offset_z, comment, params) Create Node between two points Declaration function BetweenTwoPoints(no, start_point, end_point, node_reference, parameters, offset_y, offset_z, comment, params) Parameters Type Name Description Dlubal.int no Number of Node array start_point Coordinate of start point in format [x, y, z] array end_point Coordinate of end point in format [x, y, z] string node_reference Node Reference array parameters List of parameters of node number offset_y Offset in Y direction number offset_z Offset in Z direction string comment Comment for the Node Dlubal.dictionary params Parameters of the Node OnLine(no, line_number, node_reference, parameters, comment, params) Create Node On Line Declaration function OnLine(no, line_number, node_reference, parameters, comment, params) Parameters Type Name Description Dlubal.int no Number of the Node Dlubal.int line_number Number of the Line string node_reference Node Reference array parameters List of parameters of node string comment Comment for the Node Dlubal.dictionary params Parameters of the Node OnMember(no, member_number, node_reference, parameters, comment, params) Create Node on Member Declaration function OnMember(no, member_number, node_reference, parameters, comment, params) Parameters Type Name Description Dlubal.int no Number of the Node Dlubal.int member_number Number of member string node_reference Node Reference array parameters List of parameters of node string comment Comment for the Node Dlubal.dictionary params Parameters of the Node"
  },
  "api/Opening.html": {
    "href": "api/Opening.html",
    "title": "Class Opening | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Opening Create Opening Constructors Opening(no, boundary_lines, comment, params) Create Opening Declaration new Opening(no, boundary_lines, comment, params) Parameters Type Name Description undefinedint no Number of Opening array boundary_lines Boundary lines of the Opening string comment Comment for the Opening undefineddictionary params Parameters of the Opening Returns Type Description opening"
  },
  "api/OpeningLoad.html": {
    "href": "api/OpeningLoad.html",
    "title": "Class OpeningLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class OpeningLoad Creates solid load Constructors OpeningLoad(no, load_case, openings, comment, params) Creates solid load Declaration new OpeningLoad(no, load_case, openings, comment, params) Parameters Type Name Description Number no Index of opening load, can be undefined Object load_case Load case Array openings List of opening indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created opening load Functions Force(no, load_case, openings, load_distribution, load_values, load_direction, comment, params) Creates opening force load Declaration function Force(no, load_case, openings, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of opening load, can be undefined Object load_case Load case Array openings List of openings indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created opening force load SmoothConcentratedLoad(value,) Set smooth concentrated load Declaration function SmoothConcentratedLoad(value,) Parameters Type Name Description Boolean value, can be undefined (false)"
  },
  "api/Section.html": {
    "href": "api/Section.html",
    "title": "Class Section | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Section Create Section Constructors Section(no, name, material, comment, params) Create Section Declaration new Section(no, name, material, comment, params) Parameters Type Name Description undefinedint no Number of the Section string name Name of the Section undefinedint material Number of the material string comment Comment for the Opening undefineddictionary params Parameters of the Opening Returns Type Description section"
  },
  "api/SnowLoadWizard.html": {
    "href": "api/SnowLoadWizard.html",
    "title": "Class SnowLoadWizard | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SnowLoadWizard Creates empty snow load wizard Constructors SnowLoadWizard(no, comment, params) Creates empty snow load wizard Declaration new SnowLoadWizard(no, comment, params) Parameters Type Name Description Number no Snow load wizard index, can be undefined String comment Comment, can be undefined Object params Additional parameters, can be undefined Functions SetMonoPitchRoofType(no, roof_corner_nodes, load_case, comment, params) Creates flat/monopitch snow load wizard Declaration function SetMonoPitchRoofType(no, roof_corner_nodes, load_case, comment, params) Parameters Type Name Description Number no Snow load wizard index, can be undefined Array roof_corner_nodes Roofs corner nodes indexes Object load_case Load case String comment Comment, can be undefined Object params Additional parameters, can be undefined SetDuopitch(no, roof_corner_nodes, load_case_1, load_case_2, load_case_3, comment, params) Creates duopitch snow load wizard Declaration function SetDuopitch(no, roof_corner_nodes, load_case_1, load_case_2, load_case_3, comment, params) Parameters Type Name Description Number no Snow load wizard index, can be undefined Array roof_corner_nodes Roofs corner nodes indexes Object load_case_1 Load case (Case i) Object load_case_2 Load case (Case ii) Object load_case_3 Load case (Case iii) String comment Comment, can be undefined Object params Additional parameters, can be undefined SetLoadedRoofs(loaded_planes_accessibility) Sets loaded roofs Declaration function SetLoadedRoofs(loaded_planes_accessibility) Parameters Type Name Description Array loaded_planes_accessibility Enable or disable loaded roofs (array of booleans [roof1 | roof1, roof2]) WithoutLoadsOnMembers(objects_without_loads, objects_without_loads_parallel_to) Generated on members Declaration function WithoutLoadsOnMembers(objects_without_loads, objects_without_loads_parallel_to) Parameters Type Name Description Array objects_without_loads Without load on members, can be undefined Array objects_without_loads_parallel_to Without load parallel to members, can be undefined WithoutLoadsOnSurfaces(objects_without_loads, objects_without_loads_parallel_to) Generated on surfaces Declaration function WithoutLoadsOnSurfaces(objects_without_loads, objects_without_loads_parallel_to) Parameters Type Name Description Array objects_without_loads Without load on surfaces, can be undefined Array objects_without_loads_parallel_to Without load parallel to surfaces, can be undefined WithoutLoadsOnLines(objects_without_loads, objects_without_loads_parallel_to) Generated on lines Declaration function WithoutLoadsOnLines(objects_without_loads, objects_without_loads_parallel_to) Parameters Type Name Description Array objects_without_loads Without load on lines, can be undefined Array objects_without_loads_parallel_to Without load parallel to lines, can be undefined SnowOverhang(enabled) Sets snow overhang Declaration function SnowOverhang(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default SnowGuard(enabled) Sets snow guard Declaration function SnowGuard(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default LockForNewObjects(enabled) Sets lock for new members Declaration function LockForNewObjects(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default ConsiderMemberEccentricity(enabled) Sets consider member eccentricity Declaration function ConsiderMemberEccentricity(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default ConsiderSectionDistribution(enabled) Sets consider section distribution Declaration function ConsiderSectionDistribution(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default"
  },
  "api/Solid.html": {
    "href": "api/Solid.html",
    "title": "Class Solid | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Solid Create Solid Constructors Solid(no, boundary_surfaces, material, comment, params) Create Solid Declaration new Solid(no, boundary_surfaces, material, comment, params) Parameters Type Name Description undefinedint no Number of Solid array boundary_surfaces List of boundary surfaces undefinedint material Number of material string comment Comment for the Solid undefineddictionary params Parameters of the Solid Returns Type Description Solid Functions Standard(no, boundary_surfaces, material, comment, params) Create Standard Solid Declaration function Standard(no, boundary_surfaces, material, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid array boundary_surfaces List of boundary surfaces Dlubal.int material Number of material string comment Comment for the Solid Dlubal.dictionary params Parameters of the Solid Gas(no, boundary_surfaces, material, gasssolid_no, comment, params) Create Gas Declaration function Gas(no, boundary_surfaces, material, gasssolid_no, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid array boundary_surfaces List of boundary surfaces Dlubal.int material Number of material Dlubal.int gasssolid_no Gass solid index string comment Comment for the Solid Dlubal.dictionary params Parameters of the Solid Contact(no, boundary_surfaces, material, contact_solid_no, first_contact_surface, comment, params) Create Contact solid Declaration function Contact(no, boundary_surfaces, material, contact_solid_no, first_contact_surface, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid array boundary_surfaces List of boundary surfaces Dlubal.int material Number of material Dlubal.int contact_solid_no Contact solid index Dlubal.int first_contact_surface Number of first contact surface string comment Comment for the Solid Dlubal.dictionary params Parameters of the Solid"
  },
  "api/SolidLoad.html": {
    "href": "api/SolidLoad.html",
    "title": "Class SolidLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidLoad Creates solid load Constructors SolidLoad(no, load_case, solids, comment, params) Creates solid load Declaration new SolidLoad(no, load_case, solids, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid load Functions Force(no, load_case, solids, load_value, load_direction, comment, params) Creates solid force load Declaration function Force(no, load_case, solids, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid force load Temperature(no, load_case, solids, load_distribution, load_values, comment, params) Creates solid temperature load Declaration function Temperature(no, load_case, solids, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid temperature load Strain(no, load_case, solids, load_distribution, load_values, comment, params) Creates solid strain load Declaration function Strain(no, load_case, solids, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid strain load Buoyancy(no, load_case, solids, load_value, load_direction, comment, params) Creates solid buoyancy load Declaration function Buoyancy(no, load_case, solids, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid buoyancy load RotaryMotion(no, load_case, solids, load_values, comment, params) Creates solid rotary motion load Declaration function RotaryMotion(no, load_case, solids, load_values, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid rotary motion load AirDensity(altitude) Determine air density at specified altitude Declaration function AirDensity(altitude) Parameters Type Name Description Number altitude Altitude value, if undefined, determine air density at specified altitude will be set false"
  },
  "api/SolidMeshRefinement.html": {
    "href": "api/SolidMeshRefinement.html",
    "title": "Class SolidMeshRefinement | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidMeshRefinement Creates solid mesh refinement Constructors SolidMeshRefinement(no, solid_list, comment, params) Creates solid mesh refinement Declaration new SolidMeshRefinement(no, solid_list, comment, params) Parameters Type Name Description Number no Index of solid mesh refinement, can be undefined Array solid_list List of solid indexes String comment Comment, can be undefined Object params Solid mesh refinement's parameters, can be undefined Returns Type Description Created solid mesh refinement Functions TargetLength(no, solid_list, target_length, comment, params) Creates solid mesh refinement Declaration function TargetLength(no, solid_list, target_length, comment, params) Parameters Type Name Description Number no Index of solid mesh refinement, can be undefined Array solid_list List of solid indexes Number target_length Target FE length String comment Comment, can be undefined Object params Solid mesh refinement's parameters, can be undefined"
  },
  "api/SolidSet.html": {
    "href": "api/SolidSet.html",
    "title": "Class SolidSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidSet Create Solid Set Constructors SolidSet(no, solids_no, solid_set_type, comment, params) Create Solid Set Declaration new SolidSet(no, solids_no, solid_set_type, comment, params) Parameters Type Name Description undefinedint no Number of Solid Set array solids_no List of solids string solid_set_type Type of the Solid Set string comment Comment for the Solid Set undefineddictionary params Parameters of the Solid Set Returns Type Description Solid Set Functions ContinuousSolids(no, solids_no, comment, params) Create Continuous Solids solidSet type Declaration function ContinuousSolids(no, solids_no, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid Set array solids_no List of solids string comment Comment for the Solid Set Dlubal.dictionary params Parameters of the Solid Set GroupOfSolids(no, solids_no, comment, params) Create Group of Solids Declaration function GroupOfSolids(no, solids_no, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid Set array solids_no List of solids string comment Comment for the Solid Set Dlubal.dictionary params Parameters of the Solid Set"
  },
  "api/SolidSetLoad.html": {
    "href": "api/SolidSetLoad.html",
    "title": "Class SolidSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidSetLoad Creates solid set load Constructors SolidSetLoad(no, load_case, solid_sets, comment, params) Creates solid set load Declaration new SolidSetLoad(no, load_case, solid_sets, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set load Functions Force(no, load_case, solid_sets, load_value, load_direction, comment, params) Creates solid set force load Declaration function Force(no, load_case, solid_sets, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set force load Temperature(no, load_case, solid_sets, load_distribution, load_values, comment, params) Creates solid set temperature load Declaration function Temperature(no, load_case, solid_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set temperature load Strain(no, load_case, solid_sets, load_distribution, load_values, comment, params) Creates solid set strain load Declaration function Strain(no, load_case, solid_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set strain load Buoyancy(no, load_case, solid_sets, load_value, load_direction, comment, params) Creates solid set buoyancy load Declaration function Buoyancy(no, load_case, solid_sets, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set buoyancy load RotaryMotion(no, load_case, solid_sets, load_values, comment, params) Creates solid set rotary motion load Declaration function RotaryMotion(no, load_case, solid_sets, load_values, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set rotary motion load AirDensity(altitude) Determine air density at specified altitude Declaration function AirDensity(altitude) Parameters Type Name Description Number altitude Altitude value, if undefined, determine air density at specified altitude will be set false"
  },
  "api/SpectralAnalysisSettings.html": {
    "href": "api/SpectralAnalysisSettings.html",
    "title": "Class SpectralAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SpectralAnalysisSettings Class for setting up the spectral analysis settings. Constructors SpectralAnalysisSettings(no, name, combinationRulePeriodic, combinationRuleDirectional, scaledSumDirectionalComponentValue, useEquivalentLinearCombination, signedResultsUsingDominantMode, saveResultsOfAllSelectedModes, comment, params) Constructor creates basic spectral analysis settings Declaration new SpectralAnalysisSettings(no, name, combinationRulePeriodic, combinationRuleDirectional, scaledSumDirectionalComponentValue, useEquivalentLinearCombination, signedResultsUsingDominantMode, saveResultsOfAllSelectedModes, comment, params) Parameters Type Name Description undefined* no undefined* name undefined* combinationRulePeriodic undefined* combinationRuleDirectional undefined* scaledSumDirectionalComponentValue undefined* useEquivalentLinearCombination undefined* signedResultsUsingDominantMode undefined* saveResultsOfAllSelectedModes undefined* comment undefined* params Functions GetNo() Declaration function GetNo() Returns Type Description No"
  },
  "api/StabilityAnalysisSettings.html": {
    "href": "api/StabilityAnalysisSettings.html",
    "title": "Class StabilityAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class StabilityAnalysisSettings StabilityAnalysisSettings is a class that represents a stability analysis settings. Constructors StabilityAnalysisSettings(no, isEigenvalueSolver, isIncremental, eigenvalueMethod, numberOfLowestEigenvalues, comment, params) Constructor creates a new object of type StabilityAnalysisSettings Declaration new StabilityAnalysisSettings(no, isEigenvalueSolver, isIncremental, eigenvalueMethod, numberOfLowestEigenvalues, comment, params) Parameters Type Name Description undefined* no undefined* isEigenvalueSolver undefined* isIncremental undefined* eigenvalueMethod undefined* numberOfLowestEigenvalues undefined* comment undefined* params Returns Type Description object Stability Analysis Settings"
  },
  "api/StaticAnalysisSettings.html": {
    "href": "api/StaticAnalysisSettings.html",
    "title": "Class StaticAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class StaticAnalysisSettings Creates static analysis settings high level function Constructors StaticAnalysisSettings(no, analysisType, equationSolver, nonlinearMethod, comment, params) Creates static analysis settings high level function Declaration new StaticAnalysisSettings(no, analysisType, equationSolver, nonlinearMethod, comment, params) Parameters Type Name Description undefinedInteger no unique ID of SAS String analysisType Analysis setting type (\"GEOMETRICALLY_LINEAR\", \"SECOND_ORDER_P_DELTA\", \"LARGE_DEFORMATIONS\") String equationSolver Equation solver (\"METHOD_OF_EQUATION_SYSTEM_DIRECT\", \"METHOD_OF_EQUATION_SYSTEM_ITERATIVE\") String nonlinearMethod Nonlinear method (\"NEWTON_RAPHSON\", \"NEWTON_RAPHSON_COMBINED_WITH_PICARD\", \"PICARD\", \"NEWTON_RAPHSON_WITH_POSTCRITICAL_ANALYSIS\", \"NEWTON_RAPHSON_WITH_CONSTANT_STIFFNESS\", \"DYNAMIC_RELAXATION\" ) String comment Comment, empty by default Object params Static analysis settings parameters, empty by default Returns Type Description Static Analysis object Functions GeometricallyLinear(no, name, equationSolver, plateBendingTheory, activeMass, modifyLoading, comment, params) Declaration function GeometricallyLinear(no, name, equationSolver, plateBendingTheory, activeMass, modifyLoading, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* equationSolver Dlubal.* plateBendingTheory Dlubal.* activeMass Dlubal.* modifyLoading Dlubal.* comment Dlubal.* params Returns Type Description Object Static Analysis Settings SecondOrder(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, plateBendingTheory, activeMass, modifyLoading, comment, params) Declaration function SecondOrder(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, plateBendingTheory, activeMass, modifyLoading, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* equationSolver Dlubal.* nonlinearMethod Dlubal.* maxNumberOfIterations Dlubal.* numberOfLoadIncrements Dlubal.* plateBendingTheory Dlubal.* activeMass Dlubal.* modifyLoading Dlubal.* comment Dlubal.* params Returns Type Description Object Static Analysis Settings LargeDeformations(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, percentageOfIterations, plateBendingTheory, activeMass, modifyLoading, comment, params) Declaration function LargeDeformations(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, percentageOfIterations, plateBendingTheory, activeMass, modifyLoading, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* equationSolver Dlubal.* nonlinearMethod Dlubal.* maxNumberOfIterations Dlubal.* numberOfLoadIncrements Dlubal.* percentageOfIterations Dlubal.* plateBendingTheory Dlubal.* activeMass Dlubal.* modifyLoading Dlubal.* comment Dlubal.* params Returns Type Description Object Static Analysis Settings"
  },
  "api/StructureModification.html": {
    "href": "api/StructureModification.html",
    "title": "Class StructureModification | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class StructureModification Creates member Constructors StructureModification(no, comment, params) Creates member Declaration new StructureModification(no, comment, params) Parameters Type Name Description Number no Index of structure modification, can be undefined String comment Comment, can be undefined Object params Structure modification's parameters, can be undefined Returns Type Description Created structure modification Functions Material(material_name, modification_type, factor_for_e_and_g, comment) Modification of material Declaration function Material(material_name, modification_type, factor_for_e_and_g, comment) Parameters Type Name Description String material_name Name of material String modification_type Type of modification (\"Multiplier factor\", \"Division factor\"), can be undefined (Multiplier factor as default) Number factor_for_e_and_g Factor for E and G, can be undefined (1.00 by default) String comment Comment, can be undefined Section(section_name, sectional_areas_factor_a, sectional_areas_factor_a_y, sectional_areas_factor_a_z, moment_of_inertia_factor_j, moment_of_inertia_favor_i_y, moment_of_inertia_favor_i_z) Modification of section Declaration function Section(section_name, sectional_areas_factor_a, sectional_areas_factor_a_y, sectional_areas_factor_a_z, moment_of_inertia_factor_j, moment_of_inertia_favor_i_y, moment_of_inertia_favor_i_z) Parameters Type Name Description String section_name Name of section Number sectional_areas_factor_a Sectional areas factor A, can be undefined (1.00 by default) Number sectional_areas_factor_a_y Sectional areas factor Ay, can be undefined (1.00 by default) Number sectional_areas_factor_a_z Sectional areas factor Az, can be undefined (1.00 by default) Number moment_of_inertia_factor_j Moment of inertia factor J, can be undefined (1.00 by default) Number moment_of_inertia_favor_i_y Moment of inertia factor Iy, can be undefined (1.00 by default) Number moment_of_inertia_favor_i_z Moment of inertia factor Iz, can be undefined (1.00 by default) Members(member_stiffness_modification, members, comment) Modification of members Declaration function Members(member_stiffness_modification, members, comment) Parameters Type Name Description Object member_stiffness_modification Member stiffness modification index Array members List of members indexes String comment Comment, can be undefined, can be undefined Surfaces(surface_stiffness_modification, surfaces, comment) Modification of surfaces Declaration function Surfaces(surface_stiffness_modification, surfaces, comment) Parameters Type Name Description Object surface_stiffness_modification Surface stiffness modification index Array surfaces List of surfaces indexes String comment Comment, can be undefined MemberHinges(member_no, member_side, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, rotational_factor_phi_x, rotational_factor_phi_y, rotational_factor_phi_z) Modification of member hinges Declaration function MemberHinges(member_no, member_side, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, rotational_factor_phi_x, rotational_factor_phi_y, rotational_factor_phi_z) Parameters Type Name Description Number member_no Member index String member_side Member hinge side (start, end) Number translational_factor_u_x Translational spring constant Cu,x, can be undefined (1.00 by default) Number translational_factor_u_y Translational spring constant Cu,y, can be undefined (1.00 by default) Number translational_factor_u_z Translational spring constant Cu,z, can be undefined (1.00 by default) Number rotational_factor_phi_x Rotational spring constant Cφ,x, can be undefined (1.00 by default) Number rotational_factor_phi_y Rotational spring constant Cφ,y, can be undefined (1.00 by default) Number rotational_factor_phi_z Rotational spring constant Cφ,z, can be undefined (1.00 by default) LineHinges(surface_no, line_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, rotational_factor_phi_x) MOdification for line hinges Declaration function LineHinges(surface_no, line_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, rotational_factor_phi_x) Parameters Type Name Description Number surface_no Surface index Number line_no Line index Number translational_factor_u_x Translational factor Cu,x, can be undefined (1.00 by default) Number translational_factor_u_y Translational factor Cu,y, can be undefined (1.00 by default) Number translational_factor_u_z Translational factor Cu,z, can be undefined (1.00 by default) Number rotational_factor_phi_x Rotational factor Cφ,x, can be undefined (1.00 by default) NodalSupports(node_no, support_factor_ux, support_factor_uy, support_factor_uz, restraint_factor_phi_x, restraint_factor_phi_y, restraint_factor_phi_z) Modification of nodal supports Declaration function NodalSupports(node_no, support_factor_ux, support_factor_uy, support_factor_uz, restraint_factor_phi_x, restraint_factor_phi_y, restraint_factor_phi_z) Parameters Type Name Description Number node_no Node index Number support_factor_ux Support factor Cu,x, can be undefined (1.00 by default) Number support_factor_uy Support factor Cu,y, can be undefined (1.00 by default) Number support_factor_uz Support factor Cu,z, can be undefined (1.00 by default) Number restraint_factor_phi_x Restraint factor Cφ,x, can be undefined (1.00 by default) Number restraint_factor_phi_y Restraint factor Cφ,y, can be undefined (1.00 by default) Number restraint_factor_phi_z Restraint factor Cφ,z, can be undefined (1.00 by default) LineSupports(line_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, rotational_factor_phi_x, rotational_factor_phi_y, rotational_factor_phi_z) Mofification of line supports Declaration function LineSupports(line_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, rotational_factor_phi_x, rotational_factor_phi_y, rotational_factor_phi_z) Parameters Type Name Description Number line_no Line index Number translational_factor_u_x Translational factor Cu,x, can be undefined (1.00 by default) Number translational_factor_u_y Translational factor Cu,y, can be undefined (1.00 by default) Number translational_factor_u_z Transational factor Cu,z, can be undefined (1.00 by default) Number rotational_factor_phi_x Rotational factor Cφ,x, can be undefined (1.00 by default) Number rotational_factor_phi_y Rotational factor Cφ,z, can be undefined (1.00 by default) Number rotational_factor_phi_z Rotational factor Cφ,z, can be undefined (1.00 by default) MemberSupports(member_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, shear_factor_s_x, shear_factor_s_y, shear_factor_s_z, rotational_factor_phi_x) Modification of member supports Declaration function MemberSupports(member_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, shear_factor_s_x, shear_factor_s_y, shear_factor_s_z, rotational_factor_phi_x) Parameters Type Name Description Number member_no Member index Number translational_factor_u_x Translational factor Cu,x, can be undefined (1.00 by default) Number translational_factor_u_y Translational factor Cu,y, can be undefined (1.00 by default) Number translational_factor_u_z Translational factor Cu,z, can be undefined (1.00 by default) Number shear_factor_s_x Shear factor Cs,x, can be undefined (1.00 by default) Number shear_factor_s_y Shear factor Cs,y, can be undefined (1.00 by default) Number shear_factor_s_z Shear factor Cs,z, can be undefined (1.00 by default) Number rotational_factor_phi_x Rotational factor Cφ,x, can be undefined (1.00 by default) SurfaceSupports(surface_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, shear_factor_v_xz, shear_factor_v_yz) Modification of surface supports Declaration function SurfaceSupports(surface_no, translational_factor_u_x, translational_factor_u_y, translational_factor_u_z, shear_factor_v_xz, shear_factor_v_yz) Parameters Type Name Description Number surface_no Surface index Number translational_factor_u_x Translational factor Cu,x, can be undefined (1.00 by default) Number translational_factor_u_y Translational factor Cu,y, can be undefined (1.00 by default) Number translational_factor_u_z Translational factor Cu,z, can be undefined (1.00 by default) Number shear_factor_v_xz Shear factor Cv,xz, can be undefined (1.00 by default) Number shear_factor_v_yz Shear factor Cv,yz, can be undefined (1.00 by default) DeactivateObjects(members_object_selection, surfaces_object_selection, solids_object_selection, support_on_nodes_object_selection, support_on_lines_object_selection, support_on_members_object_selection, support_on_surfaces_object_selection) Deactivation of objects Declaration function DeactivateObjects(members_object_selection, surfaces_object_selection, solids_object_selection, support_on_nodes_object_selection, support_on_lines_object_selection, support_on_members_object_selection, support_on_surfaces_object_selection) Parameters Type Name Description Object members_object_selection Object selection with deactivated members, can be undefined (1.00 by default) Object surfaces_object_selection Object selection with deactivated surfaces, can be undefined (1.00 by default) Object solids_object_selection Object selection with deactivated solids, can be undefined (1.00 by default) Object support_on_nodes_object_selection Object selection with deactivated nodal's supports, can be undefined (1.00 by default) Object support_on_lines_object_selection Object selection with deactivated line's supports, can be undefined (1.00 by default) Object support_on_members_object_selection Object selection with deactivated member's supports, can be undefined (1.00 by default) Object support_on_surfaces_object_selection Object selection with deactivated surfaces's supports, can be undefined (1.00 by default) ModifyMemberReinforcement(enabled) Sets member concrete reinforcement Declaration function ModifyMemberReinforcement(enabled) Parameters Type Name Description Boolean enabled Enabled, true if undefined ModifySurfaceReinforcement(enabled) Sets surface concrete reinforcement Declaration function ModifySurfaceReinforcement(enabled) Parameters Type Name Description Boolean enabled Enabled, true if undefined ModifyTimberMember(enabled) Sets timber members due to moisture class Declaration function ModifyTimberMember(enabled) Parameters Type Name Description Boolean enabled Enabled, true if undefined DisableMaterialNonlinearityModels(disabled) Deactivates material nonlinearity models Declaration function DisableMaterialNonlinearityModels(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableTemperatureDependencies(disabled) Deactivates temperature dependencies Declaration function DisableTemperatureDependencies(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesLineHinges(disabled) Deactivates line nonlinearities - line hinges Declaration function DisableNonlinearitiesLineHinges(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesMemberTypes(disabled) Deactivates member nonlinearities - member types Declaration function DisableNonlinearitiesMemberTypes(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesMemberHinges(disabled) Deactivates member nonlinearities - member hinges Declaration function DisableNonlinearitiesMemberHinges(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableMemberNonlinearities(disabled) Deactivates member nonlinearities Declaration function DisableMemberNonlinearities(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesSurfaceOrSolidContact(disabled) Deactivates contact nonlinearities - surface contact, solid types \"Contact\" Declaration function DisableNonlinearitiesSurfaceOrSolidContact(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesNodalSupports(disabled) Deactivates support nonlinearities - nodal supports Declaration function DisableNonlinearitiesNodalSupports(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesLineSupports(disabled) Deactivates support nonlinearities - line supports Declaration function DisableNonlinearitiesLineSupports(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesMemberSupports(disabled) Deactivates support nonlinearities - member supports Declaration function DisableNonlinearitiesMemberSupports(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined DisableNonlinearitiesSurfaceSupports(disabled) Deactivates support nonlinearities - surface supports Declaration function DisableNonlinearitiesSurfaceSupports(disabled) Parameters Type Name Description Boolean disabled Disabled, true if undefined"
  },
  "api/Surface.html": {
    "href": "api/Surface.html",
    "title": "Class Surface | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Surface Creates surface Constructors Surface(no, boundary_lines, thickness, comment, params) Creates surface Declaration new Surface(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index, can be undefined String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface Functions Standard(no, boundary_lines, thickness, comment, params) Creates standard surface Declaration function Standard(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface WithoutThickness(no, boundary_lines, comment, params) Creates without thickness surface Declaration function WithoutThickness(no, boundary_lines, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface Rigid(no, boundary_lines, comment, params) Creates rigid surface Declaration function Rigid(no, boundary_lines, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface Membrane(no, boundary_lines, thickness, comment, params) Creates membrane surface Declaration function Membrane(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface WithoutMembraneTension(no, boundary_lines, thickness, comment, params) Creates without membrane tension surface Declaration function WithoutMembraneTension(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface LoadTransfer(no, boundary_lines, values, comment, params) Creates load transfer surface Declaration function LoadTransfer(no, boundary_lines, values, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Array values Load transfer's parameters, can be undefined [load_transfer_direction, surface_weight, consider_member_eccentricity, consider_section_distribution excluded_members, excluded_parallel_to_members, excluded_lines, excluded_parallel_to_lines, loaded_lines, loaded_members] String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface SurfaceType(stiffness_type, material, thickness) Sets surface type with material and thickness Declaration function SurfaceType(stiffness_type, material, thickness) Parameters Type Name Description String stiffness_type Stiffness type Object material Material, can be undefined Object thickness Thickness, can be undefined Plane() Sets plane geometry type of surface Declaration function Plane() Quadrangle(no, boundary_lines, thickness, boundary_line, corner_node_1, corner_node_2, corner_node_3, corner_node_4, comment, params) Sets quadrangle geometry type of surface Declaration function Quadrangle(no, boundary_lines, thickness, boundary_line, corner_node_1, corner_node_2, corner_node_3, corner_node_4, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index, can be undefined Number boundary_line Index of boundary line Number corner_node_1 Quadrangle corner 1, can be undefined Number corner_node_2 Quadrangle corner 2, can be undefined Number corner_node_3 Quadrangle corner 3, can be undefined Number corner_node_4 Quadrangle corner 4, can be undefined String comment Comment, can be undefined Object params Surface's parameters, can be undefined NURBS() Sets NURBS geometry type of surface Declaration function NURBS() Rotated(no, boundary_lines, thickness, boundary_line, angle_of_rotation, rotation_axis_p, rotation_axis_r, comment, params) Sets rotated geometry type of surface Declaration function Rotated(no, boundary_lines, thickness, boundary_line, angle_of_rotation, rotation_axis_p, rotation_axis_r, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index, can be undefined Number boundary_line Index of boundary line Number angle_of_rotation Angle of rotation, can be undefined Array rotation_axis_p Rotation axis, point P ([X, Y, Z]). Can be undefined. Array rotation_axis_r Rotation axis, point R ([X, Y, Z]). Can be undefined. String comment Comment, can be undefined Object params Surface's parameters, can be undefined Pipe(center_line, radius) Sets pipe geometry type of surface Declaration function Pipe(center_line, radius) Parameters Type Name Description Number center_line Index of center lineHeight Number radius Radius Hinges(hinges_values) Sets surface hinges Declaration function Hinges(hinges_values) Parameters Type Name Description Array hinges_values Line hinges values ([[line_no1, line_hinge_no1] ... [line_non, line_hinge_non]]) Support(support) Sets surface support Declaration function Support(support) Parameters Type Name Description Number support Index of surface support Eccentricity(eccentricity) Sets surface eccentricity Declaration function Eccentricity(eccentricity) Parameters Type Name Description Number eccentricity Index of surface eccentricity MeshRefinement(mesh_refinement, meshing_type) Sets surface mesh refinement Declaration function MeshRefinement(mesh_refinement, meshing_type) Parameters Type Name Description Number mesh_refinement Index of surface mesh refinement Number meshing_type Meshing type, can be undefined (According to global settings by default) 1 - According to global settings 2 - Mapped 3 - Free SpecificAxes(input_axes, result_axes) Declaration function SpecificAxes(input_axes, result_axes) Parameters Type Name Description Array input_axes Input axes values [category, [values], reverse_local_z_axis], can be undefined 1 - Angular rotation category, values: [α, [X, Y, Z], [X2, Y2, Z2]], first and second point can be undefined 2 - Axis parallel to lines category, values: [[line1_no, line2_no ... linen_no], axis (Axis x|Axis y)], second parameter can be undefined (\"Axis x\" as default) 3 - Axis directed to point category, values: [[X1, Y1, Z1], [X2, Y2, Z2], axis (Axis x|Axis y)], third parameter can be undefined (\"Axis x\" by default) 4 - Axis parallel to coordinate system category, values: [coordinate_system_no], can be undefined (Global XYZ by default) reverse_local_z_axis, can be undefined Array result_axes Result axes values [category], can be undefined (Identical to input axes by default) 1 - Identical to input axes category, by default GridForResults(grid_type, number_of_grid_points, grid_adapt_automatically, grid_distancies, grid_rotation, grid_origin) Sets surface's grid for results values Declaration function GridForResults(grid_type, number_of_grid_points, grid_adapt_automatically, grid_distancies, grid_rotation, grid_origin) Parameters Type Name Description Number grid_type Grid type (1 - Cartesian, 2 - Polar) Array number_of_grid_points Number of grid points in (-) and (+), can be undefined Grid type cartesian: [nx+, nx-, ny+, ny-] Grid type polar: [nr+] Boolean grid_adapt_automatically Adapt automatically, can be undefined (true by default) Array grid_distancies Grid distancies ([b, h]), can be undefined Array grid_rotation Grid rotation ([α, β]), can be undefined Array grid_origin Grid origin ([X, Y, Z]), can be undefined IntegratedObjects(auto_detection_of_integrated_objects, integrated_nodes, integrated_lines, integrated_openings) Sets integrated objects to surface Declaration function IntegratedObjects(auto_detection_of_integrated_objects, integrated_nodes, integrated_lines, integrated_openings) Parameters Type Name Description Boolean auto_detection_of_integrated_objects Integrated objects are detected automatically, can be undefined (true by default) Array integrated_nodes List of integrated nodes indexes, can be undefined Array integrated_lines List of integrated lines indexes, can be undefined Array integrated_openings List of integrated openings indexes, can be undefined;"
  },
  "api/SurfaceEccentricity.html": {
    "href": "api/SurfaceEccentricity.html",
    "title": "Class SurfaceEccentricity | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceEccentricity Creates surface eccentricity Constructors SurfaceEccentricity(no, surfaces_list, comment, params) Creates surface eccentricity Declaration new SurfaceEccentricity(no, surfaces_list, comment, params) Parameters Type Name Description Number no Index of surface eccentricity, can be undefined Array surfaces_list List of surfaces indexes String comment Comment, can be undefined Object params Surface eccentricity's parameters, can be undefined Returns Type Description Created surface eccentricity Functions OffsetAndThicknessAssignment(no, surfaces_list, offset, thickness_alignment, comment, params) Sets offset or/and thickness alignment Declaration function OffsetAndThicknessAssignment(no, surfaces_list, offset, thickness_alignment, comment, params) Parameters Type Name Description Number no Index of surface eccentricity, can be undefined Array surfaces_list List of surfaces indexes Number offset Absolute ordinate (value has tu be set with this way: for example 20 mm), can be undefined String thickness_alignment Thickness assignment (THICKNESS_ALIGNMENT_TOP, THICKNESS_ALIGNMENT_MIDDLE, THICKNESS_ALIGNMENT_BOTTOM), can be undefined (middle as default) String comment Comment, can be undefined Object params Surface eccentricity's parameters, can be undefined TransverseOffset(reference_type, reference_no, offset_alignment) Sets transverse offset Declaration function TransverseOffset(reference_type, reference_no, offset_alignment) Parameters Type Name Description String reference_type Reference object type (REFERENCE_TYPE_MEMBER, REFERENCE_TYPE_SURFACE) Number reference_no Member or surface Number String offset_alignment Axial offset (TRANSVERSE_OFFSET_TOP, TRANSVERSE_OFFSET_MIDDLE, TRANSVERSE_OFFSET_BOTTOM), can be undefined (middle as default)"
  },
  "api/SurfaceLoad.html": {
    "href": "api/SurfaceLoad.html",
    "title": "Class SurfaceLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceLoad Creates surface load Constructors SurfaceLoad(no, load_case, surfaces, comment, params) Creates surface load Declaration new SurfaceLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface load Functions Force(no, load_case, surfaces, load_distribution, load_values, load_direction, comment, params) Creates surface force load Declaration function Force(no, load_case, surfaces, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface force load Temperature(no, load_case, surfaces, load_distribution, load_values, comment, params) Creates surface temperature load Declaration function Temperature(no, load_case, surfaces, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface temperature load AxialStrain(no, load_case, surfaces, load_distribution, load_values, comment, params) Creates surface axial strain load Declaration function AxialStrain(no, load_case, surfaces, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface axial strain load Precamber(no, load_case, surfaces, load_value, comment, params) Creates surface precamber load Declaration function Precamber(no, load_case, surfaces, load_value, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface precamber load RotaryMotion(no, load_case, surfaces, load_values, comment, params) Creates surface rotary motion load Declaration function RotaryMotion(no, load_case, surfaces, load_values, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface rotary motion load Mass(no, load_case, surfaces, load_value, comment, params) Creates surface mass load Declaration function Mass(no, load_case, surfaces, load_value, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface mass load IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/SurfaceMeshRefinement.html": {
    "href": "api/SurfaceMeshRefinement.html",
    "title": "Class SurfaceMeshRefinement | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceMeshRefinement Creates surface mesh refinement Constructors SurfaceMeshRefinement(no, surface_list, target_length, comment, params) Creates surface mesh refinement Declaration new SurfaceMeshRefinement(no, surface_list, target_length, comment, params) Parameters Type Name Description Number no Index of surface mesh refinement, can be undefined Array surface_list List of surface indexes, can be undefined Number target_length Target FE length, can be undefined (0.05 m by default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface mesh refinement"
  },
  "api/SurfaceSet.html": {
    "href": "api/SurfaceSet.html",
    "title": "Class SurfaceSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceSet Create Surface Set Constructors SurfaceSet(no, surfaces, surface_set_type, comment, params) Create Surface Set Declaration new SurfaceSet(no, surfaces, surface_set_type, comment, params) Parameters Type Name Description undefinedint no Number of Surface Set array surfaces List of surfaces string surface_set_type Surface Set type string comment Comment for the Surface Set undefineddictionary params Parameters of the Surface Set Returns Type Description surfaceSet Functions ContinuousSurfaces(no, surfaces, comment, params) Create Continuous Surfaces surfaceSet type Declaration function ContinuousSurfaces(no, surfaces, comment, params) Parameters Type Name Description Dlubal.int no Number of Surface Set array surfaces List of surfaces string comment Comment for the Surface Set Dlubal.dictionary params Parameters of the Surface Set GroupOfSurfaces(no, surfaces, comment, params) Create Group of Surfaces Declaration function GroupOfSurfaces(no, surfaces, comment, params) Parameters Type Name Description Dlubal.int no Number of Surface Set array surfaces List of surfaces string comment Comment for the Surface Set Dlubal.dictionary params Parameters of the Surface Set"
  },
  "api/SurfaceSetLoad.html": {
    "href": "api/SurfaceSetLoad.html",
    "title": "Class SurfaceSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceSetLoad Creates line set load Constructors SurfaceSetLoad(no, load_case, line_sets, comment, params) Creates line set load Declaration new SurfaceSetLoad(no, load_case, line_sets, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line set indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set load Functions Force(no, load_case, surface_sets, load_distribution, load_values, load_direction, comment, params) Creates surface set force load Declaration function Force(no, load_case, surface_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set force load Temperature(no, load_case, surface_sets, load_distribution, load_values, comment, params) Creates surface set temperature load Declaration function Temperature(no, load_case, surface_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set temperature load AxialStrain(no, load_case, surface_sets, load_distribution, load_values, comment, params) Creates surface set axial strain load Declaration function AxialStrain(no, load_case, surface_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set axial strain load Precamber(no, load_case, surface_sets, load_value, comment, params) Creates surface set precamber load Declaration function Precamber(no, load_case, surface_sets, load_value, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set precamber load RotaryMotion(no, load_case, surface_sets, load_values, comment, params) Creates surface set rotary motion load Declaration function RotaryMotion(no, load_case, surface_sets, load_values, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set rotary motion load Mass(no, load_case, surface_sets, load_value, comment, params) Creates surface set mass load Declaration function Mass(no, load_case, surface_sets, load_value, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set mass load IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/SurfaceStiffnessModification.html": {
    "href": "api/SurfaceStiffnessModification.html",
    "title": "Class SurfaceStiffnessModification | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceStiffnessModification Creates surface stiffness modification Constructors SurfaceStiffnessModification(no, structural_modification, comment, params) Creates surface stiffness modification Declaration new SurfaceStiffnessModification(no, structural_modification, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification Functions TotalStiffnessFactor(no, structural_modification, total_stiffness, comment, params) Creates total stiffness factor type of surface stiffness modification Declaration function TotalStiffnessFactor(no, structural_modification, total_stiffness, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index Number total_stiffness Total stiffness String comment Comment, can be undefined, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification PartialStiffnessesFactors(no, structural_modification, bending_stiffness_factor, shear_stiffness, membrane_stiffness, eccentric_effects, weight, comment, params) Creates partial stiffnesses factors type of surface stiffness modification Declaration function PartialStiffnessesFactors(no, structural_modification, bending_stiffness_factor, shear_stiffness, membrane_stiffness, eccentric_effects, weight, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index, can be undefined Number bending_stiffness_factor Bending and torsional factors, can be undefined (1.00 by default) Number shear_stiffness Shear stiffness, can be undefined (1.00 by default) Number membrane_stiffness Membrane stiffness, can be undefined (1.00 by default) Number eccentric_effects Eccentric stiffness, can be undefined (1.00 by default) Number weight Weight, can be undefined (1.00 by default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification StiffnessMatrixElementsFactors(no, structural_modification, bending_torsional_stiffness_elements, shear_stiffness_elements, membrane_stiffness_elements, eccentric_stiffness_elements, comment, params) Creates stiffness matrix elements factors type of surface stiffness modification Declaration function StiffnessMatrixElementsFactors(no, structural_modification, bending_torsional_stiffness_elements, shear_stiffness_elements, membrane_stiffness_elements, eccentric_stiffness_elements, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index, can be undefined Array bending_torsional_stiffness_elements Bending torsional stiffness elements values ([kD11, kD12, kD13, kD22, kD23, kD33, kD11 note, kD12 note, kD13 note, kD22 note, kD23 note, kD33 note]), can be undefined (all values 1.0 by default) Array shear_stiffness_elements Shear stiffness elements values ([kD44, kD45, kD55, kD44 note, kD45 note, kD55 note]), can be undefined (all values 1.0 by default) Array membrane_stiffness_elements Membrane stiffness elements values ([kD66, kD67, kD68, kD77, kD78, kD88, kD66 note, kD67 note, kD68 note, kD77 note, kD78 note, kD88 note]), can be undefined (all values 1.0 by default) Array eccentric_stiffness_elements Eccentric stiffness elements values ([kD16, kD17, kD18, kD27, kD28, kD38, kD16 note, kD17 note, kD18 note, kD27 note, kD28 note, kD38 note]), can be undefined (all values 1.0 by default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification ConcreteStructuresACI(no, structural_modification, component_type, comment, params) Creates concrete structure ACI type of surface stiffness modification Declaration function ConcreteStructuresACI(no, structural_modification, component_type, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index, can be undefined Number component_type Component type (1 - Columns, 2 - Walls uncracked, 3 - Walls cracked, 4 - Beams, 5 - Flat plates and flat slabs), can be undefined (Columns type as default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification ConcreteStructuresCSA(no, structural_modification, component_type, comment, params) Creates concrete structure CSA type of surface stiffness modification Declaration function ConcreteStructuresCSA(no, structural_modification, component_type, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index, can be undefined Number component_type Component type (1 - Columns, 2 - Walls uncracked, 3 - Walls cracked, 4 - Beams, 5 - Flat plates and flat slabs), can be undefined (Columns type as default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification"
  },
  "api/Thickness.html": {
    "href": "api/Thickness.html",
    "title": "Class Thickness | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Thickness Create Thickness Constructors Thickness(no, name, material, uniform_thickness_d, comment, params) Create Thickness Declaration new Thickness(no, name, material, uniform_thickness_d, comment, params) Parameters Type Name Description undefinedint no Number of Thickness string name Name of the Thickness undefinedint material Number of material number uniform_thickness_d Uniform thickness in meters. string comment Comment for the Thickness undefineddictionary params Parameters of the Thickness Returns Type Description Thickness Functions Uniform(no, name, material, properties, comment, params) Create Uniform thickness Declaration function Uniform(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness in format [thickness] string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_3Nodes(no, name, material, properties, comment, params) Create Variable - 3 Nodes thickness Declaration function Variable_3Nodes(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_2NodesAndDirection(no, name, material, properties, comment, params) Create Variable - 2 Nodes and Direction thickness Declaration function Variable_2NodesAndDirection(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_4SurfaceCorners(no, name, material, properties, comment, params) Create Variable - 4 Surface Corners thickness Declaration function Variable_4SurfaceCorners(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_Circle(no, name, material, properties, comment, params) Create Variable - Circle thickness Declaration function Variable_Circle(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Layers(no, name, layers, comment, params) Create Layers thickness Declaration function Layers(no, name, layers, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness array layers List of layers string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness ShapeOrthotropy(no, name, layers, orthotropy_type, rotation_beta, consideration_of_self_weight, parameters, comment, params) Create Shape Orthotropy thickness Declaration function ShapeOrthotropy(no, name, layers, orthotropy_type, rotation_beta, consideration_of_self_weight, parameters, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness array layers List of layers string orthotropy_type Orthotropy Type number rotation_beta Rotation about Z-axis of surface (Degree) string consideration_of_self_weight Self-Weight definition array parameters Parameters of Shame Orthotropy string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness StiffnessMatrix(no, name, rotation_beta, consideration_of_self_weight, coefficient_of_thermal_expansion, stiffness_matrix, comment, params) Create Stiffness Matrix thickness Declaration function StiffnessMatrix(no, name, rotation_beta, consideration_of_self_weight, coefficient_of_thermal_expansion, stiffness_matrix, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness number rotation_beta Rotation about Z-axis of surface (Degree) string consideration_of_self_weight Self-Weight definition array coefficient_of_thermal_expansion Coefficient of thermal expansion array stiffness_matrix Stiffness Matrix string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness"
  },
  "api/WindLoadWizard.html": {
    "href": "api/WindLoadWizard.html",
    "title": "Class WindLoadWizard | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class WindLoadWizard Creates empty wind load wizard Constructors WindLoadWizard(no, comment, params) Creates empty wind load wizard Declaration new WindLoadWizard(no, comment, params) Parameters Type Name Description Number no Wind load wizard index, can be undefined String comment Comment, can be undefined Object params Additional parameters, can be undefined Functions WallsRoofMonopitch(no, base_corner_nodes, roof_corner_nodes, load_cases, wind_directions, comment, params) Creates vertical walls with flat/monopitch roof Declaration function WallsRoofMonopitch(no, base_corner_nodes, roof_corner_nodes, load_cases, wind_directions, comment, params) Parameters Type Name Description Number no Wind load wizard index, can be undefined Array base_corner_nodes Base corner nodes indexes Array roof_corner_nodes Roof corner nodes indexes Array load_cases Load case 1, load case 2 Array wind_directions Wind directions (roof sides accessibility), can be undefined, for info setWindDirections function String comment Comment, can be undefined Object params Additional parameters, can be undefined WallsRoofDuoPitch(no, base_corner_nodes, roof_corner_nodes, load_cases, wind_directions, comment, params) Creates vertical walls with duopitch roof Declaration function WallsRoofDuoPitch(no, base_corner_nodes, roof_corner_nodes, load_cases, wind_directions, comment, params) Parameters Type Name Description Number no Wind load wizard index, can be undefined Array base_corner_nodes Base corner nodes indexes Array roof_corner_nodes Roof corner nodes indexes Array load_cases Load cases Array wind_directions Wind directions (roof sides accessibility), can be undefined, for info setWindDirections function String comment Comment, can be undefined Object params Additional parameters, can be undefined RoofMonoPitch(no, roof_corner_nodes, load_cases, wind_directions, comment, params) Creates flat/monopitch roof Declaration function RoofMonoPitch(no, roof_corner_nodes, load_cases, wind_directions, comment, params) Parameters Type Name Description Number no Wind load wizard index, can be undefined Array roof_corner_nodes Roof corner nodes indexes Array load_cases Load cases Array wind_directions Wind directions (roof sides accessibility), can be undefined, for info setWindDirections function String comment Comment, can be undefined Object params Additional parameters, can be undefined RoofDuopitch(no, roof_corner_nodes, load_cases, wind_directions, comment, params) Creates duopitch roof Declaration function RoofDuopitch(no, roof_corner_nodes, load_cases, wind_directions, comment, params) Parameters Type Name Description Number no Wind load wizard index, can be undefined Array roof_corner_nodes Roof corner nodes indexes Array load_cases Load cases Array wind_directions Wind directions (roof sides accessibility), can be undefined, for info setWindDirections function String comment Comment, can be undefined Object params Additional parameters, can be undefined SetLoadedWallsAndRoofs(roofs_accessibility) Sets loaded walls/roofs Declaration function SetLoadedWallsAndRoofs(roofs_accessibility) Parameters Type Name Description Array roofs_accessibility Roofs/walls accessibility [Wall 1, Wall 2, Wall 3, Wall4] (Vertical walls with flat/monopitch roof, Vertical walls with duopitch roof) [Roof 1] (Flat/monopitch roof) [Roof 1, Roof 2] (Duopitch roof) WithoutLoadsOnMembers(objects_without_loads, objects_without_loads_parallel_to) Generated on members Declaration function WithoutLoadsOnMembers(objects_without_loads, objects_without_loads_parallel_to) Parameters Type Name Description Array objects_without_loads Without load on members, can be undefined Array objects_without_loads_parallel_to Without load parallel to members, can be undefined WithoutLoadsOnSurfaces(objects_without_loads, objects_without_loads_parallel_to) Generated on surfaces Declaration function WithoutLoadsOnSurfaces(objects_without_loads, objects_without_loads_parallel_to) Parameters Type Name Description Array objects_without_loads Without load on surfaces, can be undefined Array objects_without_loads_parallel_to Without load parallel to surfaces, can be undefined WithoutLoadsOnLines(objects_without_loads, objects_without_loads_parallel_to) Generated on lines Declaration function WithoutLoadsOnLines(objects_without_loads, objects_without_loads_parallel_to) Parameters Type Name Description Array objects_without_loads Without load on lines, can be undefined Array objects_without_loads_parallel_to Without load parallel to lines, can be undefined LockForNewObjects(enabled) Sets lock for new members Declaration function LockForNewObjects(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default ConsiderMemberEccentricity(enabled) Sets consider member eccentricity Declaration function ConsiderMemberEccentricity(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default ConsiderSectionDistribution(enabled) Sets consider section distribution Declaration function ConsiderSectionDistribution(enabled) Parameters Type Name Description Boolean enabled Can be undefined, true as default"
  },
  "api/WindSimulationSettings.html": {
    "href": "api/WindSimulationSettings.html",
    "title": "Class WindSimulationSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class WindSimulationSettings Class creates WindSimulationSettings object Constructors WindSimulationSettings(no, name, density, kinematicViscosity, consider_turbulence, turbulenceModel, memberLoadDistribution, comment, params) Basic constuctor Declaration new WindSimulationSettings(no, name, density, kinematicViscosity, consider_turbulence, turbulenceModel, memberLoadDistribution, comment, params) Parameters Type Name Description undefined* no undefined* name undefined* density undefined* kinematicViscosity undefined* consider_turbulence undefined* turbulenceModel undefined* memberLoadDistribution undefined* comment undefined* params Returns Type Description Object WindSimulationSettings"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "| Dlubal JavaScript High Level Functions Library",
    "keywords": "This area is here to publish informations about JavaScripting"
  },
  "articles/NotesToScripts.html": {
    "href": "articles/NotesToScripts.html",
    "title": "Instructions for scripts and formulas in RFEM 6 | Dlubal JavaScript High Level Functions Library",
    "keywords": "Instructions for scripts and formulas in RFEM 6 Introduction This article describes how to write scripts and formulas in RFEM 6. The vast majority of the rules apply to scripts and formulas at the same time (and also to commands in the console), so we will only talk about scripts. Syntax RFEM 6 scripts are written in JavaScript (ECMA-262 standard). However, we've modified the syntax a bit to better meet the needs of RFEM customers: Operator Power The ^ operator is a power, not a bit xor. Expressions of type a^b are equivalent to Math.pow(a, b). Units In script code, you can use units for entering numeric values: var a = 10mm; var b = 10 kN/m; var c = (1mm + 3mm) + 2mm; Almost all RFEM units are available in the code, an overview of which can be found, for example, in the \"Units and decimal places\" dialog. Exceptions are units that have no symbols (e.g. factors) and percentage (% is an operator in JavaScript). Units can be used either after a number or after a closing bracket. This restriction allows you to use unit texts as variable identifiers. var m = 1; // Is not unit var a = 2 + m; // Is not unit var b = 2 m; // Is unit var c = Math.sin(2) m; // IS unit Expression of type .. unit is equivalent to notation .. * coefficient_unit, where the coefficient means the number of given units in the SI unit (e.g. 0.001 for mm). Object containers In scripts, special objects with names of type \"nodes\", \"lines\", \"member_end_releases\", etc. are accessible. These objects serve as containers for model objects. These containers are treated as arrays: var node = nodes[1]; // Ziskání uzlu č. 1 var c = nodes[2].coordinate_x; // Ziskání x-ové souřadnice uzlu č. 2 Container objects have additional methods: count() .. returns the number of objects create(id) .. creates an object with a given id (default type for the given container) create() .. the same as create(id), only new objects will have user id selected automatically according to normal rules erase(id) .. deletes object with inputed id lastId() .. returns the id of the last object getNthObjectId(order).. returns the id of the object with the given sequence number The create and erase methods may fail (e.g. when an object with a given id already exists or when the object is not erasable), in which case it throws an exception. A list of all accessible containers can be found in the \"Object Properties\" dialog. RFEM objects Containers return objects that allow access to the properties of the corresponding RFEM object. This approach is implemented via classic JavaScript dot notation: var c = nodes[2].coordinate_x; // Get value of property nodes[2].coordinate_x = 3; // Set value of property var node = nodes[2]; node.coordinate_y = 4; [!NOTE] 💡 A list of all properties of a particular object type can be found in the \"Object Properties\" dialog box. In addition, each object has additional properties: id.. the id of the object parentId .. id of the parent object (has meaning for loads that can belong to different load times) method equals ... compares the variable to an object with another and tells if it is the same object. Some properties are not editable. When trying to change the value of such properties, an exception is thrown. When you set a property value, that value is validated (usually in the same way as in the table). If the value has not passed the validation, an exception is thrown. Object properties can be of different types, which are also listed in the \"Object Properties\" dialog box. The same behavior can be expected from properties of the same type. Float Returns as a JavaScript number. When you set properties, either a number or a string that can be converted to a number is also expected. [!Caution] The value is always returned and set in SI units. String It returns as String. Almost anything can be set (converted to text). Boolean He returns as Bool. You can set boole values or something that can be converted to bool. Integer It returns as Number (it is guaranteed to be an integer). You can set anything that can be converted to a number. You can set a less than a number, but the fractional part will be ignored. Enumeration The value of a given attribute can only be a value from a specific list, which are represented in the scripts through a package of variables (\"constants\"). Their names for each attribute are listed in the \"Object Properties\" dialog box. Example of work: var a = nodes[2].coordinate_system; if (a == nodes.COORDINATE_SYSTEM_CARTESIAN) {..} // Check of value nodes[2].coordinate_system = nodes.COORDINATE_SYSTEM_POLAR; // Set of value for property Vector The value is returned as an instance of the Vector class from the Sylvester library (see. Sylvester). By analogy, an instance of this class is expected when set up. Matrix The value is returned as an instance of the Matrix class from the Sylvester library (see. Sylvester). By analogy, an instance of this class is expected when set up. Object Returns an object that is the value of a given property. The returned object is exactly the same as the object with the same id in the corresponding object container (e.g. materials or nodes). Example: let us have node #1 referencing node #2 (reference node). Then nodes[1].reference_node is the same as nodes[2] (it is the same object that has the same properties). It is possible to work from this object further, e.g.: nodes[1].reference_node.coordinate_1 = 12; //(stejný efekt, co u volání 'nodes[2].coordinate_1 = 12;') When set, either a different object of a supported type or an integer in the valid for the range object id is expected. Values of 0 or null represent the setting of an empty reference to an object (similar to a table). E.g.: nodes[1].reference_node = nodes[3]; nodes[1].reference_node = 3; nodes[2].reference_node = nodes[1].reference_node; nodes[2].reference_node = 0; nodes[1].reference_node = null; Object List Returns a list of objects as a standard JavaScript array. The items in this array are directly topological objects (similar to atribits of the \"Object\" type). When set up, either an array of objects or an array of integers is expected, each of which will be treated as the id of the object required by the type attribute. You can also set the value with a string in the common for writing a list of format numbers, e.g. \"1,2,5-10,12\". Emptying the list is logically done by setting an empty field, an empty string, or a null value. lines[1].definition_nodes = [nodes[7], nodes[5], nodes[3]]; lines[1].definition_nodes = [7, 5, 3]; lines[1].definition_nodes = \"7, 5, 3\"; lines[1].definition_nodes[1].coordinate_1; to same, co nodes[7].coordinate_1 lines[2].definition_nodes = lines[1].definition_nodes; lines[1].definition_nodes = []; lines[1].definition_nodes = \"\"; lines[1].definition_nodes = null; Nested container (table) This property returns an object that itself acts as a container for other objects. These objects can also have their own properties, an overview of which can also be found in the \"Object Properties\" dialog. These properties act as named table columns. An example of a property of this type is the NURBS line checkpoints. var v = lines[1].nurbs_control_points[1].coordinates; lines[1].nurbs_control_points[1].weight = 0.5; Some nested tables do not have named columns, then they are treated as a two-dimensional array: var v = surfaces[1].nurbs_control_points[1][1].coordinates; surfaces[1].nurbs_control_points[1][1].weight = 0.5; 💡 All nested containers (tables) have several helper methods: row_count.. returns the number of rows column_count .. returns the number of columns (or attributes) insert_row(index) .. inserts a new line at the position remove_row(index) .. removes a line from the given position Insert/remove method throws an exception when it fails. It is forbidden to set anything to the properties of the \"nested table\" type. Vectors and matrices in scripts The Sylvester library is used to work with vector values in scripts. Its full documentation can be found on the http://sylvester.jcoglan.com/ . However, we have made some changes to this library that should make it easier to work with three-dimensional vectors. The standard vector constructor can now take multiple values to create a vector from. That is, instead var v = Vector.create([1, 2, 3]); can only be written var v = Vector.create(1, 2, 3); The vector has three auxiliary properties x, y, from which it returns the values of the first or second or third element of the vector. That is, instead var c = v.e(0) + v.e(1); can only be written var c = v.x + v.y; The length method now returns the size of the vector (modulus), not the number of items. For the toUnitVector method, we added the alias normalize. Notes on formulas For formulas, everything that was written above applies, except for the specificity that any modification of objects/containers is prohibited. Getting properties works exactly the same, but when you try to set them up, an exception will be thrown. The same applies, for example, to the create, erase, insert_row, remove_row methods in containers. Console notes The console allows you to execute small scripts, and everything that was written above applies to them. However, when entered into the console, some special strings are processed in a special way (they are not considered scripts). They are run [path] ... runs a script with the specified file name; the path is either absolute or relative to the application's launch location. Clr... cleans the console."
  },
  "blocks/functionsForBlocks.html": {
    "href": "blocks/functionsForBlocks.html",
    "title": "Overview of functions used for blocks | Dlubal JavaScript High Level Functions Library",
    "keywords": "Overview of functions used for blocks Sections global_parameters() input_data() generate() model variable in block scripts UNIT variables Multiplicity examples Constants Defining of block contains two main two function: global_parameters() - function for creating global parameters, which are required for block. input_data() - create input table in block dialog with input parameters generate() - function of generation blocks, in this functions user can use input variables, which was added in input_data() function global_parameters() In this function can used following functions: function ValueGlobalParameter(name, symbol, unit_group, value, comment) function FormulaGlobalParameter(name, symbol, unit_group, formula, comment) function OptimizationGlobalParameter(name, symbol, unit_group, value, min, max, increment, steps, comment) function OptimizationAscendingGlobalParameter(name, symbol, unit_group, value, min, max, increment, steps, comment) function OptimizationDescendingGlobalParameter(name, symbol, unit_group, value, min, max, increment, steps, comment) This function creates global parameters and bind its to block and input fields in parameters table. If global parameters exists, RFEM try bind input fields to existing parameters if unit group is equal to required unit group, otherwise default values will be used. function ValueGlobalParameter(name, symbol, unit_group, value, comment) Function creates global parameter of value definition type. Arguments: name - name of global parameter symbol - symbol of global parameter, name will be used, if symbol not set. unit_group - unit group of global parameter, Lengths is default. value - default value, float type. comment - comment of global parameter. function FormulaGlobalParameter(name, symbol, unit_group, formula, comment) Function creates global parameter of formula definition type. Arguments: name - name of global parameter symbol - symbol of global parameter, name will be used, if symbol not set. unit_group - unit group of global parameter, Lengths is default. formula - formula, string type. comment - comment of global parameter. function OptimizationGlobalParameter(name, symbol, unit_group, value, min, max, increment, steps, comment) Function creates global parameter of optimization definition type. Arguments: name - name of global parameter symbol - symbol of global parameter, name will be used, if symbol not set. unit_group - unit group of global parameter, Lengths is default. value - default value, float type. min - minimum allowed value, float type. max - maximum allowed value, float type. increment - increment value, float type. steps - value of step, integer type, set this parameter, if increment is undefined. comment - comment of global parameter. function OptimizationAscendingGlobalParameter(name, symbol, unit_group, value, min, max, increment, steps, comment) Same like OptimizationGlobalParameter, but is ascending type. function OptimizationDescendingGlobalParameter(name, symbol, unit_group, value, min, max, increment, steps, comment) Same like OptimizationGlobalParameter, but is descending type. Example function global_parameters() { FormulaGlobalParameter(\"offset\", undefined, UNIT.LENGTH, \"1.5+1\", \"Formula global parameter\"); ValueGlobalParameter(\"offset_1\", \"\", UNIT.LENGTH, 1.0, \"Value global parameter\"); OptimizationGlobalParameter(\"offset_2\", \"offset_2\", UNIT.LENGTH, 3.0, 1.0, 10.0, 1.0, undefined, \"Optimization global parameter\"); OptimizationAscendingGlobalParameter(\"offset_3\", \"offset_3\", UNIT.LENGTH, 3.0, 1.0, 10.0, 1.0, undefined, \"Optimization ascending global parameter\"); OptimizationDescendingGlobalParameter(\"offset_4\", \"offset_4\", UNIT.LENGTH, 3.0, 1.0, 10.0, 1.0, undefined, \"Optimization descending global parameter\"); } input_data() In this function can used following functions: function category(name, multiplicity_counter_key, parent) function loading_category(name) function parameter_int(name, key, symbol, value, unit, minimum,step, maximum, minimum_inclusive, maximum_inclusive, multiplicity_counter_key) function parameter_float(name, key, symbol, value, unit, minimum, step, maximum, minimum_inclusive, maximum_inclusive, multiplicity_counter_key) function material(no, name, multiplicity_counter_key) function section(no, name, multiplicity_counter_key, category) function thickness(no, name, multiplicity_counter_key) function nodal_support(no, name, multiplicity_counter_key) function line_support(no, name, multiplicity_counter_key) function member_support(no, name, multiplicity_counter_key) function surface_support(no, name, multiplicity_counter_key) function load_case(no, name, multiplicity_counter_key) function parameter_check(description, key, value) function condition(value) function editable_condition(value) function editable(value) function combobox(description, key) function combobox_value(description, value, is_default) function set_global_parameter(value) Important behavior of input and generated objects You can create object in generate() and get objects like input objects. In this case need to control script id, because of generated objects and input objects will be add to same map. It means, if You have input materials with id 1 and 3, then generated objects cannot be created with ids 1 and 3. You can create material with id 2, 4, and so on. function generate() { Material(2); // Create material 2 Material(4); // Create material 4 materials[1]; // input material materials[2]; // generated material materials[3]; // input material materials[4]; // generated material } function category(name, multiplicity_counter_key, parent) Function create a category in the block input table. Arguments: name - title of category multiplicity_counter_key - key of counter, which was created by function * parameter_int() function. parent - set this parent, if need to create category inside another category. Call this function without this argument will create category in the root of input tree table. Examples Common example function input_data() { category(\"Parameters\"); // create category on first level category(\"Nodal Support\"); // create category on first level var SECTIONS_CATEGORY = category(\"Sections\"); // create category on first level category(\"Section 1\", false, SECTIONS_CATEGORY ); // create category on second level inside category \"Sections\" category(\"Section 1\", false, SECTIONS_CATEGORY ); // create category on second level inside category \"Sections\" } Multiplicity example In this case we will create counter with key \"n\", after that we will create template multiplicity category, which will create categories by counter. It means, if counter has value 5, then 5 categories will be created in the input table. Also we can write special title of category with {{number}} placeholder, which will be changed on number of this category in the input table. function input_data() { category(\"Multiplicity Counter \"); // create category on first level parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); // create multiplicity counter var MEMBER_SETTINGS_CATEGORY = category(\"Members settings\"); // create category on first level category(\"Multiplicity Group {{number}}\", \"n\", MEMBER_SETTINGS_CATEGORY); // create multiplicity category on second level inside category Members settings\" } function loading_category(name) Function loading_category creates special category, which can be managed by check box Loading on the main tab of Block Dialog. This category may exist like single instance and should contain all load cases input parameters. This category can not be used like multiplicity category, but can contains multiplicity parameters and categories. Arguments: name - title of category Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Create loading category on first level category(\"Loads\", false, LOADING_CATEGORY); // Create category on second level inside \"Loading\" category. } function parameter_int(name, key, symbol, value, unit, minimum, step, maximum, minimum_inclusive, maximum_inclusive, multiplicity_counter_key) Function creates integer input parameter. This parameter can be used for multiplicity parameters and categories like counter. Arguments: name - name of parameter in input table key - key name, by this name we can use parameter in generate() function. Key will shown in input table, if symbol is empty. symbol - symbol with html tags in input table. Can be shown instead of key. value - default value of parameter unit - unit of parameter. minimum - minimal limit of parameter step - step of changing parameter by spin box maximum - maximal limit of parameter minimum_inclusive - include minimal limit if true maximum_inclusive - include maximal limit if true multiplicity_counter_key - key of counter, which was created by parameter_int() function. It can be used like multiplicity parameter, which managed by another integer parameter. Examples Common example function input_data() { category(\"Category\"); parameter_int(\"Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); } Multiplicity examples Multiplicity example, when counter manages multiplicity parameters function input_data() { category(\"Category\"); // create category on first level parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); // create multiplicity counter var MEMBER_SETTINGS_CATEGORY = category(\"Members settings\"); // create category on first level category(\"Multiplicity Group {{number}}\", \"n\", MEMBER_SETTINGS_CATEGORY); // create multiplicity category on second level inside category Members settings\" } Multiplicity example, when multiplicity counter managed by another counter function input_data() { category(\"Category\"); // create category on first level parameter_int(\"Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); // create multiplicity counter var MEMBER_SETTINGS_CATEGORY = category(\"Members settings\"); // create category on first level parameter_int(\"Multiplicity Counter\", \"managed\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true, \"n\"); // create multiplicity \"managed\" counter on second level, which managed by \"n\" counter } function parameter_float(name, key, symbol, value, unit, minimum, step, maximum, minimum_inclusive, maximum_inclusive, multiplicity_counter_key) Function creates float input parameter. Arguments: name - name of parameter in input table key - key name, by this name we can use parameter in generate() function. Key will shown in input table, if symbol is empty. symbol - symbol with html tags in input table. Can be shown instead of key. value - default value of parameter unit - unit of parameter. minimum - minimal limit of parameter step - step of changing parameter by spin box maximum - maximal limit of parameter minimum_inclusive - include minimal limit if true maximum_inclusive - include maximal limit if true multiplicity_counter_key - key of counter, which was created by function parameter_int() function. function material(no, name, multiplicity_counter_key) Function creates input field for material object, which exists in model. Arguments: no - script id of material objects. Material will be added to materials map. We can get material by this id, from this map like this materials[4], if material input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Read about important behavior. function section(no, name, multiplicity_counter_key, category) Function creates input field for section object, which exists in model. Arguments: no - script id of section objects. Section will be added to sections map. We can get section by this id, from this map like this sections[4], if section input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Read about important behavior. function thickness(no, name, multiplicity_counter_key) Function creates input field for thickness object, which exists in model. Arguments: no - script id of thickness objects. Thickness will be added to thicknesses map. We can get thickness by this id, from this map like this thicknesses[4], if thickness input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Read about important behavior. function nodal_support(no, name, multiplicity_counter_key) Function creates input field for Nodal Support object, which exists in model. Arguments: no - script id of nodal support object. Nodal Support will be added to nodal_supports map. We can get nodal support by this id, from this map like this nodal_supports[4], if nodal support input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Nodal supports exists like input objects only. function line_support(no, name, multiplicity_counter_key) Function creates input field for Line Support object, which exists in model. Arguments: no - script id of line support objects. Line Support will be added to line_supports map. We can get line support by this id, from this map like this line_supports[4], if line support input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Line supports exists like input objects only. function member_support(no, name, multiplicity_counter_key) Function creates input field for Member Support object, which exists in model. Arguments: no - script id of member support objects. Member Support will be added to member_supports map. We can get member support by this id, from this map like this member_supports[4], if member support input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Member supports exists like input objects only. function surface_support(no, name, multiplicity_counter_key) Function creates input field for Surface Support object, which exists in model. Arguments: no - script id of surface support objects. Member Support will be added to surface_supports map. We can get surface support by this id, from this map like this surface_supports[4], if surface support input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Surface supports exists like input objects only. function load_case(no, name, multiplicity_counter_key) Function creates input field for Load Case object, which exists in model. Load case fields should be located in loading category. Arguments: no - script id of load case objects. Load Case will be added to load_cases map. We can get load case by this id, from this map like this load_cases[4], if load case input field was created with script id 4. name - name of parameter in input table multiplicity_counter_key - key of counter, which was created by function parameter_int() function. Note Load cases exists like input objects only. function parameter_check(name, key, value) Function creates input field for checkbox, which can have true or false value. Arguments: name - name of parameter in input table key - key of parameter for using in visibility conditions in input table. It means, checkbox value can show or hide some input fields in the input table. value - default value. function condition(value) Function set visibility condition to parameter or category, which was added to input table in input_data() function. It affects on parameter or category, after which this function was called. Arguments: value - string with condition function editable_condition(value) Function set editable condition to parameter, which was added to input table in input_data() function. It affects on parameter or category, after which this function was called. It means, when condition is true, then user can edit parameter, otherwise parameter is read only for user. Arguments: value - string with condition function editable(value) Function set editable condition to parameter, which was added to input table in input_data() function. It affects on parameter or category, after which this function was called. It means, that parameter will be read only if value is false. Arguments: value - boolean value function combobox(name, key) Function creates combobox input field. Arguments: name - Name of field key - key used like variable name of combobox in conditions and generate() functions. It need for equal operations with possible combobox values. function combobox_value(name, key, is_default) Function add popup combobox value to combobox, which was added to input table in input_data() function. It affects on combobox, after which this ### function was called. Can be used for comboboxes only. Arguments: name - name of value key - string value for using in script and conditions is_default - if true, then this value will be set like default value in combobox. function set_global_parameter(value) Set binding to global parameter to last created input parameter. These function should be used for float and integer input fields. Arguments: value - name of global parameter Example function input_data() { category(\"Geometry\"); parameter_float(\"Offset\", \"offset\", \"\", 1.0, UNIT.LENGTH, 0.0, 1, NAN, false, false); set_global_parameter(\"offset\"); } generate() In the generate function user can use variable axesUp for getting information of global axes orientation. In this function can used following functions: function ASSERT(result, message) Basic objects function Material(no, name, comment, params) function Thickness(no, name, material/, uniform_thickness_d, comment, params) function Section(no, name, material, comment, params) function Node(no, coordiate_X, coordinate_Y, coordinate_Z, comment, params) function Line(no, nodes, comment, params) function Member(no, nodes, comment, params) function Surface(no, boundary_lines, thickness, comment, params) function Solid(no, boundary_surfaces, material, comment, params) function Opening(no, boundary_lines, comment, params) function LineSet(no, lines, comment, params) function MemberSet(no, members, comment, params) function SurfaceSet(no, surfaces, comment, params) function SolidSet(no, solids, comment, params) Loads function NodalLoad(no, load_case, nodes, comment/, params) function LineLoad(no, load_case, lines, comment, params/) function MemberLoad(no, load_case, members, comment, params) function SurfaceLoad(no, load_case, surfaces, comment/, params) function SolidLoad(no, load_case, solids, comment, params) function OpeningLoad(no, load_case, openings, comment, params) function LineSetLoad(no, load_case, line_sets, comment, params) function MemberSetLoad(no, load_case, member_sets, comment, params) function SurfaceSetLoad(no, load_case, surface_sets, comment, params) function SolidSetLoad(no, load_case, solid_sets, comment, params) function FreeConcentratedLoad(no, load_case, surfaces, comment, params) function FreeLineLoad(no, load_case, surfaces, comment, params) function FreeRectangularLoad(no, load_case, surfaces, comment, params) function FreeCircularLoad(no, load_case, surfaces, comment, params) function FreePolygonLoad(no, load_case, surfaces, comment, params) function ImposedLineDeformation(no, load_case, lines, comment, params) function ImposedNodalDeformation(no, load_case, nodes, comment, params) Dimensions function AngularDimension(no, object_1, object_2, reference_object_type, symbol, offset, quadrant, comment, params) function ArcLengthDimension(no, line, symbol, offset, comment, params) function DiameterDimension(no, line, symbol, position, comment, params) function LinearDimension(no, object_1, object_2, reference, symbol, offset, comment, params) function RadiusDimension(no, line, symbol, offset, position, comment, params) function SlopeDimension(no, object, symbol, offset, position, direction, plane, comment, params) Types For Lines function LineHinge(no, surface, lines, comment, params) function LineMeshRefinement(no, comment, params) Types For Members function MemberDefinableStiffness(no, comment, params) function MemberEccentricity(no, member_start, member_end, comment, params) function MemberHinge(no, member_start, member_end, comment, params) function MemberNonlinearity(no, comment, params) function MemberResultIntermediatePoint(no, comment, params) function MemberStiffnessModification(no, comment, params) function MemberTransverseStiffener(no, comment, params) Types For Nodes function NodalMeshRefinement(no, comment, params) Types For Surfaces function SurfaceEccentricity(no, surface, comment, params) function SurfaceMeshRefinement(no, comment, params) Guide Objects function CoordinateSystem(no, coordinate_system_type, comment, params) Return value from generate function If some values should be calculated during the generate function, these values can be set to input parameters via return dictionary from generate function. For example function generate() { // If block calculate some parameters, we should create dictionary variable // For example: var calculated_parameters = {}; // Set calculated variable after calculation: calculated_parameters['alpha_info'] = alpha; // And return it on the end point of script: return calculated_parameters; var calculated_parameters = {}; // 'inclination_via' has three options if (inclination_via == \"define_height\") // input by inclination_via = \"Define height\" { alpha = atan(2*H/a); s = 2*H/a; } if (inclination_via == \"define_angle\") // input by inclination_via = \"Define angle\" { H = 0.5*a*tan(alpha); s = tan(alpha); } if (inclination_via == \"define_slope\") // input by inclination_via = \"Define slope\" { H = 0.5*s*a; alpha = atan(s); } // 'stiffener_via' has three options if (stiffener_via == \"define_plan_projection\") // input by stiffener_via = \"Plan projection\" { H_1 = 2*H*a_1/a; l_1 = sqrt(sqr(a_1) + sqr(2*H*a_1/a)); } if (stiffener_via == \"define_vertical_projection\") // input by stiffener_via = \"Vertical projection\" { a_1 = 0.5*a*H_1/H; l_1 = sqrt(sqr(H_1) + sqr(0.5*a*H_1/H)); } if (stiffener_via == \"define_length\") // input by stiffener_via = \"Length\" { a_1 = a*l_1/sqrt(sqr(a) + 4*sqr(H)); H_1 = H*l_1/sqrt(sqr(H) + 0.25*sqr(a)); } // Set calculated variables to dictionary after calculation calculated_parameters['H'] = H; calculated_parameters['alpha'] = alpha; calculated_parameters['s'] = s; calculated_parameters['a_1'] = a_1; calculated_parameters['H_1'] = H_1; calculated_parameters['l_1'] = l_1; return calculated_parameters; } In this case calculated_parameters contains several input parameters, which was calculated during the generation. It needs in case, when one input parameter can be set, but several other parameters are read only, depends on first parameter and should be set to input table like as actual state of block. Block 001337 has example of behavior. Important behavior of loads All loads (such as line loads, nodal loads etc.) from different load cases will be add to same map. Therefore all loads should get different script id. For example nodal load from load case 1 get script id 1, nodal load from load case 3 get script id 2 and etc. After creating we can get nodal loads: nodal_loads[1] - nodal loads from load case 1 nodal_loads[2] - nodal loads from load case 3 Code example function generate() { var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = NodalLoad(1, live_load_case); live_load.comment = \"Live Load\"; } var snow_load_case = load_cases[2]; if (snow_load_case) // Check if load case exists in map, if no, it means snow load category or loading category are disabled. { var snow_load = NodalLoad(2, snow_load_case); // It is not possible to set up id 1, because of id 1 will be set for load from live load case snow_load .comment = \"SnowLoad\"; } } function ASSERT(result, message) Function for send assert message from generate() function. If result is false, then script engine send message to gui and stop script evaluation. ASSERT can be used for control complex conditions of input parameters, which can not be control by standard logic. Arguments: result - boolean value message - string value, with message for user. Example function input_data() { category(\"Parameters\"); parameter_int(\"Frame count\", \"n\", \"\", 4, UNIT.NONE, 1, 1, 100, false, false); // Create input field with \"n\" counter } function generate() { // Check \"n\" counter with ASSERT ASSERT(n > 1, \"Number of frames must be positive\"); } function Material(no, name, comment, params) Create material with selected script id inside the blok. User id will be selected from available ideces in model. But in the script we can use selected id. Objects will be added to materials map. Arguments: no - the number of object in block script name - the name of object, (undefined if not set) comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) var params = { \"comment\": \"Comment via parameters\" }; Example function generate() { var params = { \"comment\": \"Comment via parameters\" }; Material(4, undefined, \"Material 4\", params); // or var material = Material(10); material.comment = \"Material\"; materials[10].comment = \"Material 10\"; } function Thickness(no, name, material, uniform_thickness_d, comment, params) Create thickness with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to thicknesses map. Arguments: no - the number of object in block script name - the name of object, (undefined if not set) material - material object, which should be set to thickness, (undefined if not set) uniform_thickness_d - uniform float value, (0.2 if undefined) comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) var params = { \"comment\": \"Comment via parameters\" }; Example function generate() { var params = { \"comment\": \"Comment via parameters\" }; Thickness(4, \"Thickness name\", materials[2], undefined, \"Thickness 4\", params); // or var thickness = Thickness(10); thickness .comment = \"Thickness \"; thicknesses[10].comment = \"Thickness 10\"; } function Section(no, name, material, comment, params) Create section with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to sections map. Arguments: no - the number of object in block script name - the name of object, (undefined if not set) material - material object, (undefined if not set) comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) var params = { \"comment\": \"Comment via parameters\" }; Example function generate() { var params = { \"comment\": \"Comment via parameters\" }; Material(1); Section(1, \"Section 1\", materials[1], \"Section 1\", params); } function Node(no, coordinate_X, coordinate_Y, coordinate_Z, comment, params) Create node with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to nodes map. Arguments: no - the number of object in block script coordinate_X - x coordinate (0.0 if not set) coordinate_Y - y coordinate (0.0 if not set) coordinate_Z - z coordinate (0.0 if not set) comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) var params = { \"comment\": \"Comment via parameters\" }; Example function generate() { var params = { \"comment\": \"Comment via parameters\" }; Node(1, 0.5, 0.6, 0.7, \"Node 1\", params); } function Line(no, nodes, comment, params) Create line with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to lines map. no - the number of object in block script nodes - object or object id in block script comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) var params = { \"comment\": \"Comment via parameters\" }; Example function generate() { var params = { \"comment\": \"Comment via parameters\" }; Node(1); Node(2); Line(1, [1, 2], \"Comment\", params); // or Node(3); Node(4); Line(2, [nodes[3], nodes[4]], undefined, params); lines[2].comment = \"Line 2\"; } function Member(no, nodes, comment, params) Create member with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to members map. Arguments: no - the number of object in block script nodes - list of nodes or numbers of node sin block script comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { var params = { \"comment\": \"Comment via parameters\" }; Node(1); Node(2); Member(1, [1, 2], \"Member 1\", params); } Caution If Member created in RFEM, with Member will be created Line with same id. It means when we create member number 3, in same time will be created line number 3. function Surface(no, boundary_lines, thickness, comment, params) Create surface with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to surfaces map. Arguments: no - the number of object in block script boundary_lines - list of boundary lines or numbers of lines in block script thickness - thickness object comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { for (var i = 1; i <= 4; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [5, 6]); var params = { \"comment\": \"Comment via parameters\" }; Surface(1, [1, 2, 3, 4], thicknesses[1], \"Surface 1\", params); } function Solid(no, boundary_surfaces, material, comment, params) Create solid with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to solids map. no - the number of object in block script boundary_surfaces - list of surfaces or numbers of surfaces in block script material - material object comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { for (var i = 1; i <= 8; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [4, 1]); Line(5, [1, 5]); Line(6, [2, 6]); Line(7, [3, 7]); Line(8, [4, 8]); Line(9, [5, 6]); Line(10, [6, 7]); Line(11, [7, 8]); Line(12, [8, 5]); Surface(1, [1, 2, 3, 4]); Surface(2, [1, 5, 6, 9]); Surface(3, [2, 6, 7, 10]); Surface(4, [3, 7, 8, 11]); Surface(5, [4, 8, 5, 12]); Surface(6, [9, 10, 11, 12]); var params = { \"comment\": \"Comment via parameters\" }; Solid(1, [1, 2, 3, 4, 5, 6], materials[1], \"Solid 1\", params); } function Opening(no, boundary_lines, comment, params) Create opening with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to openings map. Arguments: no - the number of object in block script boundary_lines - list of boundary lines or numbers of lines in block script comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { for (var i = 1; i <= 8; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [4, 1]); Line(5, [5, 6]); Line(6, [6, 7]); Line(7, [7, 8]); Line(8, [8, 5]); Surface(1, [1, 2, 3, 4]); var params = { \"comment\": \"Comment via parameters\" }; Opening(2, [5, 6, 7, 8], \"\"Opening 1\", params); } function LineSet(no, lines, comment, params) Create line set with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to line_sets map. Arguments: no - the number of object in block script lines - list of lines or numbers of lines in block script comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { for (var i = 1; i <= 4; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); var params = { \"comment\": \"Comment via parameters\" }; LineSet(1, [1, 2, 3], \"Line Set 1\", params); } function MemberSet(no, members, comment, params) Create member set with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to member_sets map. Arguments: no - the number of object in block script lines - list of members or numbers of members in block script comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { for (var i = 1; i <= 4; ++i) { Node(i); } Member(1, [1, 2]); Member(2, [2, 3]); Member(3, [3, 4]); var params = { \"comment\": \"Comment via parameters\" }; MemberSet(1, [1, 2, 3], \"Member Set 1\", params); } function SurfaceSet(no, surfaces, comment, params) Create surface set with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to surface_sets map. Arguments: no - the number of object in block script lines - list of surfaces or numbers of surfaces in block script comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { for (var i = 1; i <= 6; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [4, 1]); Line(5, [3, 6]); Line(6, [5, 6]); Line(7, [4, 5]); Surface(1, [1, 2, 3, 4]); Surface(2, [3, 5, 6, 7]); var params = { \"comment\": \"Comment via parameters\" }; SurfaceSet(1, [1, 2], \"Surface Set 1\", params); } function SolidSet(no, solids, comment, params) Create solid set with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to solid_sets map. Arguments: no - the number of object in block script solids - list of solids sor numbers of solids in block script comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function generate() { // code of solids generating var params = { \"comment\": \"Comment via parameters\" }; SolidSet(1, [1, 2], \"Solid Set 1\", params); } function NodalLoad(no, load_case, nodes, comment, params) Create nodal load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to nodal_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load nodes - nodes with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 10; i++) { Node(i); nodes[i].coordinates = $V(i, 0, 0); } var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var nodes_to_load = []; for (var i = 1; i < 10; ++i) { nodes_to_load.push(nodes[i]); } var params = { \"load_type\": model.nodal_loads.LOAD_TYPE_COMPONENTS, \"components_force_x\": 1.0, \"components_force_y\": 2.0, \"components_force_z\": 3 } NodalLoad(1, live_load_case, nodes_to_load, \"Live Load\", params); } } Caution All nodal loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function LineLoad(no, load_case, lines, comment, params) Create line load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to line_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load lines - lines with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { Node(1); Node(2); Node(3); Line(1, [1, 2]); Line(2, [2, 3]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = LineLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.lines = [1, 2]; } } Caution All line loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function MemberLoad(no, load_case, members, comment, params) Create member load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to member_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load members - members with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { Node(1); Node(2); Node(3); Member(1, [1, 2]); Member(2, [2, 3]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = MemberLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.members = [1, 2]; } } Caution All member loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function SurfaceLoad(no, load_case, surfaces, comment, params) Create surface load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to surface_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load surfaces - surfaces with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 4; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [5, 6]); Surface(1, [1, 2, 3, 4]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = SurfaceLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.surfaces = [1]; } } Caution All surface loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function SolidLoad(no, load_case, solids, comment, params) Create solid load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to solid_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load solids - solids with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 8; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [4, 1]); Line(5, [1, 5]); Line(6, [2, 6]); Line(7, [3, 7]); Line(8, [4, 8]); Line(9, [5, 6]); Line(10, [6, 7]); Line(11, [7, 8]); Line(12, [8, 5]); Surface(1, [1, 2, 3, 4]); Surface(2, [1, 5, 6, 9]); Surface(3, [2, 6, 7, 10]); Surface(4, [3, 7, 8, 11]); Surface(5, [4, 8, 5, 12]); Surface(6, [9, 10, 11, 12]); Solid(1, [1, 2, 3, 4, 5, 6]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = SolidLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.solids = [1]; } } Caution All solid loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function OpeningLoad(no, load_case, openings, comment, params) Create opening load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to opening_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load openings - openings with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 8; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [4, 1]); Line(5, [5, 6]); Line(6, [6, 7]); Line(7, [7, 8]); Line(8, [8, 5]); Surface(1, [1, 2, 3, 4]); Opening(2, [5, 6, 7, 8]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = OpeningLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.openings = [2]; } } Caution All opening loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function LineSetLoad(no, load_case, line_sets, comment, params) Create line set load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to line_set_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load line_sets - line sets with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 4; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); LineSet(1, [1, 2, 3]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = LineSetLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.line_sets = [1]; } } Caution All line set loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function MemberSetLoad(no, load_case, member_sets, comment, params) Create member set load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to member_set_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load member_sets - member sets with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 4; ++i) { Node(i); } Member(1, [1, 2]); Member(2, [2, 3]); Member(3, [3, 4]); MemberSet(1, [1, 2, 3]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = MemberSetLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.member_sets = [1]; } } Caution All member set loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function SurfaceSetLoad(no, load_case, surface_sets, comment, params) Create surface set load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to surface_set_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load surface_sets - surface sets with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 6; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [4, 1]); Line(5, [3, 6]); Line(6, [5, 6]); Line(7, [4, 5]); Surface(1, [1, 2, 3, 4]); Surface(2, [3, 5, 6, 7]); SurfaceSet(1, [1, 2]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = SurfaceSetLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.surface_sets = [1]; } } Caution All surface set loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function SolidSetLoad(no, load_case, solid_sets, comment, params) Create solid set load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to solid_set_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load solid_sets - solid sets with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = SolidSetLoad(1, live_load_case); live_load.comment = \"Live Load\"; } } Caution All solid set loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function FreeConcentratedLoad(no, load_case, surfaces, comment, params) Create free concentrated load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to free_concentrated_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load surfaces - surfaces with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { for (var i = 1; i <= 4; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [5, 6]); Surface(1, [1, 2, 3, 4]); var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = FreeConcentratedLoad(1, live_load_case); live_load.comment = \"Live Load\"; live_load.surfaces = [1]; } } Caution All free concentrated loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function FreeLineLoad(no, load_case, surfaces, comment, params) Create free line load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to free_line_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load surfaces - surfaces with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = FreeLineLoad(1, live_load_case); live_load.comment = \"Live Load\"; } } Caution All free line loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function FreeRectangularLoad(no, load_case, surfaces, comment, params) Create free rectangular load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to free_rectangular_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load surfaces - surfaces with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = FreeRectangularLoad(1, live_load_case); live_load.comment = \"Live Load\"; } } Caution All free rectangular loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function FreeCircularLoad(no, load_case, surfaces, comment, params) Create free circular load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to free_circular_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load surfaces - surfaces with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = FreeCircularLoad(1, live_load_case); live_load.comment = \"Live Load\"; } } Caution All free circular loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function FreePolygonLoad(no, load_case, surfaces, comment, params) Create free polygon load with selected script id inside the block. User id will be selected from available indexes in model. But in the script we can use selected id. Objects will be added to free_polygon_loads map. For creating load should be used load case. Load cases can be selected from load_cases map, in which its added from input parameters only. Arguments: no - the number of object in block script load_case - load case in which will be created load surfaces - surfaces with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) Example function input_data() { var LOADING_CATEGORY = loading_category(\"Loading\"); // Add loading category to block on first level parameter_check(\"Live Load\", \"live_load_checkbox\", true); // Add checkbox for enabling of live load case category(\"Live Load\", false, LOADING_CATEGORY); // Add category Live Load, which contains load case input field condition(\"live_load_checkbox == true\"); // Set condition for enabling of Live Load Category load_case(1, \"Load Case\"); // Add load case input field to Live Load category } function generate() { var live_load_case = load_cases[1]; if (live_load_case) // Check if load case exists in map, if no, it means live load category or loading category are disabled. { var live_load = FreePolygonLoad(1, live_load_case); live_load.comment = \"Live Load\"; } } Caution All free polygon loads from different load cases will be add to same map. Therefore all loads should get different script id. Read more about important behavior of loads. function ImposedLineDeformation(no, load_case, lines, comment, params) Arguments: no - the number of object in block script load_case - load case in which will be created load lines - lines with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) function ImposedNodalDeformation(no, load_case, nodes, comment, params) Arguments: no - the number of object in block script load_case - load case in which will be created load nodes - nodes with loads comment - the comment for object, (undefined if not set) params - the dictionary of optional parameters. Name of parameter should be equal to property name of current object, (undefined if not set) function AngularDimension(no, object_1, object_2, reference_object_type, symbol, offset, quadrant, comment, params) Function creates angular dimension and add it do dimensions map. Arguments: no - script id object_1 - first reference object, like Node for example object_2 - second reference object, like Node for example reference_object_type - object type, possible values(right values you will find in RFEM, able to change in future): model.dimensions.REFERENCE_TYPE_NODE model.dimensions.REFERENCE_TYPE_POINT model.dimensions.REFERENCE_TYPE_POINT_ON_LINE model.dimensions.REFERENCE_TYPE_LINE model.dimensions.REFERENCE_TYPE_MEMBER model.dimensions.REFERENCE_TYPE_SURFACE symbol - string value offset - float value quadrant - possible values(right values you will find in RFEM, able to change in future): model.dimensions.ANGULAR_QUADRANT_POSITIVE model.dimensions.ANGULAR_QUADRANT_NEGATIVE model.dimensions.ANGULAR_QUADRANT_LEFT model.dimensions.ANGULAR_QUADRANT_RIGHT comment - comment params - dictionary with property names and values Examples Example 1 Creating angular dimension with objects with same reference type via positional parameters. AngularDimension(18, members[3], members[4], model.dimensions.REFERENCE_TYPE_MEMBER, \"A\", offset, model.dimensions.ANGULAR_QUADRANT_POSITIVE); Example 2 Creating angular dimension with the objects via optional parameter reference_table. var reference_table = [ [members[1], model.dimensions.REFERENCE_TYPE_MEMBER], [members[2], model.dimensions.REFERENCE_TYPE_MEMBER], ]; AngularDimension(16, undefined, undefined, undefined, \"A\", offset, model.dimensions.ANGULAR_QUADRANT_POSITIVE, \"\", {'reference_table': reference_table}); Example 3 Creating angular dimension with object with positional parameter and optional parameter reference_table. var reference_table = [ [members[3], model.dimensions.REFERENCE_TYPE_MEMBER], ]; AngularDimension(17, members[2], undefined, model.dimensions.REFERENCE_TYPE_MEMBER, \"A\", offset, model.dimensions.ANGULAR_QUADRANT_POSITIVE, \"\", {'reference_table': reference_table}); Example 4 Creating angular dimension with coordinates and some object via positional parameters. Creating angular dimension with objects with same reference type via positional parameters. AngularDimension(18, [3, 5, 2], members[4], model.dimensions.REFERENCE_TYPE_MEMBER, \"A\", offset, model.dimensions.ANGULAR_QUADRANT_POSITIVE); Caution If you use positional parameters, you can't use reference object with different types. The following example is bad. Because of second positional parameter is a Node, but function wait Member, by positional parameter 4 (model.dimensions.REFERENCE_TYPE_MEMBER). AngularDimension(18, nodes[2], members[4], model.dimensions.REFERENCE_TYPE_MEMBER, \"A\", offset, model.dimensions.ANGULAR_QUADRANT_POSITIVE); function ArcLengthDimension(id, line, symbol, offset, comment, params) Function creates arc length dimension and add it to dimensions map. Arguments: no - object id in script line - line object, or line id in block script symbol - string value offset - float value comment - comment params - dictionary with property names and values function DiameterDimension(no, line, symbol, position, comment, params) Function creates diameter dimension and add it to dimensions map. Arguments: no - object id in block script, which used in block generation line - line object, or line id in block script (different from user id in model) symbol - string value position - float value comment - comment params - dictionary with property names and values function LinearDimension(no, object_1, object_2, reference, symbol, offset, comment, params) Function creates linear dimension and add it to dimensions map. Arguments: no - object id in block script, which used in block generation object_1 - first reference object object_2 - second reference object reference - String, possible values: \"x\" \"y\" \"z\" \"xy\" \"xz\" \"yx\" \"yz\" \"zx\" \"zy\" symbol - string value offset - float value comment - comment params - dictionary with property names and values Examples // linear dimension via points LinearDimension(1, [1, 2, 3], [3, 4, 5]); // linear dimension via nodes LinearDimension(2, nodes[1], nodes[2]); // linear dimension via node and control point // Control points had not separate map of objects, but can be get from object properties of another objects, in which was created. LinearDimension(3, nodes[1], lines[1].arc_control_point_object); // And you can combine points, nodes and control points in these *Arguments:* object_1, object_2 function RadiusDimension(no, line, symbol, offset, position, comment, params) Function creates radius dimension and add it to dimensions map. Arguments: no - object id in block script line - line object symbol - string value offset - float value position - float value comment - comment params - dictionary with property names and values function SlopeDimension(no, object, symbol, offset, position, direction, plane, comment, params) Function creates slope dimension and add it to dimensions map. Arguments: no - object id in block's script object - line or member object, depends on program type. line for RFEM and member for RSTAB symbol - String offset - Float position - Float direction - String, possible values: \"up\" \"upward\" \"down\" \"downward\" plane - String, possible values: \"xy\" \"yz\" \"xz\" comment - comment params - dictionary with property names and values function LineHinge(no, surface, lines, comment, params) Function creates line hinge and add it to line_hinges map. Arguments: no - object id in block's script surface - surface with lines, which should get this hinge lines - lines, which should get this hinge comment - comment params - dictionary with property names and values Example Node(1); Node(2); Line(1, [1, 2]); LineHinge(1, lines[1], lines[2]); function LineMeshRefinement(no, comment, params) Function creates line mesh refinement and add it to line_mesh_refinements map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function MemberDefinableStiffness(no, comment, params) Function creates member definable stiffness and add it to member_definable_stiffnesses map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function MemberEccentricity(no, member_start, member_end, comment, params) Function creates member eccentricity and add it to member_eccentricities map. Arguments: no - object id in block's script member_start - member, which should get this member eccentricity, like start member eccentricity member_end - member, which should get this member eccentricity, like end member eccentricity comment - comment params - dictionary with property names and values Example Node(1); Node(2); Member(1, [1, 2], \"Member 1\", params); MemberEccentricity(1, members[1], members[1]); function MemberHinge(no, member_start, member_end, comment, params) Function creates member hinge and add it to member_hinges map. Arguments: no - object id in block's script member_start - member, which should get this member hinge , like start member hinge member_end - member, which should get this member hinge , like end member hinge comment - comment params - dictionary with property names and values Examples Example 1 Node(1); Node(2); Member(1, [1, 2], \"Member 1\", params); MemberHinge(1, members[1], members[1]); Example 2 Add member hinge to several members. MemberHinge(1); members[1].member_hinge_start = member_hinges[1]; members[1].member_hinge_end= member_hinges[1]; members[2].member_hinge_start = member_hinges[1]; members[2].member_hinge_end= member_hinges[1]; members[3].member_hinge_start = member_hinges[1]; members[3].member_hinge_end= member_hinges[1]; var member_hinge = MemberHinge(2); members[4].member_hinge_start = member_hinge; members[4].member_hinge_end= member_hinge; members[5].member_hinge_start = member_hinge; members[5].member_hinge_end= member_hinge; members[6].member_hinge_start = member_hinge; members[6].member_hinge_end= member_hinge; function MemberNonlinearity(no, comment, params) Function creates member nonlinearities and add it to member_nonlinearities map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function MemberResultIntermediatePoint(no, comment, params) Function creates member result intermediate point and add it to member_result_intermediate_points map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function MemberStiffnessModification(no, comment, params) Function creates member sitffness modification and add it to member_stiffness_modifications map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function MemberTransverseStiffener(no, comment, params) Function creates member transverse stiffener and add it to member_transverse_stiffeners map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function NodalMeshRefinement(no, comment, params) Function creates nodal mesh refinement and add it to nodal_mesh _refinements map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function SurfaceEccentricity(no, surface, comment, params) Function creates surface eccentricity and add it to surface_eccentricities map. Arguments: no - object id in block's script surface - surface, which should get this eccentricity comment - comment params - dictionary with property names and values Example for (var i = 1; i <= 4; ++i) { Node(i); } Line(1, [1, 2]); Line(2, [2, 3]); Line(3, [3, 4]); Line(4, [5, 6]); var params = { \"comment\": \"Comment via parameters\" }; Surface(1, [1, 2, 3, 4], thicknesses[1], \"Surface 1\", params); SurfaceEccentricity(1, surfaces[1]); function SurfaceMeshRefinement(no, comment, params) Function creates surface mesh refinement and add it to surface_mesh _refinement s map. Arguments: no - object id in block's script comment - comment params - dictionary with property names and values function CoordinateSystem(no, coordinate_system_type, comment, params) Function creates coordinate system and add it to *coordinate_systems map. Arguments: no - object id in block's script coordinate_system_type - set type of coordinate system. Possible values model.coordinate_systems.TYPE_OFFSET_XYZ model.coordinate_systems.TYPE_3_POINTS model.coordinate_systems.TYPE_2_POINTS_AND_ANGLE model.coordinate_systems.TYPE_POINT_AND_3_ANGLES comment - comment params - dictionary with property names and values Example Node(1, 0.5, 0, 0); Node(2, 0.5, 1, 0); var coordinate_system_params = { \"origin_coordinates\": [0, 0, 0], \"u_axis_point_coordinates\": [1, 0, 0], \"uw_plane_point_coordinates\": [0, 0, 1] } CoordinateSystem(1, model.coordinate_systems.TYPE_3_POINTS, undefined, coordinate_system_params); var linear_dimension_params = { \"linear_coordinate_system\": coordinate_systems[1], }; LinearDimension(1, nodes[1], nodes[2], \"zx\", \"\", 1, undefined, linear_dimension_params); model variable In script of block user can use variable model for getting constants, which exists in RFEM/RSTAB. For example: function generated() { var live_load = NodalLoad(1, live_load_case); live_load.load_type = model.nodal_loads.LOAD_TYPE_COMPONENTS; // Get constant from RFEM via model } UNIT Units, which can be used in integer and floats parameters. list of units Example List of units UNIT.NONE UNIT.EG_MODULE UNIT.STRESSES UNIT.MATERIAL_SPECIFIC_WEIGHT UNIT.THERMAL_EXPANSION_COEFFICIENT UNIT.DENSITY UNIT.POISSONS_RATIO UNIT.HARDENING_FACTOR UNIT.REFERENCE_ELEMENT_SIZE UNIT.MATERIAL_FACTOR UNIT.MATERIAL_THICKNESS UNIT.MATERIAL_DEFORMATION UNIT.STRAIN UNIT.GRAVITATIONAL_ACCELERATION UNIT.FRACTURE_ENERGY UNIT.MATERIAL_QUANTITY_INTEGER UNIT.MATERIAL_ANGLE // SUBCATEGORY_MATERIALS_GAS UNIT.THERMAL_CONDUCTIVIY UNIT.GAS_DENSITY UNIT.MATERIAL_TEMPERATURE UNIT.GAS_PRESSURE UNIT.MOLAR_MASS UNIT.HEAT_CAPACITY UNIT.DYNAMIC_VISCOSITY UNIT.DYNAMIC_INCREASE_FACTOR UNIT.STRAIN_RATE // CATEGORY_SECTIONS // SUBCATEGORY_SECTIONS_GENERAL UNIT.SECTION_DIMENSION UNIT.SECTION_PERIMETER UNIT.SECTION_COMPLIANCE UNIT.SECTION_AREA UNIT.SECTION_ANGLE UNIT.SECTION_MOMENT_OF_INERTIA UNIT.SECTION_SECTION_FACTOR UNIT.SECTION_SECTION_MODULUS UNIT.SECTION_EFFECTIVE_SECOND_MOMENT_OF_AREA UNIT.SECTION_STATICAL_MOMENT_OF_AREA UNIT.SECTION_TENSION_FIELD_COEFFICIENT_1 UNIT.SECTION_TENSION_FIELD_COEFFICIENT_2 UNIT.SECTION_WARPING_CONSTANT UNIT.SECTION_NORMALIZED_WARPING_CONSTANT UNIT.SECTION_WARPING_STATICAL_MOMENT UNIT.SECTION_BIMOMENT UNIT.SECTION_FORCE UNIT.SECTION_MOMENT UNIT.SECTION_UNIT_STRESSES UNIT.SECTION_UNIT_WARPING_FUNCTION UNIT.SECTION_QUANTITY // SUBCATEGORY_SECTIONS_UNIT_PARAMETERS UNIT.SECTION_VOLUME UNIT.SECTION_SURFACE UNIT.SECTION_WEIGHT // SUBCATEGORY_SECTIONS_ADDON_CONCRETE UNIT.MATERIAL_HUMIDITY UNIT.SECTION_COEFFICIENT UNIT.MATERIAL_TIME UNIT.MATERIAL_COEFFICIENT UNIT.SECTION_STRAIN // CATEGORY_MODEL // SUBCATEGORY_MODEL_GENERAL UNIT.LENGTH UNIT.RSECTION_LENGTH UNIT.AREA UNIT.RSECTION_AREA UNIT.VOLUME UNIT.ANGLE UNIT.GEOGRAPHIC_COORDINATES UNIT.MASS UNIT.THICKNESS UNIT.TIME // SUBCATEGORY_MODEL_DIMENSIONLESS UNIT.DIMENSIONLESS UNIT.RELATIVE_LENGTH UNIT.PARTIAL_FACTOR UNIT.WEIGHT_AND_KNOT UNIT.RATIO UNIT.PRECISION_FACTOR UNIT.FRICTION_COEFFICIENT UNIT.STIFFNESS_MULTIPLICATION_FACTOR UNIT.QUANTITY UNIT.QUANTITY_WITH_FIXED_PRECISION // SUBCATEGORY_MODEL_SUPPORTS_ELASTIC_FOUNDATION_ORTHOTROPY UNIT.SPRING_STIFFNESS UNIT.SPRING_ROTATIONAL_STIFFNESS UNIT.LINE_SPRING_CONSTANT UNIT.LINE_SPRING_ROTATIONAL_STIFFNESS UNIT.SURFACE_SPRING_CONSTANT UNIT.SHEAR_SPRING_CONSTANT UNIT.ORTHOTROPY_BENDING_MOMENT UNIT.ORTHOTROPY_LINE_MOMENT UNIT.MASS_PER_UNIT_AREA UNIT.MASS_MOMENT_PER_UNIT_AREA UNIT.SURFACES_CONTACT_TYPE_SHEAR_STIFFNESS UNIT.SOLID_SHEAR_STIFFNESS // SUBCATEGORY_MODEL_MEMBER_TRANSVERSE_STIFFENERS UNIT.MEMBER_TRANSVERSE_STIFFENERS_WELD_SIZE // SUBCATEGORY_MODEL_MEMBER_MATRIX_STIFFNESS_ELEMENTS UNIT.MEMBER_BENDING_TORSION_STIFFNESS_ELEMENT UNIT.MEMBER_SHEAR_STIFFNESS_ELEMENT UNIT.MEMBER_ECCENTRIC_STIFFNESS_ELEMENT UNIT.MEMBER_DEVIATORIC_STIFFNESS_ELEMENT // SUBCATEGORY_MODEL_SURFACE_MATRIX_STIFFNESS_ELEMENTS UNIT.SURFACE_BENDING_TORSION_STIFFNESS_ELEMENT UNIT.SURFACE_SHEAR_STIFFNESS_ELEMENT UNIT.SURFACE_MEMBRANE_STIFFNESS_ELEMENT UNIT.SURFACE_ECCENTRIC_STIFFNESS_ELEMENT //SUBCATEGORY_MODEL_SURFACE_THICKNESS_LAYERS UNIT.SURFACE_SPECIFIC_WEIGHT UNIT.SURFACE_WEIGHT // CATEGORY_CONSTRUCTION_STAGES // SUBCATEGORY_CONSTRUCTION_STAGES_GENERAL UNIT.CONSTRUCTION_STAGES_TIME // CATEGORY_BUILDING_MODEL // SUBCATEGORY_BUILDING_MODEL_BUILDING_STORIES UNIT.BUILDING_STORIES_LENGTH UNIT.BUILDING_STORIES_AREA UNIT.BUILDING_STORIES_VOLUME UNIT.BUILDING_STORIES_MASS // SUBCATEGORY_BUILDING_MODEL_TIMBER_FRAME_WALL UNIT.TIMBER_FRAME_WALL_LENGTH UNIT.TIMBER_FRAME_WALL_THICKNESS UNIT.TIMBER_FRAME_WALL_CONNECTOR_DIMENSION UNIT.TIMBER_FRAME_WALL_CONNECTOR_SPACING // CATEGORY_LOADS // SUBCATEGORY_LOADS_LOADS UNIT.LOADS_FORCE UNIT.LOADS_MOMENT UNIT.LOADS_MASS UNIT.LOADS_DISPLACEMENT UNIT.LOADS_ROTATION UNIT.LOADS_LENGTH UNIT.LOADS_RELATIVE_LENGTH UNIT.LOADS_TEMPERATURE UNIT.LOADS_TEMPERATURE_CHANGE UNIT.LOADS_AXIAL_STRAIN UNIT.LOADS_FORCE_PER_UNIT_LENGTH UNIT.LOADS_MOMENT_PER_UNIT_LENGTH UNIT.LOADS_DISPLACEMENT_PER_UNIT_LENGTH UNIT.LOADS_ROTATION_PER_UNIT_LENGTH UNIT.LOADS_SURFACE_TYPE_LOAD UNIT.LOADS_SOLID_TYPE_LOAD UNIT.LOADS_DENSITY UNIT.LOADS_PRESSURE UNIT.SELF_WEIGHT_FACTOR UNIT.LOADS_PRECAMBER UNIT.LOADS_AREA_MASS UNIT.LOADS_IMPOSED_DISPLACEMENT UNIT.LOADS_IMPOSED_ROTATION UNIT.LOADS_ANGULAR_VELOCITY UNIT.LOADS_ANGULAR_ACCELERATION UNIT.LOADS_VELOCITY UNIT.LOADS_KINEMATIC_VISCOSITY UNIT.LOADS_KINETIC_ENERGY UNIT.LOADS_SPECIFIC_ENERGY // SUBCATEGORY_LOADS_LOAD_COMBINATIONS UNIT.LOADING_FACTOR // CATEGORY_IMPERFECTIONS // SUBCATEGORY_IMPERFECTIONS_GENERAL UNIT.IMPERFECTIONS_MAGNITUDE UNIT.IMPERFECTIONS_RELATIVE_LENGTH UNIT.IMPERFECTIONS_RATIO UNIT.IMPERFECTIONS_FORCE // CATEGORY_RESULTS // SUBCATEGORY_RESULTS_GENERAL UNIT.RESULTS_DISPLAY_FACTOR // SUBCATEGORY_RESULTS_RESULT_DIAGRAMS UNIT.RESULTS_RESULT_DIAGRAMS_SMOOTHING_FORCES UNIT.RESULTS_RESULT_DIAGRAMS_SMOOTHING_MOMENTS // SUBCATEGORY_RESULTS_DESIGN_OVERVIEW UNIT.RESULTS_DESIGN_OVERVIEW_DESIGN_RATIO // CATEGORY_DIMENSIONS // SUBCATEGORY_DIMENSIONS_GENERAL UNIT.DIMENSIONS_LENGTH UNIT.DIMENSIONS_ANGLE UNIT.DIMENSIONS_SLOPE UNIT.DIMENSIONS_ALTITUDE // CATEGORY_CONCRETE_REINFORCEMENT // SUBCATEGORY_CONCRETE_REFINFORCEMENT_GENERAL UNIT.CONCRETE_REINFORCEMENT_AREA UNIT.CONCRETE_REINFORCEMENT_DIAMETER UNIT.CONCRETE_REINFORCEMENT_CONCRETE_COVER UNIT.CONCRETE_REINFORCEMENT_LENGTH UNIT.CONCRETE_REINFORCEMENT_AREA_PER_UNIT_LENGTH UNIT.CONCRETE_REINFORCEMENT_AREA_PER_SQUARE_METER UNIT.CONCRETE_REINFORCEMENT_RATIO UNIT.CONCRETE_REINFORCEMENT_WEIGHT // SUBCATEGORY_CONCRETE_EFFECTIVE_LENGTHS UNIT.CONCRETE_EFFECTIVE_LENGTHS_FACTOR UNIT.CONCRETE_EFFECTIVE_LENGTHS_ECCENTRICITY // SUBCATEGORY_CONCRETE_DESIGN_GENERAL UNIT.CONCRETE_DESIGN_CRACK_WIDTHS UNIT.CONCRETE_DESIGN_DIMENSIONLESS UNIT.CONCRETE_TEMPERATURE UNIT.CONCRETE_DESIGN_PUNCHING_LENGTH UNIT.CONCRETE_DESIGN_RATIOS UNIT.CONCRETE_DURATION_OF_LONG_TERM_LOAD UNIT.CONCRETE_DURATION_OF_LOAD UNIT.CONCRETE_LIMIT_OF_ALLOWABLE_DEFLECTION // CATEGORY_STATIC_ANALYSIS // SUBCATEGORY_STATIC_ANALYSIS_GENERAL UNIT.STATIC_ANALYSIS_LOAD_INCREMENT_FACTORS UNIT.STATIC_ANALYSIS_DESIGN_RATIO // SUBCATEGORY_STATIC_ANALYSIS_DEFORMATIONS_AND_STRAINS UNIT.STATIC_ANALYSIS_DISPLACEMENT UNIT.STATIC_ANALYSIS_ROTATION UNIT.STATIC_ANALYSIS_WARPING UNIT.STATIC_ANALYSIS_AXIAL_AND_SHEAR_STRAIN UNIT.STATIC_ANALYSIS_TORSIONAL_AND_BENDING_STRAIN UNIT.STATIC_ANALYSIS_STRAIN_ANGLES // SUBCATEGORY_STATIC_ANALYSIS_SUPPORT_AND_INTERNAL_FORCES UNIT.STATIC_ANALYSIS_MEMBER_FORCE UNIT.STATIC_ANALYSIS_MEMBER_MOMENT UNIT.STATIC_ANALYSIS_MEMBER_BIMOMENT UNIT.STATIC_ANALYSIS_MEMBER_PRESSURE UNIT.STATIC_ANALYSIS_RIB_FORCE UNIT.STATIC_ANALYSIS_SURFACE_FORCE UNIT.STATIC_ANALYSIS_SURFACE_MOMENT UNIT.STATIC_ANALYSIS_ANGLES UNIT.STATIC_ANALYSIS_RESULTANT_FORCE UNIT.STATIC_ANALYSIS_RESULTANT_MOMENT // SUBCATEGORY_STATIC_ANALYSIS_STRESSES UNIT.STATIC_ANALYSIS_STRESSES_ON_SURFACES UNIT.STATIC_ANALYSIS_STRESSES_ON_SOLIDS // SUBCATEGORY_STATIC_ANALYSIS_ELASTIC_FOUNDATION UNIT.STATIC_ANALYSIS_MEMBER_CONTACT_FORCE UNIT.STATIC_ANALYSIS_MEMBER_CONTACT_MOMENT UNIT.STATIC_ANALYSIS_SURFACE_CONTACT_STRESS // SUBCATEGORY_STATIC_ANALYSIS_ADDON_CONCRETE UNIT.STATIC_ANALYSIS_TIME // SUBCATEGORY_STATIC_ANALYSIS_GAS, UNIT.STATIC_ANALYSIS_GAS_PRESSURE UNIT.STATIC_ANALYSIS_GAS_TEMPERATURE UNIT.STATIC_ANALYSIS_GAS_VOLUME // SUBCATEGORY_STATIC_ANALYSIS_CALCULATION_STATISTIC UNIT.STATIC_ANALYSIS_VALUES_OF_STIFFNESS_MATRIX_DIAGONAL_ELEMENTS UNIT.STATIC_ANALYSIS_STIFFNESS_MATRIX_DETERMINANT UNIT.STATIC_ANALYSIS_INFINITY_NORM // SUBCATEGORY_STATIC_ANALYSIS_OTHER, UNIT.STATIC_ANALYSIS_CRITERIA_RATIO // CATEGORY_STRESS_ANALYSIS // SUBCATEGORY_STRESS_ANALYSIS_GENERAL UNIT.STRESS_ANALYSIS_STRESSES UNIT.STRESS_ANALYSIS_STRAINS UNIT.STRESS_ANALYSIS_BENDING_STRAIN UNIT.STRESS_ANALYSIS_RATIOS //CATEGORY_RSECTION_RESULTS //SUBCATEGORY_RSECTION_RESULT_STRESSES UNIT.RSECTION_RESULT_LOCATIONS UNIT.RSECTION_RESULT_STRESSES UNIT.RSECTION_RESULT_RATIOS // CATEGORY_ALUMINUM_DESIGN // SUBCATEGORY_ALUMINUM_DESIGN_GENERAL UNIT.ALUMINUM_DESIGN_AXIAL_AND_SHEAR_STRAIN UNIT.ALUMINUM_DESIGN_TORSIONAL_AND_BENDING_STRAIN UNIT.ALUMINUM_DESIGN_STRESSES UNIT.ALUMINUM_DESIGN_RATIOS UNIT.ALUMINUM_DESIGN_GLOBAL_BUCKLING_SLENDERNESS_RATIOS // CATEGORY_STEEL_DESIGN // SUBCATEGORY_STEEL_DESIGN_GENERAL UNIT.STEEL_DESIGN_AXIAL_AND_SHEAR_STRAIN UNIT.STEEL_DESIGN_TORSIONAL_AND_BENDING_STRAIN UNIT.STEEL_DESIGN_STRESSES UNIT.STEEL_DESIGN_RATIOS UNIT.STEEL_DESIGN_GLOBAL_BUCKLING_SLENDERNESS_RATIOS UNIT.STEEL_DESIGN_LOCAL_BUCKLING_SLENDERNESS_RATIOS UNIT.STEEL_DESIGN_GENERAL_FACTORS UNIT.STEEL_DESIGN_PERCENTAGE // SUBCATEGORY_STEEL_DESIGN_RESULTS UNIT.STEEL_DESIGN_RESULTS_FACTORS UNIT.STEEL_DESIGN_RESULTS_MOMENT_RATIO // SUBCATEGORY_STEEL_DESIGN_FIRE_PROTECTION UNIT.STEEL_DESIGN_FP_TEMPERATURE UNIT.STEEL_DESIGN_FP_TIME UNIT.STEEL_DESIGN_FP_TIME_INTERVAL UNIT.STEEL_DESIGN_FP_UNIT_MASS UNIT.STEEL_DESIGN_FP_THERMAL_CONDUCTIVITY UNIT.STEEL_DESIGN_FP_SPECIFIC_HEAT UNIT.STEEL_DESIGN_FP_THICKNESS UNIT.STEEL_DESIGN_FP_COEF_OF_HEAT_TRANSFER UNIT.STEEL_DESIGN_FP_STEFAN_BOLTZMANN_CONSTANT // CATEGORY_STEEL_JOINTS // SUBCATEGORY_STEEL_JOINTS_GENERAL UNIT.STEEL_JOINTS_RATIOS UNIT.STEEL_JOINTS_PERCENTAGE UNIT.STEEL_JOINTS_PARTIAL_FACTORS // SUBCATEGORY_STEEL_JOINTS_GEOMETRY UNIT.STEEL_JOINTS_GEOMETRY_LENGTHS UNIT.STEEL_JOINTS_GEOMETRY_THICKNESSES UNIT.STEEL_JOINTS_GEOMETRY_ANGLES UNIT.STEEL_JOINTS_GEOMETRY_COORDINATES // SUBCATEGORY_STEEL_JOINTS_WELDS UNIT.STEEL_JOINTS_WELD_SIZES // SUBCATEGORY_STEEL_JOINTS_BOLTS UNIT.STEEL_JOINTS_BOLT_SECTION_AREAS UNIT.STEEL_JOINTS_BOLT_DIAMETER // SUBCATEGORY_STEEL_JOINTS_MISCELLANEOUS UNIT.STEEL_JOINTS_MISCELLANEOUS_VECTORS // CATEGORY_STEEL_OBJECTS // SUBCATEGORY_STEEL_OBJECTS_ROTATIONAL_RESTRAINTS UNIT.STEEL_OBJECTS_ROTATIONAL_RESTRAINTS_SPRING_STIFFNESS UNIT.STEEL_OBJECTS_ROTATIONAL_RESTRAINTS_ROTATIONAL_STIFFNESS // SUBCATEGORY_STEEL_OBJECTS_SHEAR_PANELS UNIT.STEEL_OBJECTS_SHEAR_PANELS_COEFFICIENT_K1 UNIT.STEEL_OBJECTS_SHEAR_PANELS_COEFFICIENT_K2 UNIT.STEEL_OBJECTS_SHEAR_PANELS_STIFFNESS // SUBCATEGORY_STEEL_OBJECTS_WELDS UNIT.STEEL_OBJECTS_WELD_SIZE // SUBCATEGORY_STEEL_OBJECTS_EFFECTIVE_LENGTHS UNIT.STEEL_OBJECTS_EFFECTIVE_LENGTHS_FACTORS UNIT.STEEL_OBJECTS_EFFECTIVE_LENGTHS_CRITICAL_MOMENT UNIT.STEEL_OBJECTS_EFFECTIVE_LENGTHS_TOLERANCE UNIT.STEEL_OBJECTS_EFFECTIVE_LENGTHS_SPRING UNIT.STEEL_OBJECTS_EFFECTIVE_LENGTHS_ROTATIONAL_STIFFNESS UNIT.STEEL_OBJECTS_EFFECTIVE_LENGTHS_WARPING UNIT.STEEL_OBJECTS_EFFECTIVE_LENGTHS_ECCENTRICITY // SUBCATEGORY_STEEL_OBJECTS_BOUNDARY_CONDITIONS UNIT.STEEL_OBJECTS_BOUNDARY_CONDITIONS_ECCENTRICITY UNIT.STEEL_OBJECTS_BOUNDARY_CONDITIONS_ROTATION UNIT.STEEL_OBJECTS_BOUNDARY_CONDITIONS_STIFFNESS UNIT.STEEL_OBJECTS_BOUNDARY_CONDITIONS_ROTATIONAL_STIFFNESS UNIT.STEEL_OBJECTS_BOUNDARY_CONDITIONS_WARPING // CATEGORY_TIMBER_DESIGN // SUBCATEGORY_TIMBER_DESIGN_GENERAL UNIT.TIMBER_DESIGN_AXIAL_AND_SHEAR_STRAIN UNIT.TIMBER_DESIGN_TORSIONAL_AND_BENDING_STRAIN UNIT.TIMBER_DESIGN_STRESSES UNIT.TIMBER_DESIGN_RATIOS UNIT.TIMBER_DESIGN_FACTORS UNIT.TIMBER_DESIGN_FP_TIME UNIT.TIMBER_DESIGN_FP_TIME_HOUR UNIT.TIMBER_DESIGN_LIFETIME UNIT.TIMBER_DESIGN_CHARRING_RATE // SUBCATEGORY_TIMBER_OBJECTS_EFFECTIVE_LENGTHS UNIT.TIMBER_OBJECTS_EFFECTIVE_LENGTHS_FACTORS UNIT.TIMBER_OBJECTS_EFFECTIVE_LENGTHS_CRITICAL_MOMENT UNIT.TIMBER_OBJECTS_EFFECTIVE_LENGTHS_SPRING UNIT.TIMBER_OBJECTS_EFFECTIVE_LENGTHS_ROTATIONAL_STIFFNESS UNIT.TIMBER_OBJECTS_EFFECTIVE_LENGTHS_WARPING UNIT.TIMBER_OBJECTS_EFFECTIVE_LENGTHS_ECCENTRICITY // SUBCATEGORY_TIMBER_OBJECTS_SHEAR_PANELS UNIT.TIMBER_OBJECTS_SHEAR_PANELS_COEFFICIENT_K1 UNIT.TIMBER_OBJECTS_SHEAR_PANELS_COEFFICIENT_K2 UNIT.TIMBER_OBJECTS_SHEAR_PANELS_STIFFNESS // SUBCATEGORY_TIMBER_OBJECTS_ROTATIONAL_RESTRAINTS UNIT.TIMBER_OBJECTS_ROTATIONAL_RESTRAINTS_SPRING_STIFFNESS UNIT.TIMBER_OBJECTS_ROTATIONAL_RESTRAINTS_ROTATIONAL_STIFFNESS // CATEGORY_ALUMINUM_OBJECTS // SUBCATEGORY_ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_FACTORS UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_CRITICAL_MOMENT UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_LATERAL_TORSIONAL_BUCKLING_MOMENT UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_TOLERANCE UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_SPRING UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_ROTATIONAL_STIFFNESS UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_WARPING UNIT.ALUMINUM_OBJECTS_EFFECTIVE_LENGTHS_ECCENTRICITY // SUBCATEGORY_ALUMINUM_OBJECTS_BOUNDARY_CONDITIONS UNIT.ALUMINUM_OBJECTS_BOUNDARY_CONDITIONS_ECCENTRICITY UNIT.ALUMINUM_OBJECTS_BOUNDARY_CONDITIONS_ROTATION UNIT.ALUMINUM_OBJECTS_BOUNDARY_CONDITIONS_STIFFNESS UNIT.ALUMINUM_OBJECTS_BOUNDARY_CONDITIONS_ROTATIONAL_STIFFNESS UNIT.ALUMINUM_OBJECTS_BOUNDARY_CONDITIONS_WARPING // SUBCATEGORY_ALUMINUM_OBJECTS_SHEAR_PANELS UNIT.ALUMINUM_OBJECTS_SHEAR_PANELS_COEFFICIENT_K1 UNIT.ALUMINUM_OBJECTS_SHEAR_PANELS_COEFFICIENT_K2 UNIT.ALUMINUM_OBJECTS_SHEAR_PANELS_STIFFNESS // SUBCATEGORY_ALUMINUM_OBJECTS_ROTATIONAL_RESTRAINTS UNIT.ALUMINUM_OBJECTS_ROTATIONAL_RESTRAINTS_SPRING_STIFFNESS UNIT.ALUMINUM_OBJECTS_ROTATIONAL_RESTRAINTS_ROTATIONAL_STIFFNESS // SUBCATEGORY_ALUMINUM_OBJECTS_WELDS UNIT.ALUMINUM_OBJECTS_WELD_SIZE // SUBCATEGORY_STABILITY_ANALYSIS_STABILITY_ANALYSIS UNIT.STABILITY_ANALYSIS_FACTORS UNIT.STABILITY_ANALYSIS_EIGENVECTORS UNIT.STABILITY_ANALYSIS_INITIAL_STRAIN //CATEGORY_DYNAMIC_ANALYSIS //SUBCATEGORY_DYNAMIC_ANALYSIS_GENERAL UNIT.DYNAMIC_ANALYSIS_GENERAL_ACCELERATIONS UNIT.DYNAMIC_ANALYSIS_GENERAL_ANGULAR_ACCELERATIONS UNIT.DYNAMIC_ANALYSIS_GENERAL_VELOCITIES UNIT.DYNAMIC_ANALYSIS_GENERAL_ANGULAR_VELOCITIES UNIT.DYNAMIC_ANALYSIS_GENERAL_MULTIPLIERS UNIT.DYNAMIC_ANALYSIS_GENERAL_FREQUENCIES UNIT.DYNAMIC_ANALYSIS_GENERAL_ROTATIONS UNIT.DYNAMIC_ANALYSIS_GENERAL_FACTORS UNIT.DYNAMIC_ANALYSIS_GENERAL_TIME UNIT.DYNAMIC_ANALYSIS_GENERAL_EIGENVECTORS UNIT.DYNAMIC_ANALYSIS_GENERAL_EIGENVALUES UNIT.DYNAMIC_ANALYSIS_GENERAL_ANGULAR_FREQUENCIES UNIT.DYNAMIC_ANALYSIS_GENERAL_DAMPING UNIT.DYNAMIC_ANALYSIS_GENERAL_COMBINATION_PERCENTAGE UNIT.DYNAMIC_ANALYSIS_GENERAL_G_FACTOR //SUBCATEGORY_DYNAMIC_ANALYSIS_MASSES UNIT.DYNAMIC_ANALYSIS_MASSES_MODAL_MASSES UNIT.DYNAMIC_ANALYSIS_MASSES_TRANSLATIONAL_MASSES UNIT.DYNAMIC_ANALYSIS_MASSES_ROTATIONAL_MASSES UNIT.DYNAMIC_ANALYSIS_MASSES_PERCENTAGE_EFFECTIVE_MODAL_MASSES UNIT.DYNAMIC_ANALYSIS_MASSES_ROTATIONAL_PARTICIPATION_FACTORS UNIT.DYNAMIC_ANALYSIS_MASSES_MODAL_MASS_FACTORS //CATEGORY_CRANEWAY_DESIGN //SUBCATEGORY_CRANEWAY_DESIGN_GENERAL UNIT.CRANEWAY_LENGTH UNIT.CRANEWAY_DESIGN_RATIOS Example function input_data() { category(\"Parameters\"); // Create input integer parameter without unit parameter_int(\"Frame count\", \"n\", \"\", 4, UNIT.NONE, 1, 1, 100, false, false); // Create input float parameter with Length unit parameter_float(\"Frame spacing\", \"d\" , \"\", 4.000, UNIT.LENGTH, 0.0, 1, MAXIMUM, false, false); } Multiplicity Examples Multiplicity parameters and categories are rows in objects, which created by counter. It means, if counter has value 5, then will be created 5 categories or 5 parameters, which depends on this counter. Using In name of parameter or category you can write special tag {{number}}, which will be changed to current number of parameter, object or category. category function input_data() { category(\"Heights Multiplicity Category\"); // Add counter, which manage multiplicity parameters parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); var MEMBER_SETTINGS_CATEGORY = category(\"Members settings\"); // Create multiplicity category // \"Multiplicity Group {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument category(\"Multiplicity Group {{number}}\", \"n\", MEMBER_SETTINGS_CATEGORY); } parameter_int function input_data() { // Add counter, which manage multiplicity parameters parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); // Add multiplicity integer parameter // \"Nodal Offset {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument // from key \"offset\" will be generated script names \"offset_1\", \"offset_2\", \"offset_3\" and etc. parameter_int(\"Nodal Offset {{number}}\", \"offset\", \"\", 2, UNIT.NONE, 1.0, 1.0, 50, false, false, \"n\"); } parameter_float function input_data() { // Add counter, which manage multiplicity parameters parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); // Add multiplicity integer parameter // \"Nodal Offset {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument // from key \"offset\" will be generated script names \"offset_1\", \"offset_2\", \"offset_3\" and etc. parameter_float(\"Nodal Offset {{number}}\", \"offset\", \"\", 2, UNIT.LENGTH, 1.0, 1.0, 50, false, false, \"n\"); } material, section, thickness, nodal_support, line_support, member_support, surface_support, load_case function input_data() { category(\"Heights Multiplicity Category\"); // Add counter, which manage multiplicity parameters parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); var MEMBER_SETTINGS_CATEGORY = category(\"Members settings\"); // Create multiplicity category // \"Multiplicity Group {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument category(\"Multiplicity Group {{number}}\", \"n\", MEMBER_SETTINGS_CATEGORY); // Add object input multiplicity field // 1 - start script id of objects // \"Section {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument section(1, \"Section {{number}}\", \"n\"); } When added two multiplicity object input fields, need to control collision of maximum created objects. For example, if add two fields of section, need to set maximum of counter. function input_data() { category(\"Heights Multiplicity Category\"); // Add counter, which manage multiplicity parameters with maximum 10 parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); var MEMBER_SETTINGS_CATEGORY = category(\"Members settings\"); // Create multiplicity category // \"Multiplicity Group {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument category(\"Multiplicity Group {{number}}\", \"n\", MEMBER_SETTINGS_CATEGORY); // Add first object input multiplicity field // 1 - start script id of objects, maximum id will be 10 // \"Section {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument section(1, \"Section {{number}}\", \"n\"); // Add second object input multiplicity field // 15 - start script id of objects, maximum id will be 24 // \"Section {{number}}\" - title with {{number}} tag // \"n\" - name of counter, last argument section(15, \"Section {{number}}\", \"n\"); } parameter_check, combobox, loading_category Not used in multiplicity Example function input_data() { // Add category with counter for multiplicity categories and parameters category(\"Heights Multiplicity Category\"); // Add counter parameter for multiplicity categories and parameters parameter_int(\"Multiplicity Counter\", \"n\", \"\", 2, UNIT.NONE, 1, 1, 10, true, true); // Add multiplicity parameter, which depends on \"n\" counter (last argument) parameter_float(\"Height {{number}}\", \"z\", \"\", 0, UNIT.LENGTH, 0.0, 1.0, 50, true, true, \"n\"); // Add category, which contains multiplicity categories and parameters var MEMBER_SETTINGS_CATEGORY = category(\"Members settings\"); // Add multiplicity category, which depends on \"n\" counter category(\"Multiplicity Group {{number}}\", \"n\", MEMBER_SETTINGS_CATEGORY); // Add multiplicity float parameter, which depends on \"n\" counter parameter_float(\"Nodal Offset {{number}}\", \"offset\", \"\", 2, UNIT.LENGTH, 1.0, 1.0, 50, false, false, \"n\"); // Add multiplicity section, which depends on \"n\" counter section(1, \"Section {{number}}\", \"n\"); // Add loading category var LOADING_CATEGORY = loading_category(\"Loading\"); // Add check for enabling loads parameter_check(\"Loads\", \"loads_checkbox\", true); // Add load category category(\"Loads\", false, LOADING_CATEGORY); // which enable by condition condition(\"loads_checkbox == true\"); // Add counter \"loads_n\", which manage loads multiplicity parameters parameter_int(\"Load cases counter\", \"loads_n\", \"\", 1, UNIT.NONE, 1, 1, 3, true, true); // Add multiplicity load cases, which depends on \"loads_n\" counter load_case(1, \"Load case {{number}}\", \"loads_n\"); // Add category, with multiplicity magnitudes category(\"Load magnitudes\", false, LOADING_CATEGORY); // which enable by condition condition(\"loads_checkbox == true\"); Add multiplicity float parameter, which depends on \"loads_n\" counter parameter_float(\"Magnitude {{number}}\", \"m\", \"\", 1000, UNIT.LOADS_FORCE, 1000, 1, NAN, true, false, \"loads_n\"); } function generate() { // Create nodes var nodes_count = n + 1; for (var i = 0; i < nodes_count; ++i) { var node = Node(i); if (i == 0) { node.coordinate_1 = 0.0; node.coordinate_2 = 0.0; node.coordinate_3 = 0.0; } else { // multiplicity names will be generated by following logic: // from base name \"offset\" will be generated names \"offset_1\", \"offset_2\", \"offset_3\" and etc. var x = nodes[i - 1].coordinate_1 + multiplicity[\"offset_\" + i]; // get existing object by multiplicity // from base name \"z\" will be generated names \"z_1\", \"z_2\", \"z_3\" and etc. var z = multiplicity[\"z_\" + i] * (-1); // get existing object by multiplicity node.coordinate_1 = x; node.coordinate_2 = 0.0; node.coordinate_3 = z; } } var members_count = 0; for (var i = 1; i < nodes_count; ++i) { var member = Member(i, [i - 1, i]); // multiplicity sections will be generated from id, which was set in input_data function member.section_start = sections[i]; ++members_count; } for (var i = 1; i < loads_n + 1; ++i) { // multiplicity load cases will be generated from id, which was set in input_data function var load_case = load_cases[i]; if (load_case) { var member_load = MemberLoad(i, load_case); // from base name \"m\" will be generated names \"m_1\", \"m_2\", \"m_3\" and etc. member_load.magnitude = multiplicity[\"m_\" + i]; // get existing object by multiplicity var members_to_load = []; for (var j = 1; j < members_count + 1; ++j) { members_to_load.push(members[j]); } member_load.members = members_to_load; } } } Constants Constants, which can be used in block scripting. USER_ID_MIN = 1; USER_ID_MAX = 1000000; MAXIMUM = 2.14748e+9; NAN = \"nan\""
  },
  "blocks/introblocks.html": {
    "href": "blocks/introblocks.html",
    "title": "Dynamic Blocks in RFEM 6 (via JavaScript) | Dlubal JavaScript High Level Functions Library",
    "keywords": "Dynamic Blocks in RFEM 6 (via JavaScript) Structures in RFEM 6 can be saved as blocks and reused in other RFEM files. The advantage of dynamic blocks with respect to non-dynamic blocks is that they allow interactive modifications of the structural parameters as a result of modified input variables. One example is the possibility to add structural elements by changing only the number of bays as an input variable. This article will demonstrate the aforementioned possibility for dynamic blocks that are created by scripting. The JavaScript File In theory, a web service can be created with any programming language. In this article, the programming environment is JavaScript. As a matter of fact, scripting can be used to define the topology of the structure, the load cases, and the loads. To create script files, it is enough to have an editor such as the one used in this article (Notepad ++). In the JavaScript file provided in this example, the input parameters are defined with the input_data() function. These parameters can be assigned in different categories (basic data, geometry, supports, sections, etc.). In terms of basic data, parameter \"n\" is defined as the type \"integer\" (using the parameter_int() function) in order to allow dynamic generation of the number of bays. In the “Geometry” category, on the other hand, the parameter_float() function is used for the creation of the frame span (a), the height of the column (H_1), the height of the roof (H_2), and the bay length (L). As can be seen in Image 1, parameter “L” (Bay length) is created dynamically by the multiplicity counter kn, which was defined earlier. Next, the variables defined as input data can be employed by the generate() function to generate the block; that is, to create nodes and members, assign supports to nodes, create coordinate systems, and create dimensions. This is shown in Image 2, and it can be further explored in the script provided at the end of the article. It is to be noted that all available objects and attributes can be found in the Console (View → Console). As Image 3 shows, the objects and their properties can be displayed through the icon indicated in the image. Although not used in this example, the global_parameters() function can also be adopted in the script. This function serves to parameterize the block, as discussed in the Knowledge Base article Parameterized Models as Blocks in RFEM 6. Saving the Model as a Block The block created in this manner can be saved as discussed in the Knowledge Base article Saving Models as Blocks in RFEM 6 (File → Save as Block). However, the difference now is that the JavaScript file has to be imported in the Save as Block window (Image 4). Once the block has been saved, it can be imported easily into any RFEM 6 file. For this purpose, it is necessary to open Dlubal Center | Blocks and select the block from the relevant category. Prior to being inserted, the block can be modified in the Edit Blocks window. For dynamic blocks created by scripting, the input parameters can be modified in the Structure tab of this window. As mentioned above, the advantage of dynamic blocks is the possibility to introduce modifications by changing the input variables. Thus, given the manner in which the number of bays (n) and the bay length (L) have been defined in the script, the latter will change automatically when the former are changed. In this example, the predefined number of bays is three and, therefore, three bay lengths are listed as parameters (Image 5). However, the variable “n” can be easily changed into any other number (for example, five), and the structure will be modified accordingly (Image 6). Final Remarks Dynamic blocks in RFEM 6 can be created easily by scripting. To create script files, it is sufficient to have a script editor. At this point, parameters can be created dynamically in the script, thus allowing interactive modification of the block afterwards. The blocks created in this manner can be saved by importing the JavaScript file in the “Save as Block” window. Once available in Dlubal Center | Blocks, they can be imported easily into any RFEM 6 file. Since the blocks are dynamic, interactive modifications of structural parameters as a result of modified input variables are possible each time the blocks are used in an RFEM file. Note Originaly published as knowledge base article"
  },
  "index.html": {
    "href": "index.html",
    "title": "RFEM_JavaScript_Library | Dlubal JavaScript High Level Functions Library",
    "keywords": "RFEM_JavaScript_Library Description This JavaScript project is focused on opening of possibility of scripting inside RFEM 6 RSTAB 9 and RSECTION to all our customers. Library enables them possibility to create models and interact with our applications on much higher level. The goal is to create easily expandable JavaScript library for scripting inside RFEM / RSTAB /RSECTION. Getting started You can download actual release of our JavaScript library and the use it for your project or you can fork our repository. Steps for downloaded release Go to release location Download zip file called Source code.zip Unzip it Use PowerShell script CopyFilesToRFEMLocation to copy content of library into you installation folder (you may need to have admin rights) Steps for Visual Studio Code Download Visual Studio Code and install it Open Visual Studio Code and install following extensions Code Spell Checker - useful extension for spell checking GitHub Pull Requests and Issues - extension for easy access to the GitHub pull request GitHub Issues - extension for easy access to the GitHub issues Git Lens - extension for better work with Source management ESLint - Linter for JavaScript Download Git and install it (needed for better functionality of Git Lens) Download GitHub Desktop Fork this repository Make your branch Open Visual Studio Code Made your own script or extend our library or use one from examples Copy your project to User Scripts/Example folder If you want to contribute - make pull request Dependencies RFEM 6 or RSTAB9 or RSECTION application Examples Examples can be found under Examples folder. License Contribute Contributions are always welcome! Please ensure your pull request adheres to the following guidelines Contributing"
  }
}