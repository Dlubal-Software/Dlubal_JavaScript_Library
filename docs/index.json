{
  "api/AnalysisSettings.ModalAnalysisSettings.html": {
    "href": "api/AnalysisSettings.ModalAnalysisSettings.html",
    "title": "Class ModalAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ModalAnalysisSettings Modal analysis settings high level function Constructors ModalAnalysisSettings(no, solverMethod, beyondFrequency, maximalFrequency, comment, params) Creates modal analysis settings high level function Declaration new ModalAnalysisSettings(no, solverMethod, beyondFrequency, maximalFrequency, comment, params) Parameters Type Name Description Number no unique ID of modal analysis settings String solverMethod solver method() String beyondFrequency Setting of eigenvectors beyond frequency String maximalFrequency Setting of eigenvectors maximal frequency String comment Comment, empty by default Object params Modal analysis settings parameters, empty by default Returns Type Description Object ModalAnalysisSettings Functions UserDefinedNumberOfModes(no, name, numberOfModes, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Creates modal analysis settings Declaration function UserDefinedNumberOfModes(no, name, numberOfModes, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Parameters Type Name Description Dlubal.int no string name Dlubal.int numberOfModes string solverMethod string typeOfMassMatrix string massConversion array actingMasses string comment Dlubal.dictionary params Returns Type Description Object ModalAnalysisSettings AutomaticNumberOfModesToReachEffMass(no, name, effectiveModalMassFactor, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Declaration function AutomaticNumberOfModesToReachEffMass(no, name, effectiveModalMassFactor, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* effectiveModalMassFactor Dlubal.* solverMethod Dlubal.* typeOfMassMatrix Dlubal.* massConversion Dlubal.* actingMasses Dlubal.* comment Dlubal.* params Returns Type Description Object ModalAnalysisSettings AutomaticNumberOfModesToReachMaxFreq(no, name, maxNaturalFrequency, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Declaration function AutomaticNumberOfModesToReachMaxFreq(no, name, maxNaturalFrequency, solverMethod, typeOfMassMatrix, massConversion, actingMasses, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* maxNaturalFrequency Dlubal.* solverMethod Dlubal.* typeOfMassMatrix Dlubal.* massConversion Dlubal.* actingMasses Dlubal.* comment Dlubal.* params Returns Type Description Object ModalAnalysisSettings"
  },
  "api/ContactSolid.html": {
    "href": "api/ContactSolid.html",
    "title": "Class ContactSolid | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ContactSolid Creates contact solid Constructors ContactSolid(no, perpendicular_to_surface, parallel_to_surface, values, comment, params) Creates contact solid Declaration new ContactSolid(no, perpendicular_to_surface, parallel_to_surface, values, comment, params) Parameters Type Name Description Number no Index of contact solid Number perpendicular_to_surface Contact perpendicular to surfaces, can be undefined (\"Failure force transmission\" by default) 1 - Full force transmission 2 - Failure under compression 3 - Failure under tension Number parallel_to_surface Contact parallel to surfaces, can be undefined (\"Failure if contact perpendicular to surfaces failed\" by default) 1 - Full force transmission 2 - Rigid friction 3 - Rigid friction with limit 4 - Elastic friction 5 - Elastic friction with limit 6 - Elastic solid behavior 7 - Failure if contact perpendicular to surfaces failed (only for failure perpendicular - 2 and 3) Array values Values depends on contact parallel to surface type, can be undefined String comment Comment, can be undefined Object params Contact solid's parameters, can be undefined Returns Type Description Created contact solid Functions AssignTo(solid_list) Assigns solids to contact solid Declaration function AssignTo(solid_list) Parameters Type Name Description Array solid_list List of solid's indexes"
  },
  "api/FreeCircularLoad.html": {
    "href": "api/FreeCircularLoad.html",
    "title": "Class FreeCircularLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeCircularLoad Creates free circular load Constructors FreeCircularLoad(no, load_case, surfaces, comment, params) Creates free circular load Declaration new FreeCircularLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free circular load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free circular load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free circular uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free circular uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free circular uniform load Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free circular linear load Declaration function Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free circular linear load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free linear uniform load"
  },
  "api/FreeConcentratedLoad.html": {
    "href": "api/FreeConcentratedLoad.html",
    "title": "Class FreeConcentratedLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeConcentratedLoad Creates free concentrated load Constructors FreeConcentratedLoad(no, load_case, surfaces, comment, params) Creates free concentrated load Declaration new FreeConcentratedLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free concentrated load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free concentrated load Functions Force(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free concentrated force load Declaration function Force(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free concentrated force load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free concentrated force load Moment(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free concentrated moment load Declaration function Moment(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free concentrated moment load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free concentrated moment load"
  },
  "api/FreeLineLoad.html": {
    "href": "api/FreeLineLoad.html",
    "title": "Class FreeLineLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeLineLoad Creates free line load Constructors FreeLineLoad(no, load_case, surfaces, comment, params) Creates free line load Declaration new FreeLineLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free line load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free line load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free line uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free line uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free line uniform load Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free line linear load Declaration function Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free line linear load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free line linear load"
  },
  "api/FreePolygonLoad.html": {
    "href": "api/FreePolygonLoad.html",
    "title": "Class FreePolygonLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreePolygonLoad Creates free polygon load Constructors FreePolygonLoad(no, load_case, surfaces, comment, params) Creates free polygon load Declaration new FreePolygonLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free polygon load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon uniform load Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon linear load Declaration function Linear(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon linear load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon linear load LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon linear in X load Declaration function LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon linear in X load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon linear in X load LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free polygon linear in Y load Declaration function LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free polygon linear in Y load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free polygon linear in Y load"
  },
  "api/FreeRectangularLoad.html": {
    "href": "api/FreeRectangularLoad.html",
    "title": "Class FreeRectangularLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class FreeRectangularLoad Creates free rectangular load Constructors FreeRectangularLoad(no, load_case, surfaces, comment, params) Creates free rectangular load Declaration new FreeRectangularLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of free rectangular load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular load Functions Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular uniform load Declaration function Uniform(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular uniform load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular uniform load LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular linear in X load Declaration function LinearX(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular linear in X load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular linear in X load LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular linear in Y load Declaration function LinearY(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular linear in Y load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular linear in Y load VaryingZ(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular varying in Z load Declaration function VaryingZ(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular varying in Z load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular varying in Z load VaryingPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular varying along perimeter load Declaration function VaryingPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular varying along perimeter load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular varying along perimeter load VaryingZAndPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Creates free rectangular varying in Z and along perimeter load Declaration function VaryingZAndPerimeter(no, load_case, surfaces, load_values, load_projection, load_direction, load_acting_region_from, load_acting_region_to, comment, params) Parameters Type Name Description Number no Index of free rectangular varying in Z and along perimeter load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters String load_projection Load projection, can be undefined String load_direction Load direction, can be undefined Number load_acting_region_from Start of load acting region, can be undefined Number load_acting_region_to End of load acting region, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created free rectangular varying in Z and along perimeter load"
  },
  "api/GasSolid.html": {
    "href": "api/GasSolid.html",
    "title": "Class GasSolid | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class GasSolid Creates gas solid Constructors GasSolid(no, pressure, temperature, comment, params) Creates gas solid Declaration new GasSolid(no, pressure, temperature, comment, params) Parameters Type Name Description Number no Index of gas solid Number pressure Pressure, can be empty (0.0 by default) Number temperature Temperature, can be undefined String comment Comment, can be undefined Object params Gas solid's parameters, can be undefined Returns Type Description Created gas solid Functions AssignTo(solid_list) Assigns solids to gas solid Declaration function AssignTo(solid_list) Parameters Type Name Description Array solid_list List of solid's indexes"
  },
  "api/ImposedLineDeformation.html": {
    "href": "api/ImposedLineDeformation.html",
    "title": "Class ImposedLineDeformation | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ImposedLineDeformation Creates imposed line deformation Constructors ImposedLineDeformation(no, load_case, lines, comment, params) Creates imposed line deformation Declaration new ImposedLineDeformation(no, load_case, lines, comment, params) Parameters Type Name Description Number no Index of imposed line deformation, can be undefined Object load_case Load case Array lines List of lines indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed line deformation Functions Set(no, load_case, lines, displacement_line_start_x, displacement_line_start_y, displacement_line_start_z, displacement_line_end_x, displacement_line_end_y, displacement_line_end_z, rotation_line_start, rotation_line_end, comment, params) Creates imposed line deformation Declaration function Set(no, load_case, lines, displacement_line_start_x, displacement_line_start_y, displacement_line_start_z, displacement_line_end_x, displacement_line_end_y, displacement_line_end_z, rotation_line_start, rotation_line_end, comment, params) Parameters Type Name Description Number no Index of imposed line deformation, can be undefined Object load_case Load case Array lines List of lines indexes Number displacement_line_start_x Imposed displacement at line start ux,i Number displacement_line_start_y Imposed displacement at line start uy,i, can be undefined Number displacement_line_start_z Imposed displacement at line start uz,i, can be undefined Number displacement_line_end_x Imposed displacement at line end ux,j, can be undefined Number displacement_line_end_y Imposed displacement at line end uy,i, can be undefined Number displacement_line_end_z Imposed displacement at line end uz,i, can be undefined Number rotation_line_start Imposed rotation at line start ϕx,i, can be undefined Number rotation_line_end Imposed rotation at line end ϕx,j, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed nodal deformation"
  },
  "api/ImposedNodalDeformation.html": {
    "href": "api/ImposedNodalDeformation.html",
    "title": "Class ImposedNodalDeformation | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class ImposedNodalDeformation Creates imposed nodal deformation Constructors ImposedNodalDeformation(no, load_case, nodes, comment, params) Creates imposed nodal deformation Declaration new ImposedNodalDeformation(no, load_case, nodes, comment, params) Parameters Type Name Description Number no Index of imposed nodal deformation, can be undefined Object load_case Load case Array nodes List of nodes indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed nodal deformation Functions Set(no, load_case, nodes, imposed_displacement_x, imposed_displacement_y, imposed_displacement_z, imposed_rotation_x, imposed_rotation_y, imposed_rotation_z, comment, params) Creates imposed nodal deformation Declaration function Set(no, load_case, nodes, imposed_displacement_x, imposed_displacement_y, imposed_displacement_z, imposed_rotation_x, imposed_rotation_y, imposed_rotation_z, comment, params) Parameters Type Name Description Number no Index of imposed nodal deformation, can be undefined Object load_case Load case Array nodes List of nodes indexes Number imposed_displacement_x Imposed displacement uX' Number imposed_displacement_y Imposed displacement uY', can be undefined Number imposed_displacement_z Imposed displacement uZ', can be undefined Number imposed_rotation_x Imposed rotation ϕX', can be undefined Number imposed_rotation_y Imposed rotation ϕY', can be undefined Number imposed_rotation_z Imposed rotation ϕZ', can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created imposed nodal deformation"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Package Dlubal | Dlubal JavaScript High Level Functions Library",
    "keywords": "Package Dlubal Classes SurfaceStiffnessModification Creates surface stiffness modification SurfaceMeshRefinement Creates surface mesh refinement SurfaceEccentricity Creates surface eccentricity SolidMeshRefinement Creates solid mesh refinement GasSolid Creates gas solid ContactSolid Creates contact solid MemberStiffnessModification Creates member stiffness modification MemberResultIntermediatePoint Creates member result intermediate point MemberNonlinearity Creates member nonlinearity MemberHinge Creates member hinge MemberEccentricity Creates member eccentricity MemberDefinableStiffness Creates member definable stiffness LineMeshRefinement Creates line mesh refinement LineHinge Creates line hinge SurfaceSetLoad Creates line set load SurfaceLoad Creates surface load SolidSetLoad Creates solid set load SolidLoad Creates solid load OpeningLoad Creates solid load NodalLoad Creates nodal load MemberSetLoad Creates member set load MemberLoad Creates member load LineSetLoad Creates line set load LineLoad Creates line load ImposedNodalDeformation Creates imposed nodal deformation ImposedLineDeformation Creates imposed line deformation FreeRectangularLoad Creates free rectangular load FreePolygonLoad Creates free polygon load FreeLineLoad Creates free line load FreeConcentratedLoad Creates free concentrated load FreeCircularLoad Creates free circular load Thickness Create Thickness SurfaceSet Create Surface Set Surface Creates surface SolidSet Create Solid Set Solid Create Solid Section Create Section Opening Create Opening Node Create Node MemberSet Create Member Set Member Creates member Material Create Material LineSet Line Creates line WindSimulationSettings Class creates WindSimulationSettings object StaticAnalysisSettings Creates static analysis settings high level function StabilityAnalysisSettings StabilityAnalysisSettings is a class that represents a stability analysis settings. SpectralAnalysisSettings Class for setting up the spectral analysis settings. ModalAnalysisSettings Modal analysis settings high level function"
  },
  "api/Line.html": {
    "href": "api/Line.html",
    "title": "Class Line | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Line Creates line Constructors Line(no, nodes, comment, params) Creates line Declaration new Line(no, nodes, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes List of node indexes String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created line Functions Polyline(no, nodes, comment, params) Creates polyline Declaration function Polyline(no, nodes, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes List of node indexes String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created polyline Arc(no, nodes, control_point, arc_parameters, center_of_arc, alpha_adjustement_target, comment, params) Creates arc line Declaration function Arc(no, nodes, control_point, arc_parameters, center_of_arc, alpha_adjustement_target, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes List of node indexes Array control_point Control point of arc Array arc_parameters Arc's parameters, can be undefined (only one of three parameter can be set, when arc parameter is set, other parameters (control point) will be recalculated) Array center_of_arc Center of arc, can be undefined (when center of is set, control point will be recalculated) Number alpha_adjustement_target Subsequent adjustment of α by displacing node at: 1 - Beginning of arc 2 - Arc control point 3 - End of arc String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created arc line Circle(no, center_of_circle, circle_radius, normal_point, comment, params) Creates circle line Declaration function Circle(no, center_of_circle, circle_radius, normal_point, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array center_of_circle Center point of circle Number circle_radius Radius of circle, can be undefined Array normal_point Point of normal ti circle plane, can be undefined String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created circle line EllipticalArc(no, control_point_1, control_point_2, perimeter_point, elliptical_arc_alpha, elliptical_arc_beta, comment, params) Creates elliptical arc line Declaration function EllipticalArc(no, control_point_1, control_point_2, perimeter_point, elliptical_arc_alpha, elliptical_arc_beta, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array control_point_1 First control point Array control_point_2 Second control point Array perimeter_point Third control point - perimeter Number elliptical_arc_alpha Arc angle α, can be undefined Number elliptical_arc_beta Arc angle β, can be undefined String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created elliptical arc line Ellipse(no, nodes, control_point, comment, params) Creates ellipse line Declaration function Ellipse(no, nodes, control_point, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of ellipse Array control_point Control point String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created ellipse line Parabola(no, nodes, control_point, parabola_alpha, comment, params) Creates parabola line Declaration function Parabola(no, nodes, control_point, parabola_alpha, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of parabola Array control_point Control point Number parabola_alpha Parabola's parameter α String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created parabola line Spline(no, nodes, comment, params) Creates spline Declaration function Spline(no, nodes, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of spline String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created spline NURBS(no, nodes, control_points_by_components, nurbs_order, comment, params) Creates NURBS line Declaration function NURBS(no, nodes, control_points_by_components, nurbs_order, comment, params) Parameters Type Name Description Number no Index of line, can be undefined Array nodes Nodes of NURBS Array control_points_by_components Control points Number nurbs_order Nurbs order, can be undefined String comment Comment, can be undefined Object params Line's parameters, can be undefined Returns Type Description Created NURBS line RectangularPolygon(no, center_point, length, width, plane, comment, params) Create rectangular polygon Declaration function RectangularPolygon(no, center_point, length, width, plane, comment, params) Parameters Type Name Description Dlubal.int no Number of the line, can be undefined array center_point Center point by format number length Length number width Width string plane Plane XY, XZ or YZ, can be undefined string comment Comment for the line, can be undefined Object params Parameters of the line, can be undefined Returns Type Description Created rectangular polygon nPolygon(no, control_point, no_edges, radius, rotation_plane, rotation_angle, join, comment, params) Creates nPolygon Declaration function nPolygon(no, control_point, no_edges, radius, rotation_plane, rotation_angle, join, comment, params) Parameters Type Name Description Dlubal.int no Number of the line, can be undefined array control_point Control point by format [x, y, z] number no_edges Number of edges number radius Radius string rotation_plane Rotation plane (x-y, x-z), can be undefined (x-y by default) number rotation_angle Rotation angle string join Join in one \"true\" or in separate lines \"false\" string comment Comment for the line, can be undefined Object params Parameters of the line, can be undefined Returns Type Description Created nPolygon Rotation(rotation_values, rotation_type) Sets line rotation Declaration function Rotation(rotation_values, rotation_type) Parameters Type Name Description Number rotation_values Rotation values depends on rotation type: 1 - [β] 2 - [help_node_index, rotation_plane (\"x-y\"|\"x-z\")] 3 - [rotation_plane (\"x-y\"|\"x-z\")] Number rotation_type Line rotation via: Angle (1), Help node (2), Inside (non-straight line) (3) AssignMember() Sets new default beam member to line Declaration function AssignMember() NodesOnLine(values) Sets nodes on line Declaration function NodesOnLine(values) Parameters Type Name Description Array values Nodes on line values in format [[node_1, reference_1, from_start_1, from_end1_1] ... [node_n, reference_n, from_start_n, from_end_1]] Supports(line_support) Sets line supports Declaration function Supports(line_support) Parameters Type Name Description Number line_support Line supports object id MeshRefinement(line_mesh_refinement) Sets line mesh refinement Declaration function MeshRefinement(line_mesh_refinement) Parameters Type Name Description Array line_mesh_refinement Line mesh refinement object id WeldedJoints(values) Sets line welded joints Declaration function WeldedJoints(values) Parameters Type Name Description Array values Line welded joints values, [[weld1, surface1,1, surface2,1, surface3,1] ... [weldn, surface1n, surface2n, surface3n]]"
  },
  "api/LineHinge.html": {
    "href": "api/LineHinge.html",
    "title": "Class LineHinge | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineHinge Creates line hinge Constructors LineHinge(no, surface, lines, comment, params) Creates line hinge Declaration new LineHinge(no, surface, lines, comment, params) Parameters Type Name Description Number no Index of line hinge, can be undefined undefinedInteger surface Surface id (lines must lie on this surface) undefinedInteger | Array lines One or more lines id for line hinge assign String comment Comment, can be undefined Object params line hinge parameters, can be undefined Returns Type Description Object Created line hinge Functions Translation(ux, uy, uz) Set translation constants ux, uy, uz to line hinge Declaration function Translation(ux, uy, uz) Parameters Type Name Description Boolean | Dlubal.Float ux Translation ux (true, false, number(stiffness [Nm^2])) Boolean | Dlubal.Float uy Translation uy (true, false, number(stiffness [Nm^2])) Boolean | Dlubal.Float uz Translation uz (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent TranslationX(ux) Set translation constant ux to line hinge Declaration function TranslationX(ux) Parameters Type Name Description Boolean | Dlubal.Float ux Translation ux (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent TranslationY(uy) Set translation constant uy to line hinge Declaration function TranslationY(uy) Parameters Type Name Description Boolean | Dlubal.Float uy Translation uy (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent TranslationZ(uz) Set translation constant uz to line hinge Declaration function TranslationZ(uz) Parameters Type Name Description Boolean | Dlubal.Float uz Translation uz (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent Rotation(rx) Set rotation constant rx to line hinge Declaration function Rotation(rx) Parameters Type Name Description Boolean | Dlubal.Float rx Rotation rx (true, false, number(stiffness [Nm^2])) Returns Type Description Object line hinge in parent AssignTo(surface, lines) Assign line hinge to line and surface (line must be involved in the surface) Declaration function AssignTo(surface, lines) Parameters Type Name Description Dlubal.Integer surface surface id (lines must lie on this surface) Dlubal.Integer | Array lines one or more lines id for line hinge assign WallSlabConnection(surface, or) Assign wall-slab connection to line hinge Declaration function WallSlabConnection(surface, or) Parameters Type Name Description Dlubal.Integer surface surface id (lines must lie on this surface) Dlubal.Integer or {Array} lines one or more lines id for line hinge assign"
  },
  "api/LineLoad.html": {
    "href": "api/LineLoad.html",
    "title": "Class LineLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineLoad Creates line load Constructors LineLoad(no, load_case, lines, comment, params) Creates line load Declaration new LineLoad(no, load_case, lines, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of line indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line load Functions Force(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Creates line force load Declaration function Force(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of lines String load_distribution Load distribution Array load_values Load values depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line force load Moment(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Creates line moment load Declaration function Moment(no, load_case, lines, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of lines String load_distribution Load distribution Array load_values Load values depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line moment load Mass(no, load_case, lines, load_value, comment, params) Creates line mass load Declaration function Mass(no, load_case, lines, load_value, comment, params) Parameters Type Name Description Number no Index of line load, can be undefined Object load_case Load case Array lines List of lines Number load_value Uniform load value String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line mass load ReferenceToListOfLines(value) Sets option for reference to list of lines Declaration function ReferenceToListOfLines(value) Parameters Type Name Description Boolean value When undefined, true as default ReferDistanceLineEnd(value) Sets option for refer distance to the line end Declaration function ReferDistanceLineEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverLine(value) Sets option for load over total length of line (only for trapezoidal load distribution) Declaration function LoadOverLine(value) Parameters Type Name Description Boolean value When undefined, true as default IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/LineMeshRefinement.html": {
    "href": "api/LineMeshRefinement.html",
    "title": "Class LineMeshRefinement | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineMeshRefinement Creates line mesh refinement Constructors LineMeshRefinement(no, targetFELength, numberOfLayers, lines, comment, params) Creates line mesh refinement Declaration new LineMeshRefinement(no, targetFELength, numberOfLayers, lines, comment, params) Parameters Type Name Description Number no Index of line mesh refinement, can be undefined Number targetFELength Length of FEA element side on the line, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined String comment Comment, can be undefined Object params line mesh refinement parameters, can be undefined Returns Type Description Object Created line mesh refinement HLF Functions TargetFELength(targetFELength, numberOfLayers, lines) Change line mesh refinement to type based on element length Declaration function TargetFELength(targetFELength, numberOfLayers, lines) Parameters Type Name Description Number targetFELength Length of FEA element side on the line, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement NumberFiniteElements(numberOfFiniteElements, numberOfLayers, lines) Change line mesh refinement to type based on number of elements on line Declaration function NumberFiniteElements(numberOfFiniteElements, numberOfLayers, lines) Parameters Type Name Description Number numberOfFiniteElements Number of FEA elements on the line, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement Gradual(gradual_rows, numberOfLayers, lines) Change line mesh refinement to type gradually changed due to distance from the line Declaration function Gradual(gradual_rows, numberOfLayers, lines) Parameters Type Name Description Number gradual_rows Number gradual rows of FEA elements, can be undefined Number numberOfLayers Number of layers to be affected by this refinement, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement SetLines(gradual_rows, lines) Function for assign lines to line mesh refinement Declaration function SetLines(gradual_rows, lines) Parameters Type Name Description Number gradual_rows Number gradual rows of FEA elements, can be undefined Number | Array lines Lines assigned to this refinement, can be undefined Returns Type Description Object Created line mesh refinement"
  },
  "api/LineSet.html": {
    "href": "api/LineSet.html",
    "title": "Class LineSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineSet Constructors LineSet(no, lines, comment, params) Declaration new LineSet(no, lines, comment, params) Parameters Type Name Description undefinedint no Number of Line Set array lines List of the number of the lines string comment Comment for the Line Set undefineddictionary params Parameters of the Line Set Returns Type Description lineSet Functions ContinuousLines(no, lines, comment, params) Create Continuous Lines lineSet type Declaration function ContinuousLines(no, lines, comment, params) Parameters Type Name Description Dlubal.int no Number of Line Set array lines List of the number of the lines string comment Comment for the Line Set Dlubal.dictionary params Parameters of the Line Set GroupOfLines(no, lines, comment, params) Create Group of Lines Declaration function GroupOfLines(no, lines, comment, params) Parameters Type Name Description Dlubal.int no Number of Line Set array lines List of the number of the lines string comment Comment for the Line Set Dlubal.dictionary params Parameters of the Line Set"
  },
  "api/LineSetLoad.html": {
    "href": "api/LineSetLoad.html",
    "title": "Class LineSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class LineSetLoad Creates line set load Constructors LineSetLoad(no, load_case, line_sets, comment, params) Creates line set load Declaration new LineSetLoad(no, load_case, line_sets, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set load Functions Force(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Creates line set force load Declaration function Force(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set force load Moment(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Creates line set moment load Declaration function Moment(no, load_case, line_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setLineLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set moment load Mass(no, load_case, line_sets, load_value, comment, params) Creates line set mass load Declaration function Mass(no, load_case, line_sets, load_value, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line sets Number load_value Uniform parameter value String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set mass load ReferDistanceLineSetEnd(value) Sets option for refer distance to the end of line set Declaration function ReferDistanceLineSetEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverLineSet(value) Sets option for load over total length of line set (only for trapezoidal load distribution) Declaration function LoadOverLineSet(value) Parameters Type Name Description Boolean value When undefined, true as default IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/Material.html": {
    "href": "api/Material.html",
    "title": "Class Material | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Material Create Material Constructors Material(no, name, comment, params) Create Material Declaration new Material(no, name, comment, params) Parameters Type Name Description undefinedint no Number of Material string name Name of Material string comment Comment for the Material undefineddictionary params Parameters of the Material Returns Type Description material"
  },
  "api/Member.html": {
    "href": "api/Member.html",
    "title": "Class Member | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Member Creates member Constructors Member(no, nodes_or_line, comment, params) Creates member Declaration new Member(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined undefinedArray/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Functions Beam(no, nodes_or_line, section_start, comment, params) Creates beam member Declaration function Beam(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Rigid(no, nodes_or_line, comment, params) Creates rigid member Declaration function Rigid(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Truss(no, nodes_or_line, section_start, comment, params) Creates truss member Declaration function Truss(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member TrussOnlyN(no, nodes_or_line, section_start, comment, params) Creates truss (only N) member Declaration function TrussOnlyN(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Tension(no, nodes_or_line, section_start, comment, params) Creates tension member Declaration function Tension(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Compression(no, nodes_or_line, section_start, comment, params) Creates compression member Declaration function Compression(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Buckling(no, nodes_or_line, section_start, comment, params) Creates buckling member Declaration function Buckling(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member Cable(no, nodes_or_line, section_start, comment, params) Creates cable member Declaration function Cable(no, nodes_or_line, section_start, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number section_start Section start. Section end is same as section start by default. To set section end specify distribution type. String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created member DefinableStiffness(no, nodes_or_line, definable_stiffness, comment, params) Create definable stiffness member Declaration function DefinableStiffness(no, nodes_or_line, definable_stiffness, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line Number definable_stiffness Definable stiffness String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created definable stiffness member CouplingRigidRigid(no, nodes_or_line, comment, params) Create coupling rigid-rigid member Declaration function CouplingRigidRigid(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling rigid-rigid member CouplingRigidHinge(no, nodes_or_line, comment, params) Create coupling rigid-hinge member Declaration function CouplingRigidHinge(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling rigid-hinge member CouplingHingeRigid(no, nodes_or_line, comment, params) Create coupling hinge-rigid member Declaration function CouplingHingeRigid(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling hinge-rigid member CouplingHingeHinge(no, nodes_or_line, comment, params) Create coupling hinge-hinge member Declaration function CouplingHingeHinge(no, nodes_or_line, comment, params) Parameters Type Name Description Number no Index of member, can be undefined Dlubal.Array/Number nodes_or_line List of node indexes or number of line String comment Comment, can be undefined Object params Member's parameters, can be undefined Returns Type Description Created coupling hinge-hinge member NodesOnMember(values) Sets nodes on member Declaration function NodesOnMember(values) Parameters Type Name Description Array values Nodes on member values in format [[node_1, reference_1, from_start_1, from_end1_1] ... [node_n, reference_n, from_start_n, from_end_1]] Hinges(member_start_hinge, member_end_hinge) Sets member start and/or member end hinges Declaration function Hinges(member_start_hinge, member_end_hinge) Parameters Type Name Description Number member_start_hinge Member hinge object id at member start, can be undefined Number member_end_hinge Member hinge object id at member end, can be undefined Eccentricities(member_start_eccentricity, member_end_eccentricity) Sets member start and/or member end eccentricities Declaration function Eccentricities(member_start_eccentricity, member_end_eccentricity) Parameters Type Name Description Number member_start_eccentricity Member eccentricity object id at member start, can be undefined Number member_end_eccentricity Member eccentricity object id at member end, can be undefined Supports(member_support) Sets member supports Declaration function Supports(member_support) Parameters Type Name Description Number member_support Member supports object id Nonlinearity(member_nonlinearity) Sets member nonlinearity Declaration function Nonlinearity(member_nonlinearity) Parameters Type Name Description Number member_nonlinearity Member nonlinearity object id ResultIntermediatePoints(member_result_intermediate_point) Declaration function ResultIntermediatePoints(member_result_intermediate_point) Parameters Type Name Description Number member_result_intermediate_point member result intermediate point object id EndModifications(member_start, member_end) Sets member start and/or member end extensions Declaration function EndModifications(member_start, member_end) Parameters Type Name Description Array member_start Member start values, can be undefined ([Δi, αi,y, αi,z]) Array member_end Member end values, can be undefined ([Δj, αj,y, αj,z]) SectionDistributionUniform() Sets uniform section distribution Declaration function SectionDistributionUniform() SectionDistributionLinear(section_start, section_end, section_alignment) Sets linear distribution Declaration function SectionDistributionLinear(section_start, section_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String section_alignment section_alignment Section alignment (Top, Centric, Bottom), can be undefined (centric as default) SectionDistributionTaperedAtBothSides(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_distance_from_end, section_alignment) Sets tapered at both sides distribution Declaration function SectionDistributionTaperedAtBothSides(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_distance_from_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_internal Number of section at internal point of member (between start and end) Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_start Member distance ([distance, is_relative]), can be undefined Array section_distance_from_end Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionTaperedAtStart(section_start, section_end, reference_type, section_distance_from_start, section_alignment) Sets tapered at start distribution Declaration function SectionDistributionTaperedAtStart(section_start, section_end, reference_type, section_distance_from_start, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_start Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionTaperedAtEnd(section_start, section_end, reference_type, section_distance_from_end, section_alignment) Sets tapered at end distribution Declaration function SectionDistributionTaperedAtEnd(section_start, section_end, reference_type, section_distance_from_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_end Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionSaddle(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_alignment) Sets saddle distribution Declaration function SectionDistributionSaddle(section_start, section_internal, section_end, reference_type, section_distance_from_start, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_internal Number of section at internal point of member (between start and end) Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_distance_from_start Member distance ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionOffsetAtBothSides(section_start, section_internal, section_end, reference_type, section_offset_from_start, section_offset_from_end, section_alignment) Sets offset at both sides distribution Declaration function SectionDistributionOffsetAtBothSides(section_start, section_internal, section_end, reference_type, section_offset_from_start, section_offset_from_end, section_alignment) Parameters Type Name Description Number section_start Number of section at start of member Number section_internal Number of section at internal point of member (between start and end) Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_offset_from_start Member offset ([distance, is_relative]), can be undefined Array section_offset_from_end Member offset ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionOffsetAtStart(section_start, section_end, reference_type, section_offset_from_start) Sets offset at start distribution Declaration function SectionDistributionOffsetAtStart(section_start, section_end, reference_type, section_offset_from_start) Parameters Type Name Description Number section_start Number of section at start of member Number section_end Number of section at end of member String reference_type Reference type (L, XY, XZ), can be undefined Array section_offset_from_start Member offset ([distance, is_relative]), can be undefined ss* @param {String} section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default) SectionDistributionOffsetAtEnd(reference_type, section_offset_from_end, section_alignment) Sets offset at end distribution Declaration function SectionDistributionOffsetAtEnd(reference_type, section_offset_from_end, section_alignment) Parameters Type Name Description String reference_type Reference type (L, XY, XZ), can be undefined Array section_offset_from_end Member offset ([distance, is_relative]), can be undefined String section_alignment Section alignment (Top, Centric, Bottom), can be undefined (top as default)"
  },
  "api/MemberDefinableStiffness.html": {
    "href": "api/MemberDefinableStiffness.html",
    "title": "Class MemberDefinableStiffness | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberDefinableStiffness Creates member definable stiffness Constructors MemberDefinableStiffness(no, member_list, comment, params) Creates member definable stiffness Declaration new MemberDefinableStiffness(no, member_list, comment, params) Parameters Type Name Description Number no Index of member definable stiffness, can be undefined Array member_list Assigned members, can be undefined String comment Comment, can be undefined Object params Member definable stiffness parameters, can be undefined Returns Type Description Object Created member definable stiffness Functions TorsionalAndBendingStiffness(torsional_stiffness, bending_stiffness_y, bending_stiffness_z) Sets torsional and bending stiffness parameters Declaration function TorsionalAndBendingStiffness(torsional_stiffness, bending_stiffness_y, bending_stiffness_z) Parameters Type Name Description Number torsional_stiffness Torsional stiffness Number bending_stiffness_y Bending stiffness Y Number bending_stiffness_z Bending stiffness Z AxialAndShearStiffness(axial_stiffness, shear_stiffness_y, shear_stiffness_z) Sets axial and shear stiffness parameters Declaration function AxialAndShearStiffness(axial_stiffness, shear_stiffness_y, shear_stiffness_z) Parameters Type Name Description Number axial_stiffness Axial stiffness Number shear_stiffness_y Shear stiffness Y Number shear_stiffness_z Shear stiffness Z SelfWeight(specific_weight, section_area) Sets self weight stiffness parameters Declaration function SelfWeight(specific_weight, section_area) Parameters Type Name Description Number specific_weight Specific weight Number section_area Section area MainAxesRotation(rotation) Sets main axes rotation parameter Declaration function MainAxesRotation(rotation) Parameters Type Name Description Number rotation Rotation ThermalExpansionCoefficient(thermal_expansion, width, height) Sets coefficient of thermal expansion stiffness parameters Declaration function ThermalExpansionCoefficient(thermal_expansion, width, height) Parameters Type Name Description Number thermal_expansion Thermal expansion Number width Width Number height Height"
  },
  "api/MemberEccentricity.html": {
    "href": "api/MemberEccentricity.html",
    "title": "Class MemberEccentricity | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberEccentricity Creates member eccentricity Constructors MemberEccentricity(no, members_start_list, members_end_list, comment, params) Creates member eccentricity Declaration new MemberEccentricity(no, members_start_list, members_end_list, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Members start, can be undefined Array members_end_list Members end, can be undefined String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity Functions RelativeToSection(no, members_start_list, members_end_list, alignment, comment, params) Creates member eccentricity relative to section Declaration function RelativeToSection(no, members_start_list, members_end_list, alignment, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Member start Array members_end_list Member end String alignment Alignment, for more info look at private function setRelativeValues String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity Absolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, comment, params) Creates absolute member eccentricity Declaration function Absolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Members start Array members_end_list Members end Number offset_x Eccentricity in X Number offset_y Eccentricity in Y Number offset_z Eccentricity in Z Number coordinate_system Coordinate system, can be undefined. Default value is \"Local xyz\". String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity RelativeAndAbsolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, alignment, comment, params) Creates absolute member eccentricity Declaration function RelativeAndAbsolute(no, members_start_list, members_end_list, offset_x, offset_y, offset_z, coordinate_system, alignment, comment, params) Parameters Type Name Description Number no Index of member eccentricity, can be undefined Array members_start_list Members start Array members_end_list Members end Number offset_x Eccentricity in X Number offset_y Eccentricity in Y Number offset_z Eccentricity in Z Number coordinate_system Coordinate system, can be undefined. Default value is \"Local xyz\". String alignment Alignment, for more info look at private function setRelativeValues String comment Comment, can be undefined Object params Member eccentricity parameters, can be undefined Returns Type Description Object Created member eccentricity AxialOffset(active) Sets axial offset from adjoining member Declaration function AxialOffset(active) Parameters Type Name Description Boolean active True if undefined HingeLocationAtNode(active) Sets hinge location at node (if applied) Declaration function HingeLocationAtNode(active) Parameters Type Name Description Boolean active True if undefined TransverseOffsetMember(reference_member, reference_node, alignment) Transverse offset from section of another member Declaration function TransverseOffsetMember(reference_member, reference_node, alignment) Parameters Type Name Description Number reference_member Reference member Number reference_node Reference member's node, can be undefined String alignment Alignment, for more info look at private function setTransverseOffset TransverseOffsetSurface(reference_surface, alignment) Transverse offset from section of another thickness of other surface Declaration function TransverseOffsetSurface(reference_surface, alignment) Parameters Type Name Description Number reference_surface Reference surface String alignment Alignment, for more info look at private function setTransverseOffset TransverseOffsetNone() Set off transverse offset Declaration function TransverseOffsetNone()"
  },
  "api/MemberHinge.html": {
    "href": "api/MemberHinge.html",
    "title": "Class MemberHinge | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberHinge Creates member hinge Constructors MemberHinge(no, members_start_list, members_end_list, comment, params) Creates member hinge Declaration new MemberHinge(no, members_start_list, members_end_list, comment, params) Parameters Type Name Description Number no Index of member hinge, can be undefined Array members_start_list Member start, can be undefined Array members_end_list Member end, can be undefined String comment Comment, can be undefined Object params Member hinge parameters, can be undefined Returns Type Description Object Created member hinge Functions Translational(no, members_start_list, members_end_list, axial_release_n, axial_release_vy, axial_release_vz, comment, params) Creates member hinge with specified axis release Declaration function Translational(no, members_start_list, members_end_list, axial_release_n, axial_release_vy, axial_release_vz, comment, params) Parameters Type Name Description Number no Index of member hinge, can be undefined Array members_start_list Member start, can be undefined Array members_end_list Member end, can be undefined Array axial_release_n Axis release for ux, for more information look at comment in private setMainHingeValues function Array axial_release_vy Axis release for uy, for more information look at comment in private setMainHingeValues function Array axial_release_vz Axis release for uz, for more information look at comment in private setMainHingeValues function String comment Comment, can be undefined Object params Member hinge parameters, can be undefined Returns Type Description Object Created member hinge Rotational(no, members_start_list, members_end_list, moment_release_mt, moment_release_my, moment_release_mz, comment, params) Creates member hinge with specified moment release Declaration function Rotational(no, members_start_list, members_end_list, moment_release_mt, moment_release_my, moment_release_mz, comment, params) Parameters Type Name Description Number no Index of member hinge, can be undefined Array members_start_list Member start, can be undefined Array members_end_list Member end, can be undefined Array moment_release_mt Moment release for φx, for more information look at comment in private setMainHingeValues function Array moment_release_my Moment release for φy, for more information look at comment in private setMainHingeValues function Array moment_release_mz Moment release for φz, for more information look at comment in private setMainHingeValues function String comment Comment, can be undefined Object params Member hinge parameters, can be undefined Returns Type Description Object Created member hinge PartialActivityTranslationalX(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity translation x nonlinearity Declaration function PartialActivityTranslationalX(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityTranslationalY(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity translation y nonlinearity Declaration function PartialActivityTranslationalY(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityTranslationalZ(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity translation z nonlinearity Declaration function PartialActivityTranslationalZ(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityRotationalX(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity rotational x nonlinearity Declaration function PartialActivityRotationalX(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityRotationalY(negative_zone_values, positive_zone) Sets negative and/or positive zone to partial activity rotational y nonlinearity Declaration function PartialActivityRotationalY(negative_zone_values, positive_zone) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) PartialActivityRotationalZ(negative_zone_values, positive_zone_values) Sets negative and/or positive zone to partial activity rotational z nonlinearity Declaration function PartialActivityRotationalZ(negative_zone_values, positive_zone_values) Parameters Type Name Description Array negative_zone_values Negative zone values depend on type (for more information look at setPartialActivityZoneValues function) Array positive_zone_values Positive zone values depend on type (for more information look at setPartialActivityZoneValues function) DiagramTranslationalX(diagram_values) Sets translational diagram values for ux Declaration function DiagramTranslationalX(diagram_values) Parameters Type Name Description Array diagram_values [[ux1, N1, Cux1], [ux2, N2, Cux2] ... [uxn, Nn, Cuxn]] DiagramTranslationalY(diagram_values) Sets translational diagram values for uy Declaration function DiagramTranslationalY(diagram_values) Parameters Type Name Description Array diagram_values [[uy1, N1, Cuy1], [uy2, N2, Cuy2] ... [uyn, Nn, Cuyn]] DiagramTranslationalZ(diagram_values) Sets translational diagram values for uz Declaration function DiagramTranslationalZ(diagram_values) Parameters Type Name Description Array diagram_values [[uz1, N1, Cuz1], [uz2, N2, Cuz2] ... [uzn, Nn, Cuzn]] DiagramRotationalX(diagram_values) Sets rotational diagram values for φx Declaration function DiagramRotationalX(diagram_values) Parameters Type Name Description Array diagram_values [[φx1, N1, Cφx1], [φx2, N2, Cφx2] ... [φxn, Nn, Cφxn]] DiagramRotationalY(diagram_values) Sets rotational diagram values for φy Declaration function DiagramRotationalY(diagram_values) Parameters Type Name Description Array diagram_values [[φy1, N1, Cφy1], [φy2, N2, Cφy2] ... [φyn, Nn, Cφyn]] DiagramRotationalZ(diagram_values) Sets rotational diagram values for φz Declaration function DiagramRotationalZ(diagram_values) Parameters Type Name Description Array diagram_values [[φz1, N1, Cφz1], [φz2, N2, Cφz2] ... [φzn, Nn, Cφzn]] FrictionVyTranslationalX(friction_coefficient_x, spring_constant_x) Sets translational friction Vy values for ux Declaration function FrictionVyTranslationalX(friction_coefficient_x, spring_constant_x) Parameters Type Name Description Number friction_coefficient_x Friction coefficient X Number spring_constant_x Spring constant X FrictionVzTranslationalX(friction_coefficient_x, spring_constant_x) Sets translational friction Vz values for ux Declaration function FrictionVzTranslationalX(friction_coefficient_x, spring_constant_x) Parameters Type Name Description Number friction_coefficient_x Friction coefficient X Number spring_constant_x Spring constant X FrictionVyVzTranslationalX(friction_coefficient_x, spring_constant_x) Sets translational friction VyVz values for ux Declaration function FrictionVyVzTranslationalX(friction_coefficient_x, spring_constant_x) Parameters Type Name Description Number friction_coefficient_x Friction coefficient X Number spring_constant_x Spring constant X FrictionVyPlusVzTranslationalX(friction_coefficient_xy, friction_coefficient_xz, spring_constant_x) Sets translational friction Vy+Vz values for ux Declaration function FrictionVyPlusVzTranslationalX(friction_coefficient_xy, friction_coefficient_xz, spring_constant_x) Parameters Type Name Description Number friction_coefficient_xy Friction coefficient XY Number friction_coefficient_xz Friction coefficient XZ Number spring_constant_x Spring constant X FrictionNTranslationalY(friction_coefficient_y, spring_constant_y) Sets translational friction N values for uy Declaration function FrictionNTranslationalY(friction_coefficient_y, spring_constant_y) Parameters Type Name Description Number friction_coefficient_y Friction coefficient Y Number spring_constant_y Spring constant Y FrictionVzTranslationalY(friction_coefficient_y, spring_constant_y) Sets translational friction Vz values for uy Declaration function FrictionVzTranslationalY(friction_coefficient_y, spring_constant_y) Parameters Type Name Description Number friction_coefficient_y Friction coefficient Y Number spring_constant_y Spring constant Y FrictionNVzTranslationalY(friction_coefficient_y, spring_constant_y) Sets translational friction NVz values for uy Declaration function FrictionNVzTranslationalY(friction_coefficient_y, spring_constant_y) Parameters Type Name Description Number friction_coefficient_y Friction coefficient Y Number spring_constant_y Spring constant Y FrictionNPlusVzTranslationalY(friction_coefficient_yx, friction_coefficient_yz, spring_constant_y) Sets translational friction N+Vz values for uy Declaration function FrictionNPlusVzTranslationalY(friction_coefficient_yx, friction_coefficient_yz, spring_constant_y) Parameters Type Name Description Number friction_coefficient_yx Friction coefficient YX Number friction_coefficient_yz Friction coefficient YZ Number spring_constant_y Spring constant Y FrictionNTranslationalZ(friction_coefficient_z, spring_constant_z) Sets translational friction N values for uz Declaration function FrictionNTranslationalZ(friction_coefficient_z, spring_constant_z) Parameters Type Name Description Number friction_coefficient_z Friction coefficient Z Number spring_constant_z Spring constant Z FrictionVyTranslationalZ(friction_coefficient_z, spring_constant_z) Sets translational friction Vy values for uz Declaration function FrictionVyTranslationalZ(friction_coefficient_z, spring_constant_z) Parameters Type Name Description Number friction_coefficient_z Friction coefficient Z Number spring_constant_z Spring constant Z FrictionNVyTranslationalZ(friction_coefficient_z, spring_constant_z) Sets translational friction NVy values for uz Declaration function FrictionNVyTranslationalZ(friction_coefficient_z, spring_constant_z) Parameters Type Name Description Number friction_coefficient_z Friction coefficient Z Number spring_constant_z Spring constant Z FrictionNPlusVyTranslationalZ(friction_coefficient_zx, friction_coefficient_zy, spring_constant_z) Sets translational friction N+Vy values for uz Declaration function FrictionNPlusVyTranslationalZ(friction_coefficient_zx, friction_coefficient_zy, spring_constant_z) Parameters Type Name Description Number friction_coefficient_zx Friction coefficient ZX Number friction_coefficient_zy Friction coefficient ZY Number spring_constant_z Spring constant Z"
  },
  "api/MemberLoad.html": {
    "href": "api/MemberLoad.html",
    "title": "Class MemberLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberLoad Creates member load Constructors MemberLoad(no, load_case, members, comment, params) Creates member load Declaration new MemberLoad(no, load_case, members, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member load Functions Force(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member force load Declaration function Force(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member force load Moment(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member moment load Declaration function Moment(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member moment load Mass(no, load_case, members, load_value, comment, params) Creates member mass load Declaration function Mass(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member mass load Temperature(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member temperature load Declaration function Temperature(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member temperature load TemperatureChange(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member temperature change load Declaration function TemperatureChange(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member temperature change load AxialStrain(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member axial strain load Declaration function AxialStrain(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member axial strain load AxialDisplacement(no, load_case, members, load_value, comment, params) Creates member axial displacement load Declaration function AxialDisplacement(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member axial displacement load Precamber(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member precamber load Declaration function Precamber(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member precamber load InitialPrestress(no, load_case, members, load_value, comment, params) Creates member initial prestress load Declaration function InitialPrestress(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member initial prestress load Displacement(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member displacement load Declaration function Displacement(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member displacement load Rotation(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Creates member rotation load Declaration function Rotation(no, load_case, members, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member rotation load PipeContentFull(no, load_case, members, load_value, load_direction, comment, params) Creates member content full load Declaration function PipeContentFull(no, load_case, members, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member pipe content full load PipeContentPartial(no, load_case, members, load_values, load_direction, comment, params) Creates member pipe content partial load Declaration function PipeContentPartial(no, load_case, members, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Array load_values Load parameters for Uniform distribution String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member pipe content partial load PipeInternalPressure(no, load_case, members, load_value, comment, params) Creates member pipe internal pressure load Declaration function PipeInternalPressure(no, load_case, members, load_value, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member pipe internal pressure load RotaryMotion(no, load_case, members, load_values, comment, params) Creates member rotary motion load Declaration function RotaryMotion(no, load_case, members, load_values, comment, params) Parameters Type Name Description Number no Index of member load, can be undefined Object load_case Load case Array members List of member indexes Number load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member rotary motion load ReferenceToListOfMembers(value) Sets option for reference to list of members Declaration function ReferenceToListOfMembers(value) Parameters Type Name Description Boolean value When undefined, true as default ReferDistanceMemberEnd(value) Sets option for refer distance to the member end Declaration function ReferDistanceMemberEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverMember(value) Sets option for load over total length of member (only for trapezoidal load distribution) Declaration function LoadOverMember(value) Parameters Type Name Description Boolean value When undefined, true as default Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Sets eccentricity (only force load) Declaration function Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Parameters Type Name Description String reference_to Eccentricity is refereed to what (\"left_top\", \"center_top\", \"right_top\", \"left_center\", \"center_center\", \"right_center\", \"left_bottom\", \"center_bottom\", \"right_bottom\", \"center_of_gravity\", \"shear_center\") Number offset_member_start_ey Offset at member start, can be undefined Number offset_member_start_ez Offset at member start, can be undefined Number offset_member_end_ey Offset at member end, can be undefined Number offset_member_end_ez Offset at member end, can be undefined IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/MemberNonlinearity.html": {
    "href": "api/MemberNonlinearity.html",
    "title": "Class MemberNonlinearity | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberNonlinearity Creates member nonlinearity Constructors MemberNonlinearity(no, comment, params) Creates member nonlinearity Declaration new MemberNonlinearity(no, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Functions FailureIfTension(no, members, comment, params) Creates member failure if tension nonlinearity Declaration function FailureIfTension(no, members, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity FailureIfCompression(no, members, comment, params) Creates member failure if compression nonlinearity Declaration function FailureIfCompression(no, members, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity FailureIfTensionWithSlippage(no, members, slippage, comment, params) Creates member failure if tension with slippage nonlinearity Declaration function FailureIfTensionWithSlippage(no, members, slippage, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number slippage Slippage String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity FailureIfCompressionWithSlippage(no, members, slippage, comment, params) Creates member failure if compression with slippage nonlinearity Declaration function FailureIfCompressionWithSlippage(no, members, slippage, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number slippage Slippage String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Slippage(no, members, slippage, comment, params) Creates member slippage nonlinearity Declaration function Slippage(no, members, slippage, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number slippage Slippage String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity TearingUnderTension(no, members, tension_force, comment, params) Creates member tearing under tension nonlinearity Declaration function TearingUnderTension(no, members, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity YieldingUnderTension(no, members, tension_force, comment, params) Creates member yielding under tension nonlinearity Declaration function YieldingUnderTension(no, members, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity TearingUnderCompression(no, members, compression_force, comment, params) Creates member tearing under compression nonlinearity Declaration function TearingUnderCompression(no, members, compression_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity YieldingUnderCompression(no, members, compression_force, comment, params) Creates member yielding under compression nonlinearity Declaration function YieldingUnderCompression(no, members, compression_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Tearing(no, members, compression_force, tension_force, comment, params) Creates member tearing nonlinearity Declaration function Tearing(no, members, compression_force, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity Yielding(no, members, compression_force, tension_force, comment, params) Creates member yielding nonlinearity Declaration function Yielding(no, members, compression_force, tension_force, comment, params) Parameters Type Name Description Number no Index of member nonlinearity, can be undefined Array members Assigned members Number compression_force Compression force Number tension_force Tension force String comment Comment, can be undefined Object params Member nonlinearity parameters, can be undefined Returns Type Description Object Created member nonlinearity"
  },
  "api/MemberResultIntermediatePoint.html": {
    "href": "api/MemberResultIntermediatePoint.html",
    "title": "Class MemberResultIntermediatePoint | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberResultIntermediatePoint Creates member result intermediate point Constructors MemberResultIntermediatePoint(no, members, comment, params) Creates member result intermediate point Declaration new MemberResultIntermediatePoint(no, members, comment, params) Parameters Type Name Description Number no Index of member definable stiffness, can be undefined Array members Assigned members, can be undefined String comment Comment, can be undefined Object params Member result intermediate point parameters, can be undefined Returns Type Description Object Created member result intermediate point Functions UniformDistances(divisions_count, notes) Sets number of points Declaration function UniformDistances(divisions_count, notes) Parameters Type Name Description Number divisions_count Number of division ordinates Array notes Notes to each point, can be undefined DivisionOrdinates(division_ordinates, notes, absolute, clear_ordinates) Sets division ordinates Declaration function DivisionOrdinates(division_ordinates, notes, absolute, clear_ordinates) Parameters Type Name Description Array division_ordinates Division ordinates Array notes Division ordinates notes, can be undefined Boolean absolute Distances are absolute or relative can be undefined (default value is absolute) Boolean clear_ordinates Clears default ordinates, can be undefined (default value is true)"
  },
  "api/MemberSet.html": {
    "href": "api/MemberSet.html",
    "title": "Class MemberSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberSet Create Member Set Constructors MemberSet(no, members, comment, params) Create Member Set Declaration new MemberSet(no, members, comment, params) Parameters Type Name Description undefinedint no Number of Member Set array members List of the number of the members string comment Comment for the Member Set undefineddictionary params Parameters of the Member Set Returns Type Description memberSet Functions ContinuousMembers(no, members, comment, params) Create Continuous Member memberSet type Declaration function ContinuousMembers(no, members, comment, params) Parameters Type Name Description Dlubal.int no Number of Member Set array members List of the number of the members string comment Comment for the Member Set Dlubal.dictionary params Parameters of the Member Set GroupOfMembers(no, members, comment, params) Create Group of Member memberSet type Declaration function GroupOfMembers(no, members, comment, params) Parameters Type Name Description Dlubal.int no Number of Member Set array members List of the number of the members string comment Comment for the Member Set Dlubal.dictionary params Parameters of the Member Set"
  },
  "api/MemberSetLoad.html": {
    "href": "api/MemberSetLoad.html",
    "title": "Class MemberSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberSetLoad Creates member set load Constructors MemberSetLoad(no, load_case, member_sets, comment, params) Creates member set load Declaration new MemberSetLoad(no, load_case, member_sets, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set load Functions Force(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set force load Declaration function Force(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set force load Moment(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set moment load Declaration function Moment(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set moment load Mass(no, load_case, member_sets, load_value, comment, params) Creates member set mass load Declaration function Mass(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set mass load Temperature(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set temperature load Declaration function Temperature(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set temperature load TemperatureChange(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set temperature change load Declaration function TemperatureChange(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set temperature change load AxialStrain(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set axial strain load Declaration function AxialStrain(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set axial strain load AxialDisplacement(no, load_case, member_sets, load_value, comment, params) Creates member set axial displacement load Declaration function AxialDisplacement(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set axial displacement load Precamber(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set precamber load Declaration function Precamber(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set precamber load InitialPrestress(no, load_case, member_sets, load_value, comment, params) Creates member set initial prestress load Declaration function InitialPrestress(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set initial prestress load Displacement(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set displacement load Declaration function Displacement(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set displacement load Rotation(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Creates member set rotation load Declaration function Rotation(no, load_case, member_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set rotation load PipeContentFull(no, load_case, member_sets, load_value, load_direction, comment, params) Creates member set content full load Declaration function PipeContentFull(no, load_case, member_sets, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member sets indexes Number load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set pipe content full load PipeContentPartial(no, load_case, member_sets, load_values, load_direction, comment, params) Creates member set pipe content partial load Declaration function PipeContentPartial(no, load_case, member_sets, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Array load_values Load parameters for Uniform distribution String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set pipe content partial load PipeInternalPressure(no, load_case, member_sets, load_value, comment, params) Creates member set pipe internal pressure load Declaration function PipeInternalPressure(no, load_case, member_sets, load_value, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Number load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set pipe internal pressure load RotaryMotion(no, load_case, member_sets, load_values, comment, params) Creates member set rotary motion load Declaration function RotaryMotion(no, load_case, member_sets, load_values, comment, params) Parameters Type Name Description Number no Index of member set load, can be undefined Object load_case Load case Array member_sets List of member set indexes Number load_values Load parameters depend on load distribution (for more information look at setMemberLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created member set rotary motion load ReferDistanceMemberSetEnd(value) Sets option for refer distance to the member set end Declaration function ReferDistanceMemberSetEnd(value) Parameters Type Name Description Boolean value When undefined, true as default LoadOverMember(value) Sets option for load over total length of member set (only for trapezoidal load distribution) Declaration function LoadOverMember(value) Parameters Type Name Description Boolean value When undefined, true as default Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Sets eccentricity (only force load) Declaration function Eccentricity(reference_to, offset_member_start_ey, offset_member_start_ez, offset_member_end_ey, offset_member_end_ez) Parameters Type Name Description String reference_to Eccentricity is refereed to what (\"left_top\", \"center_top\", \"right_top\", \"left_center\", \"center_center\", \"right_center\", \"left_bottom\", \"center_bottom\", \"right_bottom\", \"center_of_gravity\", \"shear_center\") Number offset_member_start_ey Offset at member start, can be undefined Number offset_member_start_ez Offset at member start, can be undefined Number offset_member_end_ey Offset at member end, can be undefined Number offset_member_end_ez Offset at member end, can be undefined IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/MemberStiffnessModification.html": {
    "href": "api/MemberStiffnessModification.html",
    "title": "Class MemberStiffnessModification | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class MemberStiffnessModification Creates member stiffness modification Constructors MemberStiffnessModification(no, structure_modifications, comment, params) Creates member stiffness modification Declaration new MemberStiffnessModification(no, structure_modifications, comment, params) Parameters Type Name Description Number no Index of member stiffness modification, can be undefined Array structure_modifications Assigned structure modifications, can be undefined String comment Comment, can be undefined Object params Member stiffness modification parameters, can be undefined Returns Type Description Object Created member stiffness modification Functions TotalStiffnessFactor(total_stiffness) Sets total stiffness factor Declaration function TotalStiffnessFactor(total_stiffness) Parameters Type Name Description Number total_stiffness Total stiffness PartialStiffnessFactors(axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness, weight) Sets partial stiffness factors Declaration function PartialStiffnessFactors(axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness, weight) Parameters Type Name Description Number axial_stiffness Axial stiffness, can be undefined Number bending_stiffness_y Bending stiffness Y, can be undefined Number bending_stiffness_z Bending stiffness Z, can be undefined Number shear_stiffness_y Shear stiffness Y, can be undefined Number shear_stiffness_z Shear stiffness Z, can be undefined Number torsional_stiffness Torsional stiffness, can be undefined Number weight Weight, can be undefined ConcreteStructuresAci(component_type) Sets concrete structure ACI Declaration function ConcreteStructuresAci(component_type) Parameters Type Name Description Number component_type Component type: Columns (1), Walls uncracked (2), Walls cracked (3), Beams (4), Flat plates and flat stabs (5). Can be undefined ConcreteStructuresCsa(component_type) Sets concrete structure CSA Declaration function ConcreteStructuresCsa(component_type) Parameters Type Name Description Number component_type Component type: Columns (1), Walls uncracked (2), Walls cracked (3), Beams (4), Flat plates and flat stabs (5). Can be undefined SteelStructuresAisc(determine_tau_b, design_method) Sets steel structures AISC Declaration function SteelStructuresAisc(determine_tau_b, design_method) Parameters Type Name Description Number determine_tau_b Determine τb: Iterative (1), Set to 1 (2). Can be undefined. Number design_method Design method: LRFD (1), ASD (2). Can be undefined. If determine τb has \"Set to 1\" value, must be undefined. SteelStructuresCSA(determine_tau_b, axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness) , Sets steel structures CSA Declaration function SteelStructuresCSA(determine_tau_b, axial_stiffness, bending_stiffness_y, bending_stiffness_z, shear_stiffness_y, shear_stiffness_z, torsional_stiffness) Parameters Type Name Description Number determine_tau_b Determine τb: Iterative (1), Set to 1 (2). Can be undefined. Number axial_stiffness Axial stiffness multiplier factor, can be undefined. If defined, apply τb is set to true. Number bending_stiffness_y Bending stiffness multiplier factors Z, can be undefined. If defined, apply τb is set to true. Number bending_stiffness_z Bending stiffness multiplier factors Y, can be undefined. If defined, apply τb is set to true. Number shear_stiffness_y Shear stiffness Y, can be undefined. If defined, apply τb is set to true. Number shear_stiffness_z Shear stiffness Z, can be undefined. If defined, apply τb is set to true. Number torsional_stiffness Torsional stiffness, can be undefined. If defined, apply τb is set to true."
  },
  "api/NodalLoad.html": {
    "href": "api/NodalLoad.html",
    "title": "Class NodalLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class NodalLoad Creates nodal load Constructors NodalLoad(no, load_case, nodes, comment, params) Creates nodal load Declaration new NodalLoad(no, load_case, nodes, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created nodal load Functions Force(no, load_case, nodes, force, load_direction, comment, params) Creates nodal force load Declaration function Force(no, load_case, nodes, force, load_direction, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Number force Load force value String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created nodal force load Moment(no, load_case, nodes, moment, load_direction, comment, params) Creates nodal moment load Declaration function Moment(no, load_case, nodes, moment, load_direction, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Number moment Load moment value String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created nodal moment load Components(no, load_case, nodes, forces, moments, comment, params) Creates nodal moment load Declaration function Components(no, load_case, nodes, forces, moments, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Array forces List of forces [FX, FX, FY] Array moments List of moments [MX, MY, MZ] String comment Comment, van be undefined Object params Load parameters, can be undefined Returns Type Description Object Create nodal components load Mass(no, load_case, nodes, mass, comment, params) Creates nodal moment load Declaration function Mass(no, load_case, nodes, mass, comment, params) Parameters Type Name Description Number no Index of nodal load, can be undefined Object load_case Load case Array nodes List of node indexes Number mass Load mass value String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Create nodal mass load SpecificDirection(type, values) Adds specific direction to load Declaration function SpecificDirection(type, values) Parameters Type Name Description Number type Specific direction type, can be one of: - 1 (Rotated view 3 angles) - 2 (Directed to node) - 3 (Parallel to two nodes) - 4 (Parallel to CS of line) - 4 (Parallel to CS of line) - 5 (Parallel to CS of member) Array values List of values for specified direction: - [αX',αY',αZ',sequence] (for 1), example: [0.1,0.2,0.1,\"X'Y'Z'\"], sequence can be empty by default - [node_index] (for 2) - [node1_index, node2_index] (for 3) - [line_no] (for 4) - [member_no] (for 5) ForceEccentricity(eccentricity_x, eccentricity_y, eccentricity_z) Adds eccentricity to load Declaration function ForceEccentricity(eccentricity_x, eccentricity_y, eccentricity_z) Parameters Type Name Description Number eccentricity_x Eccentricity eX Number eccentricity_y Eccentricity eY Number eccentricity_z Eccentricity eZ ShiftedDisplay(offset, distance) Adds shifted display to load Declaration function ShiftedDisplay(offset, distance) Parameters Type Name Description Array offset Offset [ΔX,ΔY,ΔZ], example [0.1,0.2,0] Number distance Distance Δ IndividualMassComponents(mass, distance) Adds individual mass components to load Declaration function IndividualMassComponents(mass, distance) Parameters Type Name Description Array mass mass [MX,MY,MZ], example [0.1,0.2,0] Number distance mass_moment_of_inertia [IX,IY,IZ], example [0.1,0.2,0] -"
  },
  "api/Node.html": {
    "href": "api/Node.html",
    "title": "Class Node | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Node Create Node Constructors Node(no, coordinate_X, coordinate_Y, coordinate_Z, comment, params) Create Node Declaration new Node(no, coordinate_X, coordinate_Y, coordinate_Z, comment, params) Parameters Type Name Description undefinedint no Number of Node number coordinate_X Coordinate X number coordinate_Y Coordinate Y number coordinate_Z Coordinate Z string comment Comment for the Node undefineddictionary params Parameters of the Node Returns Type Description node Functions Standard(no, coordinate_system, coordinate_system_type, comment, params) Create Standard node Declaration function Standard(no, coordinate_system, coordinate_system_type, comment, params) Parameters Type Name Description Dlubal.int no Number of Node array coordinate_system Coordinate of node in format [x, y, z] string coordinate_system_type Type of Coordinate System string comment Comment for the Node Dlubal.dictionary params Parameters of the Node BetweenTwoNodes(no, start_node_no, end_node_no, node_reference, parameters, offset_y, offset_z, comment, params) Create Node between two nodes Declaration function BetweenTwoNodes(no, start_node_no, end_node_no, node_reference, parameters, offset_y, offset_z, comment, params) Parameters Type Name Description Dlubal.int no Number of Node Dlubal.int start_node_no Number of start node Dlubal.int end_node_no Number of end node string node_reference Node Reference array parameters List of parameters of node number offset_y Offset in Y direction number offset_z Offset in Z direction string comment Comment for the Node Dlubal.dictionary params Parameters of the Node BetweenTwoPoints(no, start_point, end_point, node_reference, parameters, offset_y, offset_z, comment, params) Create Node between two points Declaration function BetweenTwoPoints(no, start_point, end_point, node_reference, parameters, offset_y, offset_z, comment, params) Parameters Type Name Description Dlubal.int no Number of Node array start_point Coordinate of start point in format [x, y, z] array end_point Coordinate of end point in format [x, y, z] string node_reference Node Reference array parameters List of parameters of node number offset_y Offset in Y direction number offset_z Offset in Z direction string comment Comment for the Node Dlubal.dictionary params Parameters of the Node OnLine(no, line_number, node_reference, parameters, comment, params) Create Node On Line Declaration function OnLine(no, line_number, node_reference, parameters, comment, params) Parameters Type Name Description Dlubal.int no Number of the Node Dlubal.int line_number Number of the Line string node_reference Node Reference array parameters List of parameters of node string comment Comment for the Node Dlubal.dictionary params Parameters of the Node OnMember(no, member_number, node_reference, parameters, comment, params) Create Node on Member Declaration function OnMember(no, member_number, node_reference, parameters, comment, params) Parameters Type Name Description Dlubal.int no Number of the Node Dlubal.int member_number Number of member string node_reference Node Reference array parameters List of parameters of node string comment Comment for the Node Dlubal.dictionary params Parameters of the Node"
  },
  "api/Opening.html": {
    "href": "api/Opening.html",
    "title": "Class Opening | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Opening Create Opening Constructors Opening(no, boundary_lines, comment, params) Create Opening Declaration new Opening(no, boundary_lines, comment, params) Parameters Type Name Description undefinedint no Number of Opening array boundary_lines Boundary lines of the Opening string comment Comment for the Opening undefineddictionary params Parameters of the Opening Returns Type Description opening"
  },
  "api/OpeningLoad.html": {
    "href": "api/OpeningLoad.html",
    "title": "Class OpeningLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class OpeningLoad Creates solid load Constructors OpeningLoad(no, load_case, openings, comment, params) Creates solid load Declaration new OpeningLoad(no, load_case, openings, comment, params) Parameters Type Name Description Number no Index of opening load, can be undefined Object load_case Load case Array openings List of opening indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created opening load Functions Force(no, load_case, openings, load_distribution, load_values, load_direction, comment, params) Creates opening force load Declaration function Force(no, load_case, openings, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of opening load, can be undefined Object load_case Load case Array openings List of openings indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created opening force load SmoothConcentratedLoad(value,) Set smooth concentrated load Declaration function SmoothConcentratedLoad(value,) Parameters Type Name Description Boolean value, can be undefined (false)"
  },
  "api/Section.html": {
    "href": "api/Section.html",
    "title": "Class Section | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Section Create Section Constructors Section(no, name, material, comment, params) Create Section Declaration new Section(no, name, material, comment, params) Parameters Type Name Description undefinedint no Number of the Section string name Name of the Section undefinedint material Number of the material string comment Comment for the Opening undefineddictionary params Parameters of the Opening Returns Type Description section"
  },
  "api/Solid.html": {
    "href": "api/Solid.html",
    "title": "Class Solid | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Solid Create Solid Constructors Solid(no, boundary_surfaces, material, comment, params) Create Solid Declaration new Solid(no, boundary_surfaces, material, comment, params) Parameters Type Name Description undefinedint no Number of Solid array boundary_surfaces List of boundary surfaces undefinedint material Number of material string comment Comment for the Solid undefineddictionary params Parameters of the Solid Returns Type Description Solid Functions Standard(no, boundary_surfaces, material, comment, params) Create Standard Solid Declaration function Standard(no, boundary_surfaces, material, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid array boundary_surfaces List of boundary surfaces Dlubal.int material Number of material string comment Comment for the Solid Dlubal.dictionary params Parameters of the Solid Gas(no, boundary_surfaces, material, gasssolid_no, comment, params) Create Gas Declaration function Gas(no, boundary_surfaces, material, gasssolid_no, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid array boundary_surfaces List of boundary surfaces Dlubal.int material Number of material Dlubal.int gasssolid_no Gass solid index string comment Comment for the Solid Dlubal.dictionary params Parameters of the Solid Contact(no, boundary_surfaces, material, contact_solid_no, first_contact_surface, comment, params) Create Contact solid Declaration function Contact(no, boundary_surfaces, material, contact_solid_no, first_contact_surface, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid array boundary_surfaces List of boundary surfaces Dlubal.int material Number of material Dlubal.int contact_solid_no Contact solid index Dlubal.int first_contact_surface Number of first contact surface string comment Comment for the Solid Dlubal.dictionary params Parameters of the Solid"
  },
  "api/SolidLoad.html": {
    "href": "api/SolidLoad.html",
    "title": "Class SolidLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidLoad Creates solid load Constructors SolidLoad(no, load_case, solids, comment, params) Creates solid load Declaration new SolidLoad(no, load_case, solids, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid load Functions Force(no, load_case, solids, load_value, load_direction, comment, params) Creates solid force load Declaration function Force(no, load_case, solids, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid force load Temperature(no, load_case, solids, load_distribution, load_values, comment, params) Creates solid temperature load Declaration function Temperature(no, load_case, solids, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid temperature load Strain(no, load_case, solids, load_distribution, load_values, comment, params) Creates solid strain load Declaration function Strain(no, load_case, solids, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid strain load Buoyancy(no, load_case, solids, load_value, load_direction, comment, params) Creates solid buoyancy load Declaration function Buoyancy(no, load_case, solids, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid buoyancy load RotaryMotion(no, load_case, solids, load_values, comment, params) Creates solid rotary motion load Declaration function RotaryMotion(no, load_case, solids, load_values, comment, params) Parameters Type Name Description Number no Index of solid load, can be undefined Object load_case Load case Array solids List of solid indexes Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid rotary motion load AirDensity(altitude) Determine air density at specified altitude Declaration function AirDensity(altitude) Parameters Type Name Description Number altitude Altitude value, if undefined, determine air density at specified altitude will be set false"
  },
  "api/SolidMeshRefinement.html": {
    "href": "api/SolidMeshRefinement.html",
    "title": "Class SolidMeshRefinement | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidMeshRefinement Creates solid mesh refinement Constructors SolidMeshRefinement(no, solid_list, comment, params) Creates solid mesh refinement Declaration new SolidMeshRefinement(no, solid_list, comment, params) Parameters Type Name Description Number no Index of solid mesh refinement, can be undefined Array solid_list List of solid indexes String comment Comment, can be undefined Object params Solid mesh refinement's parameters, can be undefined Returns Type Description Created solid mesh refinement Functions TargetLength(no, solid_list, target_length, comment, params) Creates solid mesh refinement Declaration function TargetLength(no, solid_list, target_length, comment, params) Parameters Type Name Description Number no Index of solid mesh refinement, can be undefined Array solid_list List of solid indexes Number target_length Target FE length String comment Comment, can be undefined Object params Solid mesh refinement's parameters, can be undefined"
  },
  "api/SolidSet.html": {
    "href": "api/SolidSet.html",
    "title": "Class SolidSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidSet Create Solid Set Constructors SolidSet(no, solids_no, solid_set_type, comment, params) Create Solid Set Declaration new SolidSet(no, solids_no, solid_set_type, comment, params) Parameters Type Name Description undefinedint no Number of Solid Set array solids_no List of solids string solid_set_type Type of the Solid Set string comment Comment for the Solid Set undefineddictionary params Parameters of the Solid Set Returns Type Description Solid Set Functions ContinuousSolids(no, solids_no, comment, params) Create Continuous Solids solidSet type Declaration function ContinuousSolids(no, solids_no, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid Set array solids_no List of solids string comment Comment for the Solid Set Dlubal.dictionary params Parameters of the Solid Set GroupOfSolids(no, solids_no, comment, params) Create Group of Solids Declaration function GroupOfSolids(no, solids_no, comment, params) Parameters Type Name Description Dlubal.int no Number of Solid Set array solids_no List of solids string comment Comment for the Solid Set Dlubal.dictionary params Parameters of the Solid Set"
  },
  "api/SolidSetLoad.html": {
    "href": "api/SolidSetLoad.html",
    "title": "Class SolidSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SolidSetLoad Creates solid set load Constructors SolidSetLoad(no, load_case, solid_sets, comment, params) Creates solid set load Declaration new SolidSetLoad(no, load_case, solid_sets, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set load Functions Force(no, load_case, solid_sets, load_value, load_direction, comment, params) Creates solid set force load Declaration function Force(no, load_case, solid_sets, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set force load Temperature(no, load_case, solid_sets, load_distribution, load_values, comment, params) Creates solid set temperature load Declaration function Temperature(no, load_case, solid_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set temperature load Strain(no, load_case, solid_sets, load_distribution, load_values, comment, params) Creates solid set strain load Declaration function Strain(no, load_case, solid_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set strain load Buoyancy(no, load_case, solid_sets, load_value, load_direction, comment, params) Creates solid set buoyancy load Declaration function Buoyancy(no, load_case, solid_sets, load_value, load_direction, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes Array load_value Uniform load parameter String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set buoyancy load RotaryMotion(no, load_case, solid_sets, load_values, comment, params) Creates solid set rotary motion load Declaration function RotaryMotion(no, load_case, solid_sets, load_values, comment, params) Parameters Type Name Description Number no Index of solid set load, can be undefined Object load_case Load case Array solid_sets List of solid set indexes Array load_values Load parameters depend on load distribution (for more information look at setSolidLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created solid set rotary motion load AirDensity(altitude) Determine air density at specified altitude Declaration function AirDensity(altitude) Parameters Type Name Description Number altitude Altitude value, if undefined, determine air density at specified altitude will be set false"
  },
  "api/SpectralAnalysisSettings.html": {
    "href": "api/SpectralAnalysisSettings.html",
    "title": "Class SpectralAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SpectralAnalysisSettings Class for setting up the spectral analysis settings. Constructors SpectralAnalysisSettings(no, name, combinationRulePeriodic, combinationRuleDirectional, scaledSumDirectionalComponentValue, useEquivalentLinearCombination, signedResultsUsingDominantMode, saveResultsOfAllSelectedModes, comment, params) Constructor creates basic spectral analysis settings Declaration new SpectralAnalysisSettings(no, name, combinationRulePeriodic, combinationRuleDirectional, scaledSumDirectionalComponentValue, useEquivalentLinearCombination, signedResultsUsingDominantMode, saveResultsOfAllSelectedModes, comment, params) Parameters Type Name Description undefined* no undefined* name undefined* combinationRulePeriodic undefined* combinationRuleDirectional undefined* scaledSumDirectionalComponentValue undefined* useEquivalentLinearCombination undefined* signedResultsUsingDominantMode undefined* saveResultsOfAllSelectedModes undefined* comment undefined* params Functions GetNo() Declaration function GetNo() Returns Type Description No"
  },
  "api/StabilityAnalysisSettings.html": {
    "href": "api/StabilityAnalysisSettings.html",
    "title": "Class StabilityAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class StabilityAnalysisSettings StabilityAnalysisSettings is a class that represents a stability analysis settings. Constructors StabilityAnalysisSettings(no, isEigenvalueSolver, isIncremental, eigenvalueMethod, numberOfLowestEigenvalues, comment, params) Constructor creates a new object of type StabilityAnalysisSettings Declaration new StabilityAnalysisSettings(no, isEigenvalueSolver, isIncremental, eigenvalueMethod, numberOfLowestEigenvalues, comment, params) Parameters Type Name Description undefined* no undefined* isEigenvalueSolver undefined* isIncremental undefined* eigenvalueMethod undefined* numberOfLowestEigenvalues undefined* comment undefined* params Returns Type Description object Stability Analysis Settings"
  },
  "api/StaticAnalysisSettings.html": {
    "href": "api/StaticAnalysisSettings.html",
    "title": "Class StaticAnalysisSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class StaticAnalysisSettings Creates static analysis settings high level function Constructors StaticAnalysisSettings(no, analysisType, equationSolver, nonlinearMethod, comment, params) Creates static analysis settings high level function Declaration new StaticAnalysisSettings(no, analysisType, equationSolver, nonlinearMethod, comment, params) Parameters Type Name Description undefinedInteger no unique ID of SAS String analysisType Analysis setting type (\"GEOMETRICALLY_LINEAR\", \"SECOND_ORDER_P_DELTA\", \"LARGE_DEFORMATIONS\") String equationSolver Equation solver (\"METHOD_OF_EQUATION_SYSTEM_DIRECT\", \"METHOD_OF_EQUATION_SYSTEM_ITERATIVE\") String nonlinearMethod Nonlinear method (\"NEWTON_RAPHSON\", \"NEWTON_RAPHSON_COMBINED_WITH_PICARD\", \"PICARD\", \"NEWTON_RAPHSON_WITH_POSTCRITICAL_ANALYSIS\", \"NEWTON_RAPHSON_WITH_CONSTANT_STIFFNESS\", \"DYNAMIC_RELAXATION\" ) String comment Comment, empty by default Object params Static analysis settings parameters, empty by default Returns Type Description Static Analysis object Functions GeometricallyLinear(no, name, equationSolver, plateBendingTheory, activeMass, modifyLoading, comment, params) Declaration function GeometricallyLinear(no, name, equationSolver, plateBendingTheory, activeMass, modifyLoading, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* equationSolver Dlubal.* plateBendingTheory Dlubal.* activeMass Dlubal.* modifyLoading Dlubal.* comment Dlubal.* params Returns Type Description Object Static Analysis Settings SecondOrder(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, plateBendingTheory, activeMass, modifyLoading, comment, params) Declaration function SecondOrder(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, plateBendingTheory, activeMass, modifyLoading, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* equationSolver Dlubal.* nonlinearMethod Dlubal.* maxNumberOfIterations Dlubal.* numberOfLoadIncrements Dlubal.* plateBendingTheory Dlubal.* activeMass Dlubal.* modifyLoading Dlubal.* comment Dlubal.* params Returns Type Description Object Static Analysis Settings LargeDeformations(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, percentageOfIterations, plateBendingTheory, activeMass, modifyLoading, comment, params) Declaration function LargeDeformations(no, name, equationSolver, nonlinearMethod, maxNumberOfIterations, numberOfLoadIncrements, percentageOfIterations, plateBendingTheory, activeMass, modifyLoading, comment, params) Parameters Type Name Description Dlubal.* no Dlubal.* name Dlubal.* equationSolver Dlubal.* nonlinearMethod Dlubal.* maxNumberOfIterations Dlubal.* numberOfLoadIncrements Dlubal.* percentageOfIterations Dlubal.* plateBendingTheory Dlubal.* activeMass Dlubal.* modifyLoading Dlubal.* comment Dlubal.* params Returns Type Description Object Static Analysis Settings"
  },
  "api/Surface.html": {
    "href": "api/Surface.html",
    "title": "Class Surface | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Surface Creates surface Constructors Surface(no, boundary_lines, thickness, comment, params) Creates surface Declaration new Surface(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index, can be undefined String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface Functions Standard(no, boundary_lines, thickness, comment, params) Creates standard surface Declaration function Standard(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface WithoutThickness(no, boundary_lines, comment, params) Creates without thickness surface Declaration function WithoutThickness(no, boundary_lines, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface Rigid(no, boundary_lines, comment, params) Creates rigid surface Declaration function Rigid(no, boundary_lines, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface Membrane(no, boundary_lines, thickness, comment, params) Creates membrane surface Declaration function Membrane(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface WithoutMembraneTension(no, boundary_lines, thickness, comment, params) Creates without membrane tension surface Declaration function WithoutMembraneTension(no, boundary_lines, thickness, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface LoadTransfer(no, boundary_lines, values, comment, params) Creates load transfer surface Declaration function LoadTransfer(no, boundary_lines, values, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Array values Load transfer's parameters, can be undefined [load_transfer_direction, surface_weight, consider_member_eccentricity, consider_section_distribution excluded_members, excluded_parallel_to_members, excluded_lines, excluded_parallel_to_lines, loaded_lines, loaded_members] String comment Comment, can be undefined Object params Surface's parameters, can be undefined Returns Type Description Created surface SurfaceType(stiffness_type, material, thickness) Sets surface type with material and thickness Declaration function SurfaceType(stiffness_type, material, thickness) Parameters Type Name Description String stiffness_type Stiffness type Object material Material, can be undefined Object thickness Thickness, can be undefined Plane() Sets plane geometry type of surface Declaration function Plane() Quadrangle(no, boundary_lines, thickness, boundary_line, corner_node_1, corner_node_2, corner_node_3, corner_node_4, comment, params) Sets quadrangle geometry type of surface Declaration function Quadrangle(no, boundary_lines, thickness, boundary_line, corner_node_1, corner_node_2, corner_node_3, corner_node_4, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index, can be undefined Number boundary_line Index of boundary line Number corner_node_1 Quadrangle corner 1, can be undefined Number corner_node_2 Quadrangle corner 2, can be undefined Number corner_node_3 Quadrangle corner 3, can be undefined Number corner_node_4 Quadrangle corner 4, can be undefined String comment Comment, can be undefined Object params Surface's parameters, can be undefined NURBS() Sets NURBS geometry type of surface Declaration function NURBS() Rotated(no, boundary_lines, thickness, boundary_line, angle_of_rotation, rotation_axis_p, rotation_axis_r, comment, params) Sets rotated geometry type of surface Declaration function Rotated(no, boundary_lines, thickness, boundary_line, angle_of_rotation, rotation_axis_p, rotation_axis_r, comment, params) Parameters Type Name Description Number no Index of surface, can be undefined Array boundary_lines List of boundary lines indexes Number thickness Thickness index, can be undefined Number boundary_line Index of boundary line Number angle_of_rotation Angle of rotation, can be undefined Array rotation_axis_p Rotation axis, point P ([X, Y, Z]). Can be undefined. Array rotation_axis_r Rotation axis, point R ([X, Y, Z]). Can be undefined. String comment Comment, can be undefined Object params Surface's parameters, can be undefined Pipe(center_line, radius) Sets pipe geometry type of surface Declaration function Pipe(center_line, radius) Parameters Type Name Description Number center_line Index of center lineHeight Number radius Radius Hinges(hinges_values) Sets surface hinges Declaration function Hinges(hinges_values) Parameters Type Name Description Array hinges_values Line hinges values ([[line_no1, line_hinge_no1] ... [line_non, line_hinge_non]]) Support(support) Sets surface support Declaration function Support(support) Parameters Type Name Description Number support Index of surface support Eccentricity(eccentricity) Sets surface eccentricity Declaration function Eccentricity(eccentricity) Parameters Type Name Description Number eccentricity Index of surface eccentricity MeshRefinement(mesh_refinement, meshing_type) Sets surface mesh refinement Declaration function MeshRefinement(mesh_refinement, meshing_type) Parameters Type Name Description Number mesh_refinement Index of surface mesh refinement Number meshing_type Meshing type, can be undefined (According to global settings by default) 1 - According to global settings 2 - Mapped 3 - Free SpecificAxes(input_axes, result_axes) Declaration function SpecificAxes(input_axes, result_axes) Parameters Type Name Description Array input_axes Input axes values [category, [values], reverse_local_z_axis], can be undefined 1 - Angular rotation category, values: [α, [X, Y, Z], [X2, Y2, Z2]], first and second point can be undefined 2 - Axis parallel to lines category, values: [[line1_no, line2_no ... linen_no], axis (Axis x|Axis y)], second parameter can be undefined (\"Axis x\" as default) 3 - Axis directed to point category, values: [[X1, Y1, Z1], [X2, Y2, Z2], axis (Axis x|Axis y)], third parameter can be undefined (\"Axis x\" by default) 4 - Axis parallel to coordinate system category, values: [coordinate_system_no], can be undefined (Global XYZ by default) reverse_local_z_axis, can be undefined Array result_axes Result axes values [category], can be undefined (Identical to input axes by default) 1 - Identical to input axes category, by default GridForResults(grid_type, number_of_grid_points, grid_adapt_automatically, grid_distancies, grid_rotation, grid_origin) Sets surface's grid for results values Declaration function GridForResults(grid_type, number_of_grid_points, grid_adapt_automatically, grid_distancies, grid_rotation, grid_origin) Parameters Type Name Description Number grid_type Grid type (1 - Cartesian, 2 - Polar) Array number_of_grid_points Number of grid points in (-) and (+), can be undefined Grid type cartesian: [nx+, nx-, ny+, ny-] Grid type polar: [nr+] Boolean grid_adapt_automatically Adapt automatically, can be undefined (true by default) Array grid_distancies Grid distancies ([b, h]), can be undefined Array grid_rotation Grid rotation ([α, β]), can be undefined Array grid_origin Grid origin ([X, Y, Z]), can be undefined IntegratedObjects(auto_detection_of_integrated_objects, integrated_nodes, integrated_lines, integrated_openings) Sets integrated objects to surface Declaration function IntegratedObjects(auto_detection_of_integrated_objects, integrated_nodes, integrated_lines, integrated_openings) Parameters Type Name Description Boolean auto_detection_of_integrated_objects Integrated objects are detected automatically, can be undefined (true by default) Array integrated_nodes List of integrated nodes indexes, can be undefined Array integrated_lines List of integrated lines indexes, can be undefined Array integrated_openings List of integrated openings indexes, can be undefined;"
  },
  "api/SurfaceEccentricity.html": {
    "href": "api/SurfaceEccentricity.html",
    "title": "Class SurfaceEccentricity | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceEccentricity Creates surface eccentricity Constructors SurfaceEccentricity(no, surfaces_list, comment, params) Creates surface eccentricity Declaration new SurfaceEccentricity(no, surfaces_list, comment, params) Parameters Type Name Description Number no Index of surface eccentricity, can be undefined Array surfaces_list List of surfaces indexes String comment Comment, can be undefined Object params Surface eccentricity's parameters, can be undefined Returns Type Description Created surface eccentricity Functions OffsetAndThicknessAssignment(no, surfaces_list, offset, thickness_alignment, comment, params) Sets offset or/and thickness alignment Declaration function OffsetAndThicknessAssignment(no, surfaces_list, offset, thickness_alignment, comment, params) Parameters Type Name Description Number no Index of surface eccentricity, can be undefined Array surfaces_list List of surfaces indexes Number offset Absolute ordinate (value has tu be set with this way: for example 20 mm), can be undefined String thickness_alignment Thickness assignment (THICKNESS_ALIGNMENT_TOP, THICKNESS_ALIGNMENT_MIDDLE, THICKNESS_ALIGNMENT_BOTTOM), can be undefined (middle as default) String comment Comment, can be undefined Object params Surface eccentricity's parameters, can be undefined TransverseOffset(reference_type, reference_no, offset_alignment) Sets transverse offset Declaration function TransverseOffset(reference_type, reference_no, offset_alignment) Parameters Type Name Description String reference_type Reference object type (REFERENCE_TYPE_MEMBER, REFERENCE_TYPE_SURFACE) Number reference_no Member or surface Number String offset_alignment Axial offset (TRANSVERSE_OFFSET_TOP, TRANSVERSE_OFFSET_MIDDLE, TRANSVERSE_OFFSET_BOTTOM), can be undefined (middle as default)"
  },
  "api/SurfaceLoad.html": {
    "href": "api/SurfaceLoad.html",
    "title": "Class SurfaceLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceLoad Creates surface load Constructors SurfaceLoad(no, load_case, surfaces, comment, params) Creates surface load Declaration new SurfaceLoad(no, load_case, surfaces, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface load Functions Force(no, load_case, surfaces, load_distribution, load_values, load_direction, comment, params) Creates surface force load Declaration function Force(no, load_case, surfaces, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface force load Temperature(no, load_case, surfaces, load_distribution, load_values, comment, params) Creates surface temperature load Declaration function Temperature(no, load_case, surfaces, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface temperature load AxialStrain(no, load_case, surfaces, load_distribution, load_values, comment, params) Creates surface axial strain load Declaration function AxialStrain(no, load_case, surfaces, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface axial strain load Precamber(no, load_case, surfaces, load_value, comment, params) Creates surface precamber load Declaration function Precamber(no, load_case, surfaces, load_value, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface precamber load RotaryMotion(no, load_case, surfaces, load_values, comment, params) Creates surface rotary motion load Declaration function RotaryMotion(no, load_case, surfaces, load_values, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface rotary motion load Mass(no, load_case, surfaces, load_value, comment, params) Creates surface mass load Declaration function Mass(no, load_case, surfaces, load_value, comment, params) Parameters Type Name Description Number no Index of surface load, can be undefined Object load_case Load case Array surfaces List of surface indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface mass load IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/SurfaceMeshRefinement.html": {
    "href": "api/SurfaceMeshRefinement.html",
    "title": "Class SurfaceMeshRefinement | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceMeshRefinement Creates surface mesh refinement Constructors SurfaceMeshRefinement(no, surface_list, target_length, comment, params) Creates surface mesh refinement Declaration new SurfaceMeshRefinement(no, surface_list, target_length, comment, params) Parameters Type Name Description Number no Index of surface mesh refinement, can be undefined Array surface_list List of surface indexes, can be undefined Number target_length Target FE length, can be undefined (0.05 m by default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface mesh refinement"
  },
  "api/SurfaceSet.html": {
    "href": "api/SurfaceSet.html",
    "title": "Class SurfaceSet | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceSet Create Surface Set Constructors SurfaceSet(no, surfaces, surface_set_type, comment, params) Create Surface Set Declaration new SurfaceSet(no, surfaces, surface_set_type, comment, params) Parameters Type Name Description undefinedint no Number of Surface Set array surfaces List of surfaces string surface_set_type Surface Set type string comment Comment for the Surface Set undefineddictionary params Parameters of the Surface Set Returns Type Description surfaceSet Functions ContinuousSurfaces(no, surfaces, comment, params) Create Continuous Surfaces surfaceSet type Declaration function ContinuousSurfaces(no, surfaces, comment, params) Parameters Type Name Description Dlubal.int no Number of Surface Set array surfaces List of surfaces string comment Comment for the Surface Set Dlubal.dictionary params Parameters of the Surface Set GroupOfSurfaces(no, surfaces, comment, params) Create Group of Surfaces Declaration function GroupOfSurfaces(no, surfaces, comment, params) Parameters Type Name Description Dlubal.int no Number of Surface Set array surfaces List of surfaces string comment Comment for the Surface Set Dlubal.dictionary params Parameters of the Surface Set"
  },
  "api/SurfaceSetLoad.html": {
    "href": "api/SurfaceSetLoad.html",
    "title": "Class SurfaceSetLoad | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceSetLoad Creates line set load Constructors SurfaceSetLoad(no, load_case, line_sets, comment, params) Creates line set load Declaration new SurfaceSetLoad(no, load_case, line_sets, comment, params) Parameters Type Name Description Number no Index of line set load, can be undefined Object load_case Load case Array line_sets List of line set indexes String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created line set load Functions Force(no, load_case, surface_sets, load_distribution, load_values, load_direction, comment, params) Creates surface set force load Declaration function Force(no, load_case, surface_sets, load_distribution, load_values, load_direction, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String load_direction Load direction, can be undefined String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set force load Temperature(no, load_case, surface_sets, load_distribution, load_values, comment, params) Creates surface set temperature load Declaration function Temperature(no, load_case, surface_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set temperature load AxialStrain(no, load_case, surface_sets, load_distribution, load_values, comment, params) Creates surface set axial strain load Declaration function AxialStrain(no, load_case, surface_sets, load_distribution, load_values, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes String load_distribution Load distribution Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set axial strain load Precamber(no, load_case, surface_sets, load_value, comment, params) Creates surface set precamber load Declaration function Precamber(no, load_case, surface_sets, load_value, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set precamber load RotaryMotion(no, load_case, surface_sets, load_values, comment, params) Creates surface set rotary motion load Declaration function RotaryMotion(no, load_case, surface_sets, load_values, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes Array load_values Load parameters depend on load distribution (for more information look at setSurfaceLoadDistribution function) String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set rotary motion load Mass(no, load_case, surface_sets, load_value, comment, params) Creates surface set mass load Declaration function Mass(no, load_case, surface_sets, load_value, comment, params) Parameters Type Name Description Number no Index of surface set load, can be undefined Object load_case Load case Array surface_sets List of surface set indexes Array load_value Uniform load parameter String comment Comment, can be undefined Object params Load parameters, can be undefined Returns Type Description Object Created surface set mass load IndividualMassComponents(MX, MY, MZ) Sets individual mass components (only for mass load) Declaration function IndividualMassComponents(MX, MY, MZ) Parameters Type Name Description Number MX Mass in X coordination, can be undefined Number MY Mass in Y coordination, can be undefined Number MZ Mass in Z coordination, can be undefined"
  },
  "api/SurfaceStiffnessModification.html": {
    "href": "api/SurfaceStiffnessModification.html",
    "title": "Class SurfaceStiffnessModification | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class SurfaceStiffnessModification Creates surface stiffness modification Constructors SurfaceStiffnessModification(no, structural_modification, comment, params) Creates surface stiffness modification Declaration new SurfaceStiffnessModification(no, structural_modification, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification Functions TotalStiffnessFactor(no, structural_modification, total_stiffness, comment, params) Creates total stiffness factor type of surface stiffness modification Declaration function TotalStiffnessFactor(no, structural_modification, total_stiffness, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index Number total_stiffness Total stiffness String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification PartialStiffnessesFactors(no, structural_modification, bending_stiffness_factor, shear_stiffness, membrane_stiffness, eccentric_effects, weight, comment, params) Creates partial stiffnesses factors type of surface stiffness modification Declaration function PartialStiffnessesFactors(no, structural_modification, bending_stiffness_factor, shear_stiffness, membrane_stiffness, eccentric_effects, weight, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index Number bending_stiffness_factor Bending and torsional factors, can be undefined (1.00 by default) Number shear_stiffness Shear stiffness, can be undefined (1.00 by default) Number membrane_stiffness Membrane stiffness, can be undefined (1.00 by default) Number eccentric_effects Eccentric stiffness, can be undefined (1.00 by default) Number weight Weight, can be undefined (1.00 by default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification StiffnessMatrixElementsFactors(no, structural_modification, bending_torsional_stiffness_elements, shear_stiffness_elements, membrane_stiffness_elements, eccentric_stiffness_elements, comment, params) Creates stiffness matrix elements factors type of surface stiffness modification Declaration function StiffnessMatrixElementsFactors(no, structural_modification, bending_torsional_stiffness_elements, shear_stiffness_elements, membrane_stiffness_elements, eccentric_stiffness_elements, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index Array bending_torsional_stiffness_elements Bending torsional stiffness elements values ([kD11, kD12, kD13, kD22, kD23, kD33, kD11 note, kD12 note, kD13 note, kD22 note, kD23 note, kD33 note]), can be undefined (all values 1.0 by default) Array shear_stiffness_elements Shear stiffness elements values ([kD44, kD45, kD55, kD44 note, kD45 note, kD55 note]), can be undefined (all values 1.0 by default) Array membrane_stiffness_elements Membrane stiffness elements values ([kD66, kD67, kD68, kD77, kD78, kD88, kD66 note, kD67 note, kD68 note, kD77 note, kD78 note, kD88 note]), can be undefined (all values 1.0 by default) Array eccentric_stiffness_elements Eccentric stiffness elements values ([kD16, kD17, kD18, kD27, kD28, kD38, kD16 note, kD17 note, kD18 note, kD27 note, kD28 note, kD38 note]), can be undefined (all values 1.0 by default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification ConcreteStructuresACI(no, structural_modification, component_type, comment, params) Creates concrete structure ACI type of surface stiffness modification Declaration function ConcreteStructuresACI(no, structural_modification, component_type, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index Number component_type Component type (1 - Columns, 2 - Walls uncracked, 3 - Walls cracked, 4 - Beams, 5 - Flat plates and flat slabs), can be undefined (Columns type as default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification ConcreteStructuresCSA(no, structural_modification, component_type, comment, params) Creates concrete structure CSA type of surface stiffness modification Declaration function ConcreteStructuresCSA(no, structural_modification, component_type, comment, params) Parameters Type Name Description Number no Index of surface stiffness modification Number structural_modification Structural modification index Number component_type Component type (1 - Columns, 2 - Walls uncracked, 3 - Walls cracked, 4 - Beams, 5 - Flat plates and flat slabs), can be undefined (Columns type as default) String comment Comment, can be undefined Object params Surface stiffness modification's parameters, can be undefined Returns Type Description Created surface stiffness modification"
  },
  "api/Thickness.html": {
    "href": "api/Thickness.html",
    "title": "Class Thickness | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class Thickness Create Thickness Constructors Thickness(no, name, material, uniform_thickness_d, comment, params) Create Thickness Declaration new Thickness(no, name, material, uniform_thickness_d, comment, params) Parameters Type Name Description undefinedint no Number of Thickness string name Name of the Thickness undefinedint material Number of material number uniform_thickness_d Uniform thickness in meters. string comment Comment for the Thickness undefineddictionary params Parameters of the Thickness Returns Type Description Thickness Functions Uniform(no, name, material, properties, comment, params) Create Uniform thickness Declaration function Uniform(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness in format [thickness] string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_3Nodes(no, name, material, properties, comment, params) Create Variable - 3 Nodes thickness Declaration function Variable_3Nodes(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_2NodesAndDirection(no, name, material, properties, comment, params) Create Variable - 2 Nodes and Direction thickness Declaration function Variable_2NodesAndDirection(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_4SurfaceCorners(no, name, material, properties, comment, params) Create Variable - 4 Surface Corners thickness Declaration function Variable_4SurfaceCorners(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Variable_Circle(no, name, material, properties, comment, params) Create Variable - Circle thickness Declaration function Variable_Circle(no, name, material, properties, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness Dlubal.int material Number of material array properties Properties of thickness string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness Layers(no, name, layers, comment, params) Create Layers thickness Declaration function Layers(no, name, layers, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness array layers List of layers string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness ShapeOrthotropy(no, name, layers, orthotropy_type, rotation_beta, consideration_of_self_weight, parameters, comment, params) Create Shape Orthotropy thickness Declaration function ShapeOrthotropy(no, name, layers, orthotropy_type, rotation_beta, consideration_of_self_weight, parameters, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness array layers List of layers string orthotropy_type Orthotropy Type number rotation_beta Rotation about Z-axis of surface (Degree) string consideration_of_self_weight Self-Weight definition array parameters Parameters of Shame Orthotropy string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness StiffnessMatrix(no, name, rotation_beta, consideration_of_self_weight, coefficient_of_thermal_expansion, stiffness_matrix, comment, params) Create Stiffness Matrix thickness Declaration function StiffnessMatrix(no, name, rotation_beta, consideration_of_self_weight, coefficient_of_thermal_expansion, stiffness_matrix, comment, params) Parameters Type Name Description Dlubal.int no Number of Thickness string name Name of the Thickness number rotation_beta Rotation about Z-axis of surface (Degree) string consideration_of_self_weight Self-Weight definition array coefficient_of_thermal_expansion Coefficient of thermal expansion array stiffness_matrix Stiffness Matrix string comment Comment for the Thickness Dlubal.dictionary params Parameters of the Thickness"
  },
  "api/WindSimulationSettings.html": {
    "href": "api/WindSimulationSettings.html",
    "title": "Class WindSimulationSettings | Dlubal JavaScript High Level Functions Library",
    "keywords": "Class WindSimulationSettings Class creates WindSimulationSettings object Constructors WindSimulationSettings(no, name, density, kinematicViscosity, consider_turbulence, turbulenceModel, memberLoadDistribution, comment, params) Basic constuctor Declaration new WindSimulationSettings(no, name, density, kinematicViscosity, consider_turbulence, turbulenceModel, memberLoadDistribution, comment, params) Parameters Type Name Description undefined* no undefined* name undefined* density undefined* kinematicViscosity undefined* consider_turbulence undefined* turbulenceModel undefined* memberLoadDistribution undefined* comment undefined* params Returns Type Description Object WindSimulationSettings"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Dlubal JavaScript High Level Functions Library",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "RFEM/RSTAB/RSECTION High Level Function Library | Dlubal JavaScript High Level Functions Library",
    "keywords": "RFEM/RSTAB/RSECTION High Level Function Library Description This JavaScript project is focused on opening of possibility of scripting inside RFEM 6 RSTAB 9 and RSECTION to all our customers. Library enables them possibility to create models and interact with our applications on much higher level. The goal is to create easily expandable JavaScript library for scripting inside RFEM / RSTAB /RSECTION. Getting started You can download actual release of our JavaScript library and the use it for your project or you can fork our repository. Steps for downloaded release Go to release location Download zip file called Source code.zip Unzip it Use PowerShell script CopyFilesToRFEMLocation to copy content of library into you installation folder (you may need to have admin rights) Steps for Visual Studio Code Download Visual Studio Code and install it Open Visual Studio Code and install following extensions C# - extension for working with C# in VS Code Code Spell Checker - useful extension for spell checking GitHub Pull Requests and Issues - extension for easy access to the GitHub pull request GitHub Issues - extension for easy access to the GitHub issues Git Lens - extension for better work with Source management ESLint - Linter for JavaScript Download Git and install it (needed for better functionality of Git Lens) Download GitHub Desktop Fork this repositor Clone repository from GitHub Open Visual Studio Code Made your own project or use one from examples Copy your project to User Scripts/Example folder Dependencies RFEM 6 or RSTAB9 or RSECTION application Examples Examples can be found under Examples folder. License Contribute Contributions are always welcome! Please ensure your pull request adheres to the following guidelines Contributing"
  }
}